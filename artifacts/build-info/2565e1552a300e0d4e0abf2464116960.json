{"id":"2565e1552a300e0d4e0abf2464116960","_format":"hh-sol-build-info-1","solcVersion":"0.8.17","solcLongVersion":"0.8.17+commit.8df45f5f","input":{"language":"Solidity","sources":{"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlEnumerableUpgradeable.sol\";\nimport \"./AccessControlUpgradeable.sol\";\nimport \"../utils/structs/EnumerableSetUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\n    function __AccessControlEnumerable_init() internal onlyInitializing {\n    }\n\n    function __AccessControlEnumerable_init_unchained() internal onlyInitializing {\n    }\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\n\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\n        return _roleMembers[role].at(index);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\n        return _roleMembers[role].length();\n    }\n\n    /**\n     * @dev Overload {_grantRole} to track enumerable memberships\n     */\n    function _grantRole(bytes32 role, address account) internal virtual override {\n        super._grantRole(role, account);\n        _roleMembers[role].add(account);\n    }\n\n    /**\n     * @dev Overload {_revokeRole} to track enumerable memberships\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual override {\n        super._revokeRole(role, account);\n        _roleMembers[role].remove(account);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../utils/StringsUpgradeable.sol\";\nimport \"../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\n    function __AccessControl_init() internal onlyInitializing {\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        StringsUpgradeable.toHexString(account),\n                        \" is missing role \",\n                        StringsUpgradeable.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n"},"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControlUpgradeable {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"},"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822ProxiableUpgradeable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"},"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\n *\n * _Available since v4.8.3._\n */\ninterface IERC1967Upgradeable {\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Emitted when the beacon is changed.\n     */\n    event BeaconUpgraded(address indexed beacon);\n}\n"},"@openzeppelin/contracts-upgradeable/interfaces/IERC5267Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC5267.sol)\n\npragma solidity ^0.8.0;\n\ninterface IERC5267Upgradeable {\n    /**\n     * @dev MAY be emitted to signal that the domain could have changed.\n     */\n    event EIP712DomainChanged();\n\n    /**\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\n     * signature.\n     */\n    function eip712Domain()\n        external\n        view\n        returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        );\n}\n"},"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeaconUpgradeable {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"},"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeaconUpgradeable.sol\";\nimport \"../../interfaces/IERC1967Upgradeable.sol\";\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/StorageSlotUpgradeable.sol\";\nimport \"../utils/Initializable.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n */\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\n    function __ERC1967Upgrade_init() internal onlyInitializing {\n    }\n\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\n    }\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(AddressUpgradeable.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(AddressUpgradeable.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../ERC1967/ERC1967UpgradeUpgradeable.sol\";\nimport \"./Initializable.sol\";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n *\n * _Available since v4.1._\n */\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\n    function __UUPSUpgradeable_init() internal onlyInitializing {\n    }\n\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\n    }\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n    address private immutable __self = address(this);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        require(address(this) != __self, \"Function must be called through delegatecall\");\n        require(_getImplementation() == __self, \"Function must be called through active proxy\");\n        _;\n    }\n\n    /**\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n     * callable on the implementing contract but not through proxies.\n     */\n    modifier notDelegated() {\n        require(address(this) == __self, \"UUPSUpgradeable: must not be called through delegatecall\");\n        _;\n    }\n\n    /**\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\n     */\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\n        return _IMPLEMENTATION_SLOT;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\n     */\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeTo} and {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n// EIP-2612 is Final as of 2022-11-01. This file is deprecated.\n\nimport \"./IERC20PermitUpgradeable.sol\";\n"},"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20PermitUpgradeable {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"},"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../StringsUpgradeable.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSAUpgradeable {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\")\n            mstore(0x1c, hash)\n            message := keccak256(0x00, 0x3c)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", StringsUpgradeable.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, \"\\x19\\x01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            data := keccak256(ptr, 0x42)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\n     * `validator` and `data` according to the version 0 of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x00\", validator, data));\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/EIP712.sol)\n\npragma solidity ^0.8.8;\n\nimport \"./ECDSAUpgradeable.sol\";\nimport \"../../interfaces/IERC5267Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\n * separator of the implementation contract. This will cause the `_domainSeparatorV4` function to always rebuild the\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\n *\n * _Available since v3.4._\n *\n * @custom:storage-size 52\n */\nabstract contract EIP712Upgradeable is Initializable, IERC5267Upgradeable {\n    bytes32 private constant _TYPE_HASH =\n        keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\n\n    /// @custom:oz-renamed-from _HASHED_NAME\n    bytes32 private _hashedName;\n    /// @custom:oz-renamed-from _HASHED_VERSION\n    bytes32 private _hashedVersion;\n\n    string private _name;\n    string private _version;\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\n        __EIP712_init_unchained(name, version);\n    }\n\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\n        _name = name;\n        _version = version;\n\n        // Reset prior values in storage if upgrading\n        _hashedName = 0;\n        _hashedVersion = 0;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        return _buildDomainSeparator();\n    }\n\n    function _buildDomainSeparator() private view returns (bytes32) {\n        return keccak256(abi.encode(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash(), block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n\n    /**\n     * @dev See {EIP-5267}.\n     *\n     * _Available since v4.9._\n     */\n    function eip712Domain()\n        public\n        view\n        virtual\n        override\n        returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        )\n    {\n        // If the hashed name and version in storage are non-zero, the contract hasn't been properly initialized\n        // and the EIP712 domain is not reliable, as it will be missing name and version.\n        require(_hashedName == 0 && _hashedVersion == 0, \"EIP712: Uninitialized\");\n\n        return (\n            hex\"0f\", // 01111\n            _EIP712Name(),\n            _EIP712Version(),\n            block.chainid,\n            address(this),\n            bytes32(0),\n            new uint256[](0)\n        );\n    }\n\n    /**\n     * @dev The name parameter for the EIP712 domain.\n     *\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n     * are a concern.\n     */\n    function _EIP712Name() internal virtual view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev The version parameter for the EIP712 domain.\n     *\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n     * are a concern.\n     */\n    function _EIP712Version() internal virtual view returns (string memory) {\n        return _version;\n    }\n\n    /**\n     * @dev The hash of the name parameter for the EIP712 domain.\n     *\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Name` instead.\n     */\n    function _EIP712NameHash() internal view returns (bytes32) {\n        string memory name = _EIP712Name();\n        if (bytes(name).length > 0) {\n            return keccak256(bytes(name));\n        } else {\n            // If the name is empty, the contract may have been upgraded without initializing the new storage.\n            // We return the name hash in storage if non-zero, otherwise we assume the name is empty by design.\n            bytes32 hashedName = _hashedName;\n            if (hashedName != 0) {\n                return hashedName;\n            } else {\n                return keccak256(\"\");\n            }\n        }\n    }\n\n    /**\n     * @dev The hash of the version parameter for the EIP712 domain.\n     *\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Version` instead.\n     */\n    function _EIP712VersionHash() internal view returns (bytes32) {\n        string memory version = _EIP712Version();\n        if (bytes(version).length > 0) {\n            return keccak256(bytes(version));\n        } else {\n            // If the version is empty, the contract may have been upgraded without initializing the new storage.\n            // We return the version hash in storage if non-zero, otherwise we assume the version is empty by design.\n            bytes32 hashedVersion = _hashedVersion;\n            if (hashedVersion != 0) {\n                return hashedVersion;\n            } else {\n                return keccak256(\"\");\n            }\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[48] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary MathUpgradeable {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMathUpgradeable {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n * _Available since v4.9 for `string`, `bytes`._\n */\nlibrary StorageSlotUpgradeable {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/MathUpgradeable.sol\";\nimport \"./math/SignedMathUpgradeable.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = MathUpgradeable.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMathUpgradeable.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSetUpgradeable {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"},"contracts/CrossSyncGateway.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\npragma abicoder v2;\n\n\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\n\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol';\n\nimport '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\n\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol';\n\nimport '@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol';\n\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol';\n\n\nimport './helpers/ERC2771Recipient.sol';\nimport './interfaces/ICrossSyncGateway.sol';\n\nimport './interfaces/IMessagingImpl.sol';\nimport './interfaces/ICrossSyncReceiverImplementer.sol';\n\n\n\ninterface IWETH9 {\n\n    function deposit() external payable ;\n    function withdraw(uint wad) external payable;\n    function totalSupply() external returns (uint);  \n    function approve(address guy, uint wad) external returns (bool);\n\n}\n\n\ncontract CrossSyncGateway is ICrossSyncGateway, Initializable, OwnableUpgradeable, ERC2771Recipient, PausableUpgradeable, AccessControlUpgradeable, ReentrancyGuardUpgradeable, EIP712Upgradeable, UUPSUpgradeable {\n\n    bytes32 public constant SUPER_ADMIN_ROLE = keccak256('SUPER_ADMIN_ROLE');\n    bytes32 public constant ADMIN_ROLE = keccak256('ADMIN_ROLE');\n    bytes32 public constant PAUSER_ROLE = keccak256('PAUSER_ROLE');\n    bytes32 public constant UPGRADER_ROLE = keccak256('UPGRADER_ROLE');\n\n    address public nativeCurrencyWrappedAddress;\n    address public nativeCurrencyAddress;\n\n    struct RouteData {\n        address routeAddress;\n        bool isValid;\n        string routeName;\n    }\n\n    mapping (uint256 => RouteData) private routes;\n    mapping (uint256 => address) public destChainGatewayAddress;\n    mapping (address => mapping(uint256 => mapping(uint256 => uint256))) public sentUserNonce; //address => srcChainId => destChainId => nonce\n    mapping (address => mapping(uint256 => mapping(uint256 => bool))) public receiveUserNonceSeen; //address => srcChainId => nonce => bool\n\n    uint256 public crossSyncFeePercent; // Divided By 10000\n    address public crossSyncFeeAddress;\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers();\n    }\n\n    function initialize(string calldata _name, string calldata _version, address _nativeCurrencyWrappedAddress, address _nativeCurrencyAddress, address _owner, address _crossSyncFeeAddress) public initializer {\n        __Pausable_init();\n        __Ownable_init();\n        __AccessControl_init();\n        __ReentrancyGuard_init();\n        __EIP712_init(_name, _version);\n        __UUPSUpgradeable_init();\n\n\n        __setOwner__(_owner);\n        _setRoleAdmin(ADMIN_ROLE, SUPER_ADMIN_ROLE);\n        _setRoleAdmin(PAUSER_ROLE, SUPER_ADMIN_ROLE);\n\n        nativeCurrencyWrappedAddress = _nativeCurrencyWrappedAddress;\n        nativeCurrencyAddress = _nativeCurrencyAddress;\n        crossSyncFeePercent = 40; //Default to 40/10000 = 0.4%\n        crossSyncFeeAddress = _crossSyncFeeAddress;\n    }\n\n/*\n******************************************Contract Settings Functions****************************************************\n*/\n\n    /**\n    * @dev overriding the inherited {transferOwnership} function to reflect the admin changes into the {DEFAULT_ADMIN_ROLE}\n    */\n    \n    function transferOwnership(address newOwner) public override onlyOwner {\n        super.transferOwnership(newOwner);\n        _grantRole(DEFAULT_ADMIN_ROLE, newOwner);\n        renounceRole(DEFAULT_ADMIN_ROLE, _msgSender());\n    }\n\n    /**\n    * @dev modifier to check Upgrader rights.\n    * contract Owner and Upgrader have Upgrader rights\n    */\n\n    modifier onlyUpgrader() {\n        require(\n            hasRole(UPGRADER_ROLE, _msgSender()) ||\n            owner() == _msgSender(),\n            'Unauthorized Access');\n        _;\n    }\n\n    \n\n    /**\n    * @dev modifier to check super admin rights.\n    * contract owner and super admin have super admin rights\n    */\n\n    modifier onlySuperAdmin() {\n        require(\n            hasRole(SUPER_ADMIN_ROLE, _msgSender()) ||\n            owner() == _msgSender(),\n            'Unauthorized Access');\n        _;\n    }\n\n    /**\n    * @dev modifier to check admin rights.\n    * contract owner, super admin and admins have admin rights\n    */\n    modifier onlyAdmin() {\n        require(\n            hasRole(ADMIN_ROLE, _msgSender()) ||\n            hasRole(SUPER_ADMIN_ROLE, _msgSender()) ||\n            owner() == _msgSender(),\n            'Unauthorized Access');\n        _;\n    }\n\n    /**\n    * @dev modifier to check pause rights.\n    * contract owner, super admin and pausers's have pause rights\n    */\n    modifier onlyPauser() {\n        require(\n            hasRole(PAUSER_ROLE, _msgSender()) ||\n            hasRole(SUPER_ADMIN_ROLE, _msgSender()) || \n            owner() == _msgSender(),\n            'Unauthorized Access');\n        _;\n    }\n\n    function pause() public onlyPauser {\n        _pause();\n    }\n\n    function unpause() public onlyPauser {\n        _unpause();\n    }\n\n    function addUpgrader(address _upgrader) public onlyOwner {\n        _grantRole(UPGRADER_ROLE, _upgrader);\n    }\n\n    function addSuperAdmin(address _superAdmin) public onlyOwner {\n        _grantRole(SUPER_ADMIN_ROLE, _superAdmin);\n    }\n\n    function addAdmin(address _admin) public onlySuperAdmin {\n        _grantRole(ADMIN_ROLE, _admin);\n    }\n\n    function addPauser(address account) public onlySuperAdmin {\n        _grantRole(PAUSER_ROLE, account);\n    }\n\n    function removeUpgrader(address _upgrader) public onlyOwner {\n        _revokeRole(UPGRADER_ROLE, _upgrader);\n    }\n\n    function removeSuperAdmin(address _superAdmin) public onlyOwner {\n        _revokeRole(SUPER_ADMIN_ROLE, _superAdmin);\n    }\n\n    function removeAdmin(address _admin) public onlySuperAdmin {\n        _revokeRole(ADMIN_ROLE, _admin);\n    }\n\n    function removePauser(address _pauser) public onlySuperAdmin {\n        _revokeRole(PAUSER_ROLE, _pauser);\n    }        \n\n/*\n************************************************************Setter Functions***************************************************\n*/\n\n    function setTrustedForwarder(address _newtrustedForwarder) public onlySuperAdmin {\n        _setTrustedForwarder(_newtrustedForwarder);\n    }\n\n    function setNativeWrappedCurrencyAddress(address _nativeCurrencyWrappedAddress) public onlySuperAdmin {\n        nativeCurrencyWrappedAddress = _nativeCurrencyWrappedAddress;\n    }\n\n    function setNativeCurrencyAddress(address _nativeCurrencyAddress) public onlySuperAdmin {\n        nativeCurrencyAddress = _nativeCurrencyAddress;\n    }\n\n    function getNativeWrappedCurrencyAddress() public view returns (address) {\n        return nativeCurrencyWrappedAddress;\n    }\n\n    function getNativeCurrencyAddress() public view returns (address) {\n        return nativeCurrencyAddress;\n    }\n\n    // Setter function for destChainGatewayAddress with onlySuperAdmin modifier\n    function setDestChainGatewayAddress(uint256 chainId, address crossSyncGatewayAddress) public onlySuperAdmin {\n        destChainGatewayAddress[chainId] = crossSyncGatewayAddress;\n    }\n\n    function setCrossSyncFee(uint256 _crossSyncFeePercent) public onlySuperAdmin {\n        crossSyncFeePercent = _crossSyncFeePercent;\n    }\n\n    function setCrossSyncFeeAddress(address _crossSyncFeeAddress) public onlySuperAdmin {\n        crossSyncFeeAddress = _crossSyncFeeAddress;\n    }\n\n/*\n************************************************************ Adding Messaging Routes Functions ***************************************************\n*/\n\n    function addRoute(uint256 _routeId, address _routeAddress, string memory _routeName) public onlySuperAdmin {\n        require(_routeAddress != address(0), 'Address 0 Provided');\n        require(!routes[_routeId].isValid, 'Route Already Exists');\n        routes[_routeId] = RouteData(_routeAddress, true, _routeName);\n    }\n\n    function removeRoute(uint256 _routeId) public onlySuperAdmin {\n        require(routes[_routeId].isValid, 'Route Does Not Exist');\n        delete routes[_routeId];\n    }\n\n    function getRoute(uint256 _routeId) public view returns (address, bool, string memory) {\n        return (routes[_routeId].routeAddress, routes[_routeId].isValid, routes[_routeId].routeName);\n    }\n\n    function getRouteAddress(uint256 _routeId) public view returns (address) {\n        return routes[_routeId].routeAddress;\n    }\n\n    function getRouteValidity(uint256 _routeId) public view returns (bool) {\n        return routes[_routeId].isValid;\n    }\n\n    function getRouteName(uint256 _routeId) public view returns (string memory) {\n        return routes[_routeId].routeName;\n    }\n\n    function setRouteAddress(uint256 _routeId, address _routeAddress) public onlySuperAdmin {\n        require(_routeAddress != address(0), 'Address 0 Provided');\n        require(routes[_routeId].isValid, 'Route Does Not Exist');\n        routes[_routeId].routeAddress = _routeAddress;\n    }\n\n    function setRouteValidity(uint256 _routeId, bool _isValid) public onlySuperAdmin {\n        require(routes[_routeId].isValid, 'Route Does Not Exist');\n        routes[_routeId].isValid = _isValid;\n    }\n\n    function setRouteName(uint256 _routeId, string memory _routeName) public onlySuperAdmin {\n        require(routes[_routeId].isValid, 'Route Does Not Exist');\n        routes[_routeId].routeName = _routeName;\n    }\n\n/*\n*********************************************************  Events ***********************************************************************\n*/    \n\n    event SyncFeeCollected(address from, uint256 amount, address feeAddress, uint256 indexed destinationChainId, uint256 indexed routeId, uint256 gasLimit);\n/*\n*********************************************************  Gateway Functions ***********************************************************************\n*/   \n\n    function handleReceive(\n        bytes calldata _payload\n    ) external override nonReentrant{\n        _handleReceive(_payload);\n    }\n\n    function _handleReceive(bytes calldata _payload) internal {\n        IMessagingImpl.ICrossSyncMessagingData memory decodePayload = abi.decode(_payload, (IMessagingImpl.ICrossSyncMessagingData));\n        // require(routes[decodePayload.messagingRouteId].routeAddress == _msgSender(), 'Route Address Mismatch/Invalid Caller');\n        \n        // require(decodePayload.destinationChainId == block.chainid, 'Destination Chain Id is not same as current chain id');\n        // require(decodePayload.destinationGatewayAddress == address(this), 'Destinatin Gateway Address Mismatch');\n       \n        // require(!receiveUserNonceSeen[decodePayload.sender][decodePayload.sourceChainId][decodePayload.nonce], 'Receive Users Nonce is already seen for this src Chain Id');\n        // receiveUserNonceSeen[decodePayload.sender][decodePayload.sourceChainId][decodePayload.nonce] = true;\n\n        ICrossSyncReceiverImplementer(decodePayload.payload.to).receiveMessage(\n            decodePayload.sourceChainId,\n            decodePayload.sender,\n            decodePayload.payload.data\n        );            \n    }\n\n    function sendMessage( uint256 _destinationChainId,\n        uint256 _routeId,\n        ICrossSyncGateway.MessagingPayload memory _payload,\n        uint256 _gasLimit,\n        bytes calldata _routeData) override public payable  {\n        require(routes[_routeId].isValid, 'Route Does Not Exist');\n        require(_payload.to != address(0), 'Address 0 Provided');\n        require(_destinationChainId != block.chainid, 'Source and Destination Chain Ids are same');\n        require(destChainGatewayAddress[_destinationChainId] != address(0), 'Destination Chain Gateway Address is not set');\n        // require(msg.value > 0, 'Relayer(msg.value) Fee can not be zero');\n\n        uint256 syncFee = getSyncFee(msg.value);\n        require(msg.value >= syncFee, 'Relayer(msg.value) Fee is less than syncFee');\n        uint256 messengerFee = msg.value - syncFee;\n        _transferNativeSyncFee(_msgSender(), _destinationChainId, _routeId, _gasLimit, syncFee);\n\n\n        IMessagingImpl.ICrossSyncMessagingData memory crossSyncPayload = IMessagingImpl.ICrossSyncMessagingData(\n            _msgSender(),\n            sentUserNonce[_msgSender()][block.chainid][_destinationChainId],\n            _routeId,\n            block.chainid,\n            _destinationChainId,\n            address(this),\n            destChainGatewayAddress[_destinationChainId], // To Be Filled By Route Impl Address\n            _payload\n        );\n\n        sentUserNonce[_msgSender()][block.chainid][_destinationChainId] += 1;\n\n        IMessagingImpl messenger = IMessagingImpl(routes[_routeId].routeAddress);\n        messenger.executeSendMessage{value: messengerFee}(crossSyncPayload, _gasLimit);\n    }\n\n\n\n\n    \n    function getFee(\n        uint256 _destinationChainId,\n        uint256 _routeId,\n        MessagingPayload calldata _payload,\n        uint256 _gasLimit\n    ) public override view returns(uint256){\n        require(routes[_routeId].isValid, 'Route Does Not Exist');\n        require(_payload.to != address(0), 'Address 0 Provided');\n        require(_destinationChainId != block.chainid, 'Source and Destination Chain Ids are same');\n        require(destChainGatewayAddress[_destinationChainId] != address(0), 'Destination Chain Gateway Address is not set');\n\n        IMessagingImpl.ICrossSyncMessagingData memory crossSyncPayload = IMessagingImpl.ICrossSyncMessagingData(\n            _msgSender(),\n            sentUserNonce[_msgSender()][block.chainid][_destinationChainId],\n            _routeId,\n            block.chainid,\n            _destinationChainId,\n            address(this),\n            destChainGatewayAddress[_destinationChainId],\n            _payload\n        );\n\n\n        IMessagingImpl messenger = IMessagingImpl(routes[_routeId].routeAddress);\n        uint256 messengerFee = messenger.getFee(crossSyncPayload, _gasLimit);\n        uint256 syncFee = getSyncFee(messengerFee);\n        uint256 finalFee = messengerFee + syncFee;\n        return finalFee;\n    }\n\n    function getSyncFee(uint256 messengerFee) public view returns (uint256) {\n        // Calculate 0.4% of the value\n        uint256 syncFee = (messengerFee * crossSyncFeePercent) / 10000;\n\n        // Add the calculated value to the original value\n       return syncFee;\n    }\n\n    function _transferNativeSyncFee(address _from, uint256 _destChainId, uint256 _routeId, uint256 _gasLimit, uint256 _crossSyncFee) internal {\n        require(crossSyncFeeAddress != address(0), 'CrossSyncFee Address Is Zero Address');\n        payable(crossSyncFeeAddress).transfer(_crossSyncFee);\n        emit SyncFeeCollected(_from, _crossSyncFee, crossSyncFeeAddress, _destChainId, _routeId, _gasLimit);\n    }\n/*\n********************************************************************** ERC20 HELPER FUNCTIONS **********************************************************************\n*/\n\n    function _giveTokenApproval(address _spender, address _tokenAddress, uint256 _tokenAmount) internal {\n        IERC20Upgradeable token = IERC20Upgradeable(_tokenAddress);\n        token.approve(_spender, _tokenAmount); // Approving Spender to use tokens from contract\n    }\n\n    function _transferToken(address _from, address _to, address _tokenAddress, uint256 _tokenAmount) internal {\n        if(_from == address(this)){\n            IERC20Upgradeable transferAsset = IERC20Upgradeable(_tokenAddress);\n            transferAsset.transfer(_to, _tokenAmount);\n        }else {\n            IERC20Upgradeable transferAsset = IERC20Upgradeable(_tokenAddress);\n            transferAsset.transferFrom(_from, _to, _tokenAmount);\n        }\n    }\n\n/*\n************************************************************ EIP712, Hashing and Signature Handling ***********************************************\n*/\n\n    function _verifyAdmin(bytes32 digest, bytes memory signature) internal view returns (bool) {\n        address signer = ECDSAUpgradeable.recover(digest, signature);\n        return (hasRole(ADMIN_ROLE, signer));\n    }\n\n/*\n***************************************** Important Functions - Edit With Care ***********************************************************\n*/   \n    function _msgSender() internal view virtual override(ContextUpgradeable, ERC2771Recipient) returns (address sender) {\n        if (isTrustedForwarder(msg.sender) && msg.data.length >= 20) {\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\n            /// @solidity memory-safe-assembly\n            assembly {\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\n            }\n        } else {\n            return super._msgSender();\n        }\n    }\n\n    function _msgData() internal view virtual override(ContextUpgradeable, ERC2771Recipient) returns (bytes calldata) {\n        if (isTrustedForwarder(msg.sender) && msg.data.length >= 20) {\n            return msg.data[:msg.data.length - 20];\n        } else {\n            return super._msgData();\n        }\n    }\n\n    function _authorizeUpgrade(address newImplementation)\n        internal\n        onlyUpgrader\n        override\n    {}\n\n    function __setOwner__(address _owner) internal {\n         super.transferOwnership(_owner);\n        _grantRole(DEFAULT_ADMIN_ROLE, _owner);\n    }\n     \n    function supportsInterface(bytes4 interfaceId) public view virtual override(AccessControlUpgradeable) returns (bool) {\n        return super.supportsInterface(interfaceId);\n    }\n   receive() external payable {}\n\n}"},"contracts/helpers/ERC2771Recipient.sol":{"content":"// SPDX-License-Identifier: MIT\n// solhint-disable no-inline-assembly\npragma solidity >=0.6.9;\n\nimport \"./IERC2771Recipient.sol\";\n\n/**\n * @title The ERC-2771 Recipient Base Abstract Class - Implementation\n *\n * @notice Note that this contract was called `BaseRelayRecipient` in the previous revision of the GSN.\n *\n * @notice A base contract to be inherited by any contract that want to receive relayed transactions.\n *\n * @notice A subclass must use `_msgSender()` instead of `msg.sender`.\n */\nabstract contract ERC2771Recipient is IERC2771Recipient {\n\n    /*\n     * Forwarder singleton we accept calls from\n     */\n    address private _trustedForwarder;\n\n    /**\n     * :warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.\n     * @notice Method is not a required method to allow Recipients to trust multiple Forwarders. Not recommended yet.\n     * @return forwarder The address of the Forwarder contract that is being used.\n     */\n    function getTrustedForwarder() public virtual view returns (address forwarder){\n        return _trustedForwarder;\n    }\n\n    function _setTrustedForwarder(address _forwarder) internal {\n        _trustedForwarder = _forwarder;\n    }\n\n    /// @inheritdoc IERC2771Recipient\n    function isTrustedForwarder(address forwarder) public virtual override view returns(bool) {\n        return forwarder == _trustedForwarder;\n    }\n\n    /// @inheritdoc IERC2771Recipient\n    function _msgSender() internal override virtual view returns (address ret) {\n        if (msg.data.length >= 20 && isTrustedForwarder(msg.sender)) {\n            // At this point we know that the sender is a trusted forwarder,\n            // so we trust that the last bytes of msg.data are the verified sender address.\n            // extract sender address from the end of msg.data\n            assembly {\n                ret := shr(96,calldataload(sub(calldatasize(),20)))\n            }\n        } else {\n            ret = msg.sender;\n        }\n    }\n\n    /// @inheritdoc IERC2771Recipient\n    function _msgData() internal override virtual view returns (bytes calldata ret) {\n        if (msg.data.length >= 20 && isTrustedForwarder(msg.sender)) {\n            return msg.data[0:msg.data.length-20];\n        } else {\n            return msg.data;\n        }\n    }\n}"},"contracts/helpers/IERC2771Recipient.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.6.0;\n\n/**\n * @title The ERC-2771 Recipient Base Abstract Class - Declarations\n *\n * @notice A contract must implement this interface in order to support relayed transaction.\n *\n * @notice It is recommended that your contract inherits from the ERC2771Recipient contract.\n */\nabstract contract IERC2771Recipient {\n\n    /**\n     * :warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.\n     * @param forwarder The address of the Forwarder contract that is being used.\n     * @return isTrustedForwarder `true` if the Forwarder is trusted to forward relayed transactions by this Recipient.\n     */\n    function isTrustedForwarder(address forwarder) public virtual view returns(bool);\n\n    /**\n     * @notice Use this method the contract anywhere instead of msg.sender to support relayed transactions.\n     * @return sender The real sender of this call.\n     * For a call that came through the Forwarder the real sender is extracted from the last 20 bytes of the `msg.data`.\n     * Otherwise simply returns `msg.sender`.\n     */\n    function _msgSender() internal virtual view returns (address);\n\n    /**\n     * @notice Use this method in the contract instead of `msg.data` when difference matters (hashing, signature, etc.)\n     * @return data The real `msg.data` of this call.\n     * For a call that came through the Forwarder, the real sender address was appended as the last 20 bytes\n     * of the `msg.data` - so this method will strip those 20 bytes off.\n     * Otherwise (if the call was made directly and not through the forwarder) simply returns `msg.data`.\n     */\n    function _msgData() internal virtual view returns (bytes calldata);\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}"},"contracts/interfaces/ICrossSyncGateway.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.17;\npragma abicoder v2;\n\nimport './ICrossSyncReceiver.sol';\n\ninterface ICrossSyncGateway is ICrossSyncReceiver {\n\n    struct MessagingPayload{\n        address to;\n        bytes data;\n    }\n\n    function sendMessage(\n        uint256 _destinationChainId,\n        uint256 _routeId,\n        MessagingPayload calldata _payload,\n        uint256 gasLimit,\n        bytes calldata _routeData\n    ) external payable;\n\n    // function sendMessageUsingManualMultiHop(\n    //     uint256[] memory _destinationChainIds,\n    //     uint256[] memory _routeIds,\n    //     MessagingPayload calldata _payload,\n    //     uint256 gasLimit,\n    //     bytes[] calldata _routeData\n    // ) external payable;\n\n    function getFee(\n        uint256 _destinationChainId,\n        uint256 _routeId,\n        MessagingPayload calldata _payload,\n        uint256 _gasLimit\n    ) external view returns(uint256);\n    \n       \n}"},"contracts/interfaces/ICrossSyncReceiver.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.17;\npragma abicoder v2;\n\n\ninterface ICrossSyncReceiver {\n\n    function handleReceive(\n        bytes calldata _payload\n    ) external;  \n\n}"},"contracts/interfaces/ICrossSyncReceiverImplementer.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.17;\npragma abicoder v2;\n\ninterface ICrossSyncReceiverImplementer {\n\n    function receiveMessage(\n        uint256 _sourceChainId,\n        address _sourceAddress,\n        bytes calldata _payload\n    ) external payable ;    \n  \n        \n}"},"contracts/interfaces/IMessagingImpl.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.17;\npragma abicoder v2;\n\nimport './ICrossSyncGateway.sol';\n\ninterface IMessagingImpl {\n\n    struct ICrossSyncMessagingData {\n        address sender;\n        uint256 nonce;\n        uint256 messagingRouteId;\n        uint256 sourceChainId;\n        uint256 destinationChainId;\n        address sourceGatewayAddress;\n        address destinationGatewayAddress;\n        ICrossSyncGateway.MessagingPayload payload;\n    }\n\n    struct ICrossSyncMultiHopMessagingData {\n        address sender;\n        uint256 nonce;\n        uint256[] messagingRouteIds;\n        uint256 sourceChainId;\n        uint256[] destinationChainIds;\n        address sourceGatewayAddress;\n        address destinationGatewayAddress;\n        ICrossSyncGateway.MessagingPayload payload;\n    }\n\n    function executeSendMessage(\n        ICrossSyncMessagingData calldata _data, uint256 _gasLimit) external payable returns(bytes calldata) ;\n\n    // function executeMultiHopSendMessage(\n    //     ICrossSyncMultiHopMessagingData calldata _data, uint256 _gasLimit) external payable returns(bytes calldata) ;    \n\n    function getFee(ICrossSyncMessagingData calldata _data, uint256 _gasLimit) external view returns(uint256);    \n\n}"}},"settings":{"optimizer":{"enabled":true,"runs":200},"viaIR":true,"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","storageLayout","devdoc","userdoc","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"errors":[{"component":"general","errorCode":"5667","formattedMessage":"Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n   --> contracts/CrossSyncGateway.sol:318:9:\n    |\n318 |         bytes calldata _routeData) override public payable  {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n\n","message":"Unused function parameter. Remove or comment out the variable name to silence this warning.","severity":"warning","sourceLocation":{"end":11713,"file":"contracts/CrossSyncGateway.sol","start":11688},"type":"Warning"}],"sources":{"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol","exportedSymbols":{"AccessControlEnumerableUpgradeable":[144],"AccessControlUpgradeable":[480],"AddressUpgradeable":[2063],"ContextUpgradeable":[2105],"ERC165Upgradeable":[3138],"EnumerableSetUpgradeable":[4734],"IAccessControlEnumerableUpgradeable":[505],"IAccessControlUpgradeable":[578],"IERC165Upgradeable":[3150],"Initializable":[1269],"MathUpgradeable":[4016],"SignedMathUpgradeable":[4121],"StringsUpgradeable":[2444]},"id":145,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"118:23:0"},{"absolutePath":"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol","file":"./IAccessControlEnumerableUpgradeable.sol","id":2,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":145,"sourceUnit":506,"src":"143:51:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol","file":"./AccessControlUpgradeable.sol","id":3,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":145,"sourceUnit":481,"src":"195:40:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol","file":"../utils/structs/EnumerableSetUpgradeable.sol","id":4,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":145,"sourceUnit":4735,"src":"236:55:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":5,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":145,"sourceUnit":1270,"src":"292:42:0","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":7,"name":"Initializable","nameLocations":["487:13:0"],"nodeType":"IdentifierPath","referencedDeclaration":1269,"src":"487:13:0"},"id":8,"nodeType":"InheritanceSpecifier","src":"487:13:0"},{"baseName":{"id":9,"name":"IAccessControlEnumerableUpgradeable","nameLocations":["502:35:0"],"nodeType":"IdentifierPath","referencedDeclaration":505,"src":"502:35:0"},"id":10,"nodeType":"InheritanceSpecifier","src":"502:35:0"},{"baseName":{"id":11,"name":"AccessControlUpgradeable","nameLocations":["539:24:0"],"nodeType":"IdentifierPath","referencedDeclaration":480,"src":"539:24:0"},"id":12,"nodeType":"InheritanceSpecifier","src":"539:24:0"}],"canonicalName":"AccessControlEnumerableUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":6,"nodeType":"StructuredDocumentation","src":"336:94:0","text":" @dev Extension of {AccessControl} that allows enumerating the members of each role."},"fullyImplemented":true,"id":144,"linearizedBaseContracts":[144,480,3138,3150,505,578,2105,1269],"name":"AccessControlEnumerableUpgradeable","nameLocation":"449:34:0","nodeType":"ContractDefinition","nodes":[{"body":{"id":17,"nodeType":"Block","src":"638:7:0","statements":[]},"id":18,"implemented":true,"kind":"function","modifiers":[{"id":15,"kind":"modifierInvocation","modifierName":{"id":14,"name":"onlyInitializing","nameLocations":["621:16:0"],"nodeType":"IdentifierPath","referencedDeclaration":1214,"src":"621:16:0"},"nodeType":"ModifierInvocation","src":"621:16:0"}],"name":"__AccessControlEnumerable_init","nameLocation":"579:30:0","nodeType":"FunctionDefinition","parameters":{"id":13,"nodeType":"ParameterList","parameters":[],"src":"609:2:0"},"returnParameters":{"id":16,"nodeType":"ParameterList","parameters":[],"src":"638:0:0"},"scope":144,"src":"570:75:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":23,"nodeType":"Block","src":"729:7:0","statements":[]},"id":24,"implemented":true,"kind":"function","modifiers":[{"id":21,"kind":"modifierInvocation","modifierName":{"id":20,"name":"onlyInitializing","nameLocations":["712:16:0"],"nodeType":"IdentifierPath","referencedDeclaration":1214,"src":"712:16:0"},"nodeType":"ModifierInvocation","src":"712:16:0"}],"name":"__AccessControlEnumerable_init_unchained","nameLocation":"660:40:0","nodeType":"FunctionDefinition","parameters":{"id":19,"nodeType":"ParameterList","parameters":[],"src":"700:2:0"},"returnParameters":{"id":22,"nodeType":"ParameterList","parameters":[],"src":"729:0:0"},"scope":144,"src":"651:85:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"global":false,"id":28,"libraryName":{"id":25,"name":"EnumerableSetUpgradeable","nameLocations":["747:24:0"],"nodeType":"IdentifierPath","referencedDeclaration":4734,"src":"747:24:0"},"nodeType":"UsingForDirective","src":"741:71:0","typeName":{"id":27,"nodeType":"UserDefinedTypeName","pathNode":{"id":26,"name":"EnumerableSetUpgradeable.AddressSet","nameLocations":["776:24:0","801:10:0"],"nodeType":"IdentifierPath","referencedDeclaration":4447,"src":"776:35:0"},"referencedDeclaration":4447,"src":"776:35:0","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4447_storage_ptr","typeString":"struct EnumerableSetUpgradeable.AddressSet"}}},{"constant":false,"id":33,"mutability":"mutable","name":"_roleMembers","nameLocation":"882:12:0","nodeType":"VariableDeclaration","scope":144,"src":"818:76:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_AddressSet_$4447_storage_$","typeString":"mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"},"typeName":{"id":32,"keyType":{"id":29,"name":"bytes32","nodeType":"ElementaryTypeName","src":"826:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"818:55:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_AddressSet_$4447_storage_$","typeString":"mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"},"valueType":{"id":31,"nodeType":"UserDefinedTypeName","pathNode":{"id":30,"name":"EnumerableSetUpgradeable.AddressSet","nameLocations":["837:24:0","862:10:0"],"nodeType":"IdentifierPath","referencedDeclaration":4447,"src":"837:35:0"},"referencedDeclaration":4447,"src":"837:35:0","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4447_storage_ptr","typeString":"struct EnumerableSetUpgradeable.AddressSet"}}},"visibility":"private"},{"baseFunctions":[220],"body":{"id":54,"nodeType":"Block","src":"1053:132:0","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":52,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":47,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":42,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":36,"src":"1070:11:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":44,"name":"IAccessControlEnumerableUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":505,"src":"1090:35:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IAccessControlEnumerableUpgradeable_$505_$","typeString":"type(contract IAccessControlEnumerableUpgradeable)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IAccessControlEnumerableUpgradeable_$505_$","typeString":"type(contract IAccessControlEnumerableUpgradeable)"}],"id":43,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1085:4:0","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":45,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1085:41:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IAccessControlEnumerableUpgradeable_$505","typeString":"type(contract IAccessControlEnumerableUpgradeable)"}},"id":46,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1127:11:0","memberName":"interfaceId","nodeType":"MemberAccess","src":"1085:53:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1070:68:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":50,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":36,"src":"1166:11:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":48,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"1142:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_AccessControlEnumerableUpgradeable_$144_$","typeString":"type(contract super AccessControlEnumerableUpgradeable)"}},"id":49,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1148:17:0","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":220,"src":"1142:23:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":51,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1142:36:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1070:108:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":41,"id":53,"nodeType":"Return","src":"1063:115:0"}]},"documentation":{"id":34,"nodeType":"StructuredDocumentation","src":"901:56:0","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":55,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"971:17:0","nodeType":"FunctionDefinition","overrides":{"id":38,"nodeType":"OverrideSpecifier","overrides":[],"src":"1029:8:0"},"parameters":{"id":37,"nodeType":"ParameterList","parameters":[{"constant":false,"id":36,"mutability":"mutable","name":"interfaceId","nameLocation":"996:11:0","nodeType":"VariableDeclaration","scope":55,"src":"989:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":35,"name":"bytes4","nodeType":"ElementaryTypeName","src":"989:6:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"988:20:0"},"returnParameters":{"id":41,"nodeType":"ParameterList","parameters":[{"constant":false,"id":40,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":55,"src":"1047:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":39,"name":"bool","nodeType":"ElementaryTypeName","src":"1047:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1046:6:0"},"scope":144,"src":"962:223:0","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[496],"body":{"id":73,"nodeType":"Block","src":"1869:52:0","statements":[{"expression":{"arguments":[{"id":70,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":60,"src":"1908:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"baseExpression":{"id":66,"name":"_roleMembers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":33,"src":"1886:12:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_AddressSet_$4447_storage_$","typeString":"mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet storage ref)"}},"id":68,"indexExpression":{"id":67,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":58,"src":"1899:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1886:18:0","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4447_storage","typeString":"struct EnumerableSetUpgradeable.AddressSet storage ref"}},"id":69,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1905:2:0","memberName":"at","nodeType":"MemberAccess","referencedDeclaration":4570,"src":"1886:21:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_AddressSet_$4447_storage_ptr_$_t_uint256_$returns$_t_address_$bound_to$_t_struct$_AddressSet_$4447_storage_ptr_$","typeString":"function (struct EnumerableSetUpgradeable.AddressSet storage pointer,uint256) view returns (address)"}},"id":71,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1886:28:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":65,"id":72,"nodeType":"Return","src":"1879:35:0"}]},"documentation":{"id":56,"nodeType":"StructuredDocumentation","src":"1191:574:0","text":" @dev Returns one of the accounts that have `role`. `index` must be a\n value between 0 and {getRoleMemberCount}, non-inclusive.\n Role bearers are not sorted in any particular way, and their ordering may\n change at any point.\n WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n you perform all queries on the same block. See the following\n https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n for more information."},"functionSelector":"9010d07c","id":74,"implemented":true,"kind":"function","modifiers":[],"name":"getRoleMember","nameLocation":"1779:13:0","nodeType":"FunctionDefinition","overrides":{"id":62,"nodeType":"OverrideSpecifier","overrides":[],"src":"1842:8:0"},"parameters":{"id":61,"nodeType":"ParameterList","parameters":[{"constant":false,"id":58,"mutability":"mutable","name":"role","nameLocation":"1801:4:0","nodeType":"VariableDeclaration","scope":74,"src":"1793:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":57,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1793:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":60,"mutability":"mutable","name":"index","nameLocation":"1815:5:0","nodeType":"VariableDeclaration","scope":74,"src":"1807:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":59,"name":"uint256","nodeType":"ElementaryTypeName","src":"1807:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1792:29:0"},"returnParameters":{"id":65,"nodeType":"ParameterList","parameters":[{"constant":false,"id":64,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":74,"src":"1860:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":63,"name":"address","nodeType":"ElementaryTypeName","src":"1860:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1859:9:0"},"scope":144,"src":"1770:151:0","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[504],"body":{"id":89,"nodeType":"Block","src":"2178:51:0","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"baseExpression":{"id":83,"name":"_roleMembers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":33,"src":"2195:12:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_AddressSet_$4447_storage_$","typeString":"mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet storage ref)"}},"id":85,"indexExpression":{"id":84,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":77,"src":"2208:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2195:18:0","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4447_storage","typeString":"struct EnumerableSetUpgradeable.AddressSet storage ref"}},"id":86,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2214:6:0","memberName":"length","nodeType":"MemberAccess","referencedDeclaration":4543,"src":"2195:25:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_AddressSet_$4447_storage_ptr_$returns$_t_uint256_$bound_to$_t_struct$_AddressSet_$4447_storage_ptr_$","typeString":"function (struct EnumerableSetUpgradeable.AddressSet storage pointer) view returns (uint256)"}},"id":87,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2195:27:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":82,"id":88,"nodeType":"Return","src":"2188:34:0"}]},"documentation":{"id":75,"nodeType":"StructuredDocumentation","src":"1927:157:0","text":" @dev Returns the number of accounts that have `role`. Can be used\n together with {getRoleMember} to enumerate all bearers of a role."},"functionSelector":"ca15c873","id":90,"implemented":true,"kind":"function","modifiers":[],"name":"getRoleMemberCount","nameLocation":"2098:18:0","nodeType":"FunctionDefinition","overrides":{"id":79,"nodeType":"OverrideSpecifier","overrides":[],"src":"2151:8:0"},"parameters":{"id":78,"nodeType":"ParameterList","parameters":[{"constant":false,"id":77,"mutability":"mutable","name":"role","nameLocation":"2125:4:0","nodeType":"VariableDeclaration","scope":90,"src":"2117:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":76,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2117:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2116:14:0"},"returnParameters":{"id":82,"nodeType":"ParameterList","parameters":[{"constant":false,"id":81,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":90,"src":"2169:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":80,"name":"uint256","nodeType":"ElementaryTypeName","src":"2169:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2168:9:0"},"scope":144,"src":"2089:140:0","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[443],"body":{"id":113,"nodeType":"Block","src":"2394:89:0","statements":[{"expression":{"arguments":[{"id":102,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":93,"src":"2421:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":103,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":95,"src":"2427:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":99,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"2404:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_AccessControlEnumerableUpgradeable_$144_$","typeString":"type(contract super AccessControlEnumerableUpgradeable)"}},"id":101,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2410:10:0","memberName":"_grantRole","nodeType":"MemberAccess","referencedDeclaration":443,"src":"2404:16:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":104,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2404:31:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":105,"nodeType":"ExpressionStatement","src":"2404:31:0"},{"expression":{"arguments":[{"id":110,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":95,"src":"2468:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"baseExpression":{"id":106,"name":"_roleMembers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":33,"src":"2445:12:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_AddressSet_$4447_storage_$","typeString":"mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet storage ref)"}},"id":108,"indexExpression":{"id":107,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":93,"src":"2458:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2445:18:0","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4447_storage","typeString":"struct EnumerableSetUpgradeable.AddressSet storage ref"}},"id":109,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2464:3:0","memberName":"add","nodeType":"MemberAccess","referencedDeclaration":4474,"src":"2445:22:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_AddressSet_$4447_storage_ptr_$_t_address_$returns$_t_bool_$bound_to$_t_struct$_AddressSet_$4447_storage_ptr_$","typeString":"function (struct EnumerableSetUpgradeable.AddressSet storage pointer,address) returns (bool)"}},"id":111,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2445:31:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":112,"nodeType":"ExpressionStatement","src":"2445:31:0"}]},"documentation":{"id":91,"nodeType":"StructuredDocumentation","src":"2235:77:0","text":" @dev Overload {_grantRole} to track enumerable memberships"},"id":114,"implemented":true,"kind":"function","modifiers":[],"name":"_grantRole","nameLocation":"2326:10:0","nodeType":"FunctionDefinition","overrides":{"id":97,"nodeType":"OverrideSpecifier","overrides":[],"src":"2385:8:0"},"parameters":{"id":96,"nodeType":"ParameterList","parameters":[{"constant":false,"id":93,"mutability":"mutable","name":"role","nameLocation":"2345:4:0","nodeType":"VariableDeclaration","scope":114,"src":"2337:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":92,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2337:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":95,"mutability":"mutable","name":"account","nameLocation":"2359:7:0","nodeType":"VariableDeclaration","scope":114,"src":"2351:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":94,"name":"address","nodeType":"ElementaryTypeName","src":"2351:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2336:31:0"},"returnParameters":{"id":98,"nodeType":"ParameterList","parameters":[],"src":"2394:0:0"},"scope":144,"src":"2317:166:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"baseFunctions":[474],"body":{"id":137,"nodeType":"Block","src":"2650:93:0","statements":[{"expression":{"arguments":[{"id":126,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":117,"src":"2678:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":127,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":119,"src":"2684:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":123,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"2660:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_AccessControlEnumerableUpgradeable_$144_$","typeString":"type(contract super AccessControlEnumerableUpgradeable)"}},"id":125,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2666:11:0","memberName":"_revokeRole","nodeType":"MemberAccess","referencedDeclaration":474,"src":"2660:17:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":128,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2660:32:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":129,"nodeType":"ExpressionStatement","src":"2660:32:0"},{"expression":{"arguments":[{"id":134,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":119,"src":"2728:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"baseExpression":{"id":130,"name":"_roleMembers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":33,"src":"2702:12:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_AddressSet_$4447_storage_$","typeString":"mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet storage ref)"}},"id":132,"indexExpression":{"id":131,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":117,"src":"2715:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2702:18:0","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4447_storage","typeString":"struct EnumerableSetUpgradeable.AddressSet storage ref"}},"id":133,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2721:6:0","memberName":"remove","nodeType":"MemberAccess","referencedDeclaration":4501,"src":"2702:25:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_AddressSet_$4447_storage_ptr_$_t_address_$returns$_t_bool_$bound_to$_t_struct$_AddressSet_$4447_storage_ptr_$","typeString":"function (struct EnumerableSetUpgradeable.AddressSet storage pointer,address) returns (bool)"}},"id":135,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2702:34:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":136,"nodeType":"ExpressionStatement","src":"2702:34:0"}]},"documentation":{"id":115,"nodeType":"StructuredDocumentation","src":"2489:78:0","text":" @dev Overload {_revokeRole} to track enumerable memberships"},"id":138,"implemented":true,"kind":"function","modifiers":[],"name":"_revokeRole","nameLocation":"2581:11:0","nodeType":"FunctionDefinition","overrides":{"id":121,"nodeType":"OverrideSpecifier","overrides":[],"src":"2641:8:0"},"parameters":{"id":120,"nodeType":"ParameterList","parameters":[{"constant":false,"id":117,"mutability":"mutable","name":"role","nameLocation":"2601:4:0","nodeType":"VariableDeclaration","scope":138,"src":"2593:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":116,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2593:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":119,"mutability":"mutable","name":"account","nameLocation":"2615:7:0","nodeType":"VariableDeclaration","scope":138,"src":"2607:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":118,"name":"address","nodeType":"ElementaryTypeName","src":"2607:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2592:31:0"},"returnParameters":{"id":122,"nodeType":"ParameterList","parameters":[],"src":"2650:0:0"},"scope":144,"src":"2572:171:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":139,"nodeType":"StructuredDocumentation","src":"2749:254:0","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":143,"mutability":"mutable","name":"__gap","nameLocation":"3028:5:0","nodeType":"VariableDeclaration","scope":144,"src":"3008:25:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage","typeString":"uint256[49]"},"typeName":{"baseType":{"id":140,"name":"uint256","nodeType":"ElementaryTypeName","src":"3008:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":142,"length":{"hexValue":"3439","id":141,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3016:2:0","typeDescriptions":{"typeIdentifier":"t_rational_49_by_1","typeString":"int_const 49"},"value":"49"},"nodeType":"ArrayTypeName","src":"3008:11:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage_ptr","typeString":"uint256[49]"}},"visibility":"private"}],"scope":145,"src":"431:2605:0","usedErrors":[]}],"src":"118:2919:0"},"id":0},"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol","exportedSymbols":{"AccessControlUpgradeable":[480],"AddressUpgradeable":[2063],"ContextUpgradeable":[2105],"ERC165Upgradeable":[3138],"IAccessControlUpgradeable":[578],"IERC165Upgradeable":[3150],"Initializable":[1269],"MathUpgradeable":[4016],"SignedMathUpgradeable":[4121],"StringsUpgradeable":[2444]},"id":481,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":146,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"108:23:1"},{"absolutePath":"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol","file":"./IAccessControlUpgradeable.sol","id":147,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":481,"sourceUnit":579,"src":"133:41:1","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","file":"../utils/ContextUpgradeable.sol","id":148,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":481,"sourceUnit":2106,"src":"175:41:1","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol","file":"../utils/StringsUpgradeable.sol","id":149,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":481,"sourceUnit":2445,"src":"217:41:1","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol","file":"../utils/introspection/ERC165Upgradeable.sol","id":150,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":481,"sourceUnit":3139,"src":"259:54:1","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":151,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":481,"sourceUnit":1270,"src":"314:42:1","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":153,"name":"Initializable","nameLocations":["2065:13:1"],"nodeType":"IdentifierPath","referencedDeclaration":1269,"src":"2065:13:1"},"id":154,"nodeType":"InheritanceSpecifier","src":"2065:13:1"},{"baseName":{"id":155,"name":"ContextUpgradeable","nameLocations":["2080:18:1"],"nodeType":"IdentifierPath","referencedDeclaration":2105,"src":"2080:18:1"},"id":156,"nodeType":"InheritanceSpecifier","src":"2080:18:1"},{"baseName":{"id":157,"name":"IAccessControlUpgradeable","nameLocations":["2100:25:1"],"nodeType":"IdentifierPath","referencedDeclaration":578,"src":"2100:25:1"},"id":158,"nodeType":"InheritanceSpecifier","src":"2100:25:1"},{"baseName":{"id":159,"name":"ERC165Upgradeable","nameLocations":["2127:17:1"],"nodeType":"IdentifierPath","referencedDeclaration":3138,"src":"2127:17:1"},"id":160,"nodeType":"InheritanceSpecifier","src":"2127:17:1"}],"canonicalName":"AccessControlUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":152,"nodeType":"StructuredDocumentation","src":"358:1660:1","text":" @dev Contract module that allows children to implement role-based access\n control mechanisms. This is a lightweight version that doesn't allow enumerating role\n members except through off-chain means by accessing the contract event logs. Some\n applications may benefit from on-chain enumerability, for those cases see\n {AccessControlEnumerable}.\n Roles are referred to by their `bytes32` identifier. These should be exposed\n in the external API and be unique. The best way to achieve this is by\n using `public constant` hash digests:\n ```solidity\n bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n ```\n Roles can be used to represent a set of permissions. To restrict access to a\n function call, use {hasRole}:\n ```solidity\n function foo() public {\n     require(hasRole(MY_ROLE, msg.sender));\n     ...\n }\n ```\n Roles can be granted and revoked dynamically via the {grantRole} and\n {revokeRole} functions. Each role has an associated admin role, and only\n accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n that only accounts with this role will be able to grant or revoke other\n roles. More complex role relationships can be created by using\n {_setRoleAdmin}.\n WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n grant and revoke this role. Extra precautions should be taken to secure\n accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n to enforce additional security measures for this role."},"fullyImplemented":true,"id":480,"linearizedBaseContracts":[480,3138,3150,578,2105,1269],"name":"AccessControlUpgradeable","nameLocation":"2037:24:1","nodeType":"ContractDefinition","nodes":[{"body":{"id":165,"nodeType":"Block","src":"2209:7:1","statements":[]},"id":166,"implemented":true,"kind":"function","modifiers":[{"id":163,"kind":"modifierInvocation","modifierName":{"id":162,"name":"onlyInitializing","nameLocations":["2192:16:1"],"nodeType":"IdentifierPath","referencedDeclaration":1214,"src":"2192:16:1"},"nodeType":"ModifierInvocation","src":"2192:16:1"}],"name":"__AccessControl_init","nameLocation":"2160:20:1","nodeType":"FunctionDefinition","parameters":{"id":161,"nodeType":"ParameterList","parameters":[],"src":"2180:2:1"},"returnParameters":{"id":164,"nodeType":"ParameterList","parameters":[],"src":"2209:0:1"},"scope":480,"src":"2151:65:1","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":171,"nodeType":"Block","src":"2290:7:1","statements":[]},"id":172,"implemented":true,"kind":"function","modifiers":[{"id":169,"kind":"modifierInvocation","modifierName":{"id":168,"name":"onlyInitializing","nameLocations":["2273:16:1"],"nodeType":"IdentifierPath","referencedDeclaration":1214,"src":"2273:16:1"},"nodeType":"ModifierInvocation","src":"2273:16:1"}],"name":"__AccessControl_init_unchained","nameLocation":"2231:30:1","nodeType":"FunctionDefinition","parameters":{"id":167,"nodeType":"ParameterList","parameters":[],"src":"2261:2:1"},"returnParameters":{"id":170,"nodeType":"ParameterList","parameters":[],"src":"2290:0:1"},"scope":480,"src":"2222:75:1","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"canonicalName":"AccessControlUpgradeable.RoleData","id":179,"members":[{"constant":false,"id":176,"mutability":"mutable","name":"members","nameLocation":"2353:7:1","nodeType":"VariableDeclaration","scope":179,"src":"2328:32:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"typeName":{"id":175,"keyType":{"id":173,"name":"address","nodeType":"ElementaryTypeName","src":"2336:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"2328:24:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueType":{"id":174,"name":"bool","nodeType":"ElementaryTypeName","src":"2347:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"internal"},{"constant":false,"id":178,"mutability":"mutable","name":"adminRole","nameLocation":"2378:9:1","nodeType":"VariableDeclaration","scope":179,"src":"2370:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":177,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2370:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"RoleData","nameLocation":"2309:8:1","nodeType":"StructDefinition","scope":480,"src":"2302:92:1","visibility":"public"},{"constant":false,"id":184,"mutability":"mutable","name":"_roles","nameLocation":"2437:6:1","nodeType":"VariableDeclaration","scope":480,"src":"2400:43:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$179_storage_$","typeString":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"},"typeName":{"id":183,"keyType":{"id":180,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2408:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"2400:28:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$179_storage_$","typeString":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"},"valueType":{"id":182,"nodeType":"UserDefinedTypeName","pathNode":{"id":181,"name":"RoleData","nameLocations":["2419:8:1"],"nodeType":"IdentifierPath","referencedDeclaration":179,"src":"2419:8:1"},"referencedDeclaration":179,"src":"2419:8:1","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$179_storage_ptr","typeString":"struct AccessControlUpgradeable.RoleData"}}},"visibility":"private"},{"constant":true,"functionSelector":"a217fddf","id":187,"mutability":"constant","name":"DEFAULT_ADMIN_ROLE","nameLocation":"2474:18:1","nodeType":"VariableDeclaration","scope":480,"src":"2450:49:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":185,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2450:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"30783030","id":186,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2495:4:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0x00"},"visibility":"public"},{"body":{"id":197,"nodeType":"Block","src":"2918:44:1","statements":[{"expression":{"arguments":[{"id":193,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":190,"src":"2939:4:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":192,"name":"_checkRole","nodeType":"Identifier","overloadedDeclarations":[252,291],"referencedDeclaration":252,"src":"2928:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$__$","typeString":"function (bytes32) view"}},"id":194,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2928:16:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":195,"nodeType":"ExpressionStatement","src":"2928:16:1"},{"id":196,"nodeType":"PlaceholderStatement","src":"2954:1:1"}]},"documentation":{"id":188,"nodeType":"StructuredDocumentation","src":"2506:375:1","text":" @dev Modifier that checks that an account has a specific role. Reverts\n with a standardized message including the required role.\n The format of the revert reason is given by the following regular expression:\n  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n _Available since v4.1._"},"id":198,"name":"onlyRole","nameLocation":"2895:8:1","nodeType":"ModifierDefinition","parameters":{"id":191,"nodeType":"ParameterList","parameters":[{"constant":false,"id":190,"mutability":"mutable","name":"role","nameLocation":"2912:4:1","nodeType":"VariableDeclaration","scope":198,"src":"2904:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":189,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2904:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2903:14:1"},"src":"2886:76:1","virtual":false,"visibility":"internal"},{"baseFunctions":[3132],"body":{"id":219,"nodeType":"Block","src":"3120:122:1","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":217,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":212,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":207,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":201,"src":"3137:11:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":209,"name":"IAccessControlUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":578,"src":"3157:25:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IAccessControlUpgradeable_$578_$","typeString":"type(contract IAccessControlUpgradeable)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IAccessControlUpgradeable_$578_$","typeString":"type(contract IAccessControlUpgradeable)"}],"id":208,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"3152:4:1","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":210,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3152:31:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IAccessControlUpgradeable_$578","typeString":"type(contract IAccessControlUpgradeable)"}},"id":211,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3184:11:1","memberName":"interfaceId","nodeType":"MemberAccess","src":"3152:43:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"3137:58:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":215,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":201,"src":"3223:11:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":213,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"3199:5:1","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_AccessControlUpgradeable_$480_$","typeString":"type(contract super AccessControlUpgradeable)"}},"id":214,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3205:17:1","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":3132,"src":"3199:23:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":216,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3199:36:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3137:98:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":206,"id":218,"nodeType":"Return","src":"3130:105:1"}]},"documentation":{"id":199,"nodeType":"StructuredDocumentation","src":"2968:56:1","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":220,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"3038:17:1","nodeType":"FunctionDefinition","overrides":{"id":203,"nodeType":"OverrideSpecifier","overrides":[],"src":"3096:8:1"},"parameters":{"id":202,"nodeType":"ParameterList","parameters":[{"constant":false,"id":201,"mutability":"mutable","name":"interfaceId","nameLocation":"3063:11:1","nodeType":"VariableDeclaration","scope":220,"src":"3056:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":200,"name":"bytes4","nodeType":"ElementaryTypeName","src":"3056:6:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"3055:20:1"},"returnParameters":{"id":206,"nodeType":"ParameterList","parameters":[{"constant":false,"id":205,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":220,"src":"3114:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":204,"name":"bool","nodeType":"ElementaryTypeName","src":"3114:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3113:6:1"},"scope":480,"src":"3029:213:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[545],"body":{"id":238,"nodeType":"Block","src":"3421:53:1","statements":[{"expression":{"baseExpression":{"expression":{"baseExpression":{"id":231,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":184,"src":"3438:6:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$179_storage_$","typeString":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData storage ref)"}},"id":233,"indexExpression":{"id":232,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":223,"src":"3445:4:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3438:12:1","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$179_storage","typeString":"struct AccessControlUpgradeable.RoleData storage ref"}},"id":234,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3451:7:1","memberName":"members","nodeType":"MemberAccess","referencedDeclaration":176,"src":"3438:20:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":236,"indexExpression":{"id":235,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":225,"src":"3459:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3438:29:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":230,"id":237,"nodeType":"Return","src":"3431:36:1"}]},"documentation":{"id":221,"nodeType":"StructuredDocumentation","src":"3248:76:1","text":" @dev Returns `true` if `account` has been granted `role`."},"functionSelector":"91d14854","id":239,"implemented":true,"kind":"function","modifiers":[],"name":"hasRole","nameLocation":"3338:7:1","nodeType":"FunctionDefinition","overrides":{"id":227,"nodeType":"OverrideSpecifier","overrides":[],"src":"3397:8:1"},"parameters":{"id":226,"nodeType":"ParameterList","parameters":[{"constant":false,"id":223,"mutability":"mutable","name":"role","nameLocation":"3354:4:1","nodeType":"VariableDeclaration","scope":239,"src":"3346:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":222,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3346:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":225,"mutability":"mutable","name":"account","nameLocation":"3368:7:1","nodeType":"VariableDeclaration","scope":239,"src":"3360:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":224,"name":"address","nodeType":"ElementaryTypeName","src":"3360:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3345:31:1"},"returnParameters":{"id":230,"nodeType":"ParameterList","parameters":[{"constant":false,"id":229,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":239,"src":"3415:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":228,"name":"bool","nodeType":"ElementaryTypeName","src":"3415:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3414:6:1"},"scope":480,"src":"3329:145:1","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":251,"nodeType":"Block","src":"3824:47:1","statements":[{"expression":{"arguments":[{"id":246,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":242,"src":"3845:4:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"id":247,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2090,"src":"3851:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":248,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3851:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":245,"name":"_checkRole","nodeType":"Identifier","overloadedDeclarations":[252,291],"referencedDeclaration":291,"src":"3834:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address) view"}},"id":249,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3834:30:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":250,"nodeType":"ExpressionStatement","src":"3834:30:1"}]},"documentation":{"id":240,"nodeType":"StructuredDocumentation","src":"3480:283:1","text":" @dev Revert with a standard message if `_msgSender()` is missing `role`.\n Overriding this function changes the behavior of the {onlyRole} modifier.\n Format of the revert message is described in {_checkRole}.\n _Available since v4.6._"},"id":252,"implemented":true,"kind":"function","modifiers":[],"name":"_checkRole","nameLocation":"3777:10:1","nodeType":"FunctionDefinition","parameters":{"id":243,"nodeType":"ParameterList","parameters":[{"constant":false,"id":242,"mutability":"mutable","name":"role","nameLocation":"3796:4:1","nodeType":"VariableDeclaration","scope":252,"src":"3788:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":241,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3788:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3787:14:1"},"returnParameters":{"id":244,"nodeType":"ParameterList","parameters":[],"src":"3824:0:1"},"scope":480,"src":"3768:103:1","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":290,"nodeType":"Block","src":"4225:428:1","statements":[{"condition":{"id":264,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4239:23:1","subExpression":{"arguments":[{"id":261,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":255,"src":"4248:4:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":262,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":257,"src":"4254:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":260,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":239,"src":"4240:7:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":263,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4240:22:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":289,"nodeType":"IfStatement","src":"4235:412:1","trueBody":{"id":288,"nodeType":"Block","src":"4264:383:1","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"hexValue":"416363657373436f6e74726f6c3a206163636f756e7420","id":270,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4372:25:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874","typeString":"literal_string \"AccessControl: account \""},"value":"AccessControl: account "},{"arguments":[{"id":273,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":257,"src":"4454:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":271,"name":"StringsUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2444,"src":"4423:18:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StringsUpgradeable_$2444_$","typeString":"type(library StringsUpgradeable)"}},"id":272,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4442:11:1","memberName":"toHexString","nodeType":"MemberAccess","referencedDeclaration":2418,"src":"4423:30:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_address_$returns$_t_string_memory_ptr_$","typeString":"function (address) pure returns (string memory)"}},"id":274,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4423:39:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"206973206d697373696e6720726f6c6520","id":275,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4488:19:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69","typeString":"literal_string \" is missing role \""},"value":" is missing role "},{"arguments":[{"arguments":[{"id":280,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":255,"src":"4572:4:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":279,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4564:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":278,"name":"uint256","nodeType":"ElementaryTypeName","src":"4564:7:1","typeDescriptions":{}}},"id":281,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4564:13:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"3332","id":282,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4579:2:1","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"}],"expression":{"id":276,"name":"StringsUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2444,"src":"4533:18:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StringsUpgradeable_$2444_$","typeString":"type(library StringsUpgradeable)"}},"id":277,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4552:11:1","memberName":"toHexString","nodeType":"MemberAccess","referencedDeclaration":2398,"src":"4533:30:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":283,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4533:49:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874","typeString":"literal_string \"AccessControl: account \""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69","typeString":"literal_string \" is missing role \""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":268,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4330:3:1","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":269,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4334:12:1","memberName":"encodePacked","nodeType":"MemberAccess","src":"4330:16:1","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":284,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4330:274:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":267,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4302:6:1","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":266,"name":"string","nodeType":"ElementaryTypeName","src":"4302:6:1","typeDescriptions":{}}},"id":285,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4302:320:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":265,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"4278:6:1","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":286,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4278:358:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":287,"nodeType":"ExpressionStatement","src":"4278:358:1"}]}}]},"documentation":{"id":253,"nodeType":"StructuredDocumentation","src":"3877:270:1","text":" @dev Revert with a standard message if `account` is missing `role`.\n The format of the revert reason is given by the following regular expression:\n  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/"},"id":291,"implemented":true,"kind":"function","modifiers":[],"name":"_checkRole","nameLocation":"4161:10:1","nodeType":"FunctionDefinition","parameters":{"id":258,"nodeType":"ParameterList","parameters":[{"constant":false,"id":255,"mutability":"mutable","name":"role","nameLocation":"4180:4:1","nodeType":"VariableDeclaration","scope":291,"src":"4172:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":254,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4172:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":257,"mutability":"mutable","name":"account","nameLocation":"4194:7:1","nodeType":"VariableDeclaration","scope":291,"src":"4186:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":256,"name":"address","nodeType":"ElementaryTypeName","src":"4186:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4171:31:1"},"returnParameters":{"id":259,"nodeType":"ParameterList","parameters":[],"src":"4225:0:1"},"scope":480,"src":"4152:501:1","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[553],"body":{"id":305,"nodeType":"Block","src":"4917:46:1","statements":[{"expression":{"expression":{"baseExpression":{"id":300,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":184,"src":"4934:6:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$179_storage_$","typeString":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData storage ref)"}},"id":302,"indexExpression":{"id":301,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":294,"src":"4941:4:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4934:12:1","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$179_storage","typeString":"struct AccessControlUpgradeable.RoleData storage ref"}},"id":303,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4947:9:1","memberName":"adminRole","nodeType":"MemberAccess","referencedDeclaration":178,"src":"4934:22:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":299,"id":304,"nodeType":"Return","src":"4927:29:1"}]},"documentation":{"id":292,"nodeType":"StructuredDocumentation","src":"4659:170:1","text":" @dev Returns the admin role that controls `role`. See {grantRole} and\n {revokeRole}.\n To change a role's admin, use {_setRoleAdmin}."},"functionSelector":"248a9ca3","id":306,"implemented":true,"kind":"function","modifiers":[],"name":"getRoleAdmin","nameLocation":"4843:12:1","nodeType":"FunctionDefinition","overrides":{"id":296,"nodeType":"OverrideSpecifier","overrides":[],"src":"4890:8:1"},"parameters":{"id":295,"nodeType":"ParameterList","parameters":[{"constant":false,"id":294,"mutability":"mutable","name":"role","nameLocation":"4864:4:1","nodeType":"VariableDeclaration","scope":306,"src":"4856:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":293,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4856:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4855:14:1"},"returnParameters":{"id":299,"nodeType":"ParameterList","parameters":[{"constant":false,"id":298,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":306,"src":"4908:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":297,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4908:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4907:9:1"},"scope":480,"src":"4834:129:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[561],"body":{"id":325,"nodeType":"Block","src":"5362:42:1","statements":[{"expression":{"arguments":[{"id":321,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":309,"src":"5383:4:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":322,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":311,"src":"5389:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":320,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":443,"src":"5372:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":323,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5372:25:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":324,"nodeType":"ExpressionStatement","src":"5372:25:1"}]},"documentation":{"id":307,"nodeType":"StructuredDocumentation","src":"4969:285:1","text":" @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event.\n Requirements:\n - the caller must have ``role``'s admin role.\n May emit a {RoleGranted} event."},"functionSelector":"2f2ff15d","id":326,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"arguments":[{"id":316,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":309,"src":"5355:4:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":315,"name":"getRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":306,"src":"5342:12:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":317,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5342:18:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":318,"kind":"modifierInvocation","modifierName":{"id":314,"name":"onlyRole","nameLocations":["5333:8:1"],"nodeType":"IdentifierPath","referencedDeclaration":198,"src":"5333:8:1"},"nodeType":"ModifierInvocation","src":"5333:28:1"}],"name":"grantRole","nameLocation":"5268:9:1","nodeType":"FunctionDefinition","overrides":{"id":313,"nodeType":"OverrideSpecifier","overrides":[],"src":"5324:8:1"},"parameters":{"id":312,"nodeType":"ParameterList","parameters":[{"constant":false,"id":309,"mutability":"mutable","name":"role","nameLocation":"5286:4:1","nodeType":"VariableDeclaration","scope":326,"src":"5278:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":308,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5278:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":311,"mutability":"mutable","name":"account","nameLocation":"5300:7:1","nodeType":"VariableDeclaration","scope":326,"src":"5292:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":310,"name":"address","nodeType":"ElementaryTypeName","src":"5292:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5277:31:1"},"returnParameters":{"id":319,"nodeType":"ParameterList","parameters":[],"src":"5362:0:1"},"scope":480,"src":"5259:145:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[569],"body":{"id":345,"nodeType":"Block","src":"5788:43:1","statements":[{"expression":{"arguments":[{"id":341,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":329,"src":"5810:4:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":342,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":331,"src":"5816:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":340,"name":"_revokeRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":474,"src":"5798:11:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":343,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5798:26:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":344,"nodeType":"ExpressionStatement","src":"5798:26:1"}]},"documentation":{"id":327,"nodeType":"StructuredDocumentation","src":"5410:269:1","text":" @dev Revokes `role` from `account`.\n If `account` had been granted `role`, emits a {RoleRevoked} event.\n Requirements:\n - the caller must have ``role``'s admin role.\n May emit a {RoleRevoked} event."},"functionSelector":"d547741f","id":346,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"arguments":[{"id":336,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":329,"src":"5781:4:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":335,"name":"getRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":306,"src":"5768:12:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":337,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5768:18:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":338,"kind":"modifierInvocation","modifierName":{"id":334,"name":"onlyRole","nameLocations":["5759:8:1"],"nodeType":"IdentifierPath","referencedDeclaration":198,"src":"5759:8:1"},"nodeType":"ModifierInvocation","src":"5759:28:1"}],"name":"revokeRole","nameLocation":"5693:10:1","nodeType":"FunctionDefinition","overrides":{"id":333,"nodeType":"OverrideSpecifier","overrides":[],"src":"5750:8:1"},"parameters":{"id":332,"nodeType":"ParameterList","parameters":[{"constant":false,"id":329,"mutability":"mutable","name":"role","nameLocation":"5712:4:1","nodeType":"VariableDeclaration","scope":346,"src":"5704:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":328,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5704:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":331,"mutability":"mutable","name":"account","nameLocation":"5726:7:1","nodeType":"VariableDeclaration","scope":346,"src":"5718:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":330,"name":"address","nodeType":"ElementaryTypeName","src":"5718:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5703:31:1"},"returnParameters":{"id":339,"nodeType":"ParameterList","parameters":[],"src":"5788:0:1"},"scope":480,"src":"5684:147:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[577],"body":{"id":368,"nodeType":"Block","src":"6445:137:1","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":359,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":356,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":351,"src":"6463:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":357,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2090,"src":"6474:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":358,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6474:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6463:23:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636520726f6c657320666f722073656c66","id":360,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6488:49:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b","typeString":"literal_string \"AccessControl: can only renounce roles for self\""},"value":"AccessControl: can only renounce roles for self"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b","typeString":"literal_string \"AccessControl: can only renounce roles for self\""}],"id":355,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6455:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":361,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6455:83:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":362,"nodeType":"ExpressionStatement","src":"6455:83:1"},{"expression":{"arguments":[{"id":364,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":349,"src":"6561:4:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":365,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":351,"src":"6567:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":363,"name":"_revokeRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":474,"src":"6549:11:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":366,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6549:26:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":367,"nodeType":"ExpressionStatement","src":"6549:26:1"}]},"documentation":{"id":347,"nodeType":"StructuredDocumentation","src":"5837:526:1","text":" @dev Revokes `role` from the calling account.\n Roles are often managed via {grantRole} and {revokeRole}: this function's\n purpose is to provide a mechanism for accounts to lose their privileges\n if they are compromised (such as when a trusted device is misplaced).\n If the calling account had been revoked `role`, emits a {RoleRevoked}\n event.\n Requirements:\n - the caller must be `account`.\n May emit a {RoleRevoked} event."},"functionSelector":"36568abe","id":369,"implemented":true,"kind":"function","modifiers":[],"name":"renounceRole","nameLocation":"6377:12:1","nodeType":"FunctionDefinition","overrides":{"id":353,"nodeType":"OverrideSpecifier","overrides":[],"src":"6436:8:1"},"parameters":{"id":352,"nodeType":"ParameterList","parameters":[{"constant":false,"id":349,"mutability":"mutable","name":"role","nameLocation":"6398:4:1","nodeType":"VariableDeclaration","scope":369,"src":"6390:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":348,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6390:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":351,"mutability":"mutable","name":"account","nameLocation":"6412:7:1","nodeType":"VariableDeclaration","scope":369,"src":"6404:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":350,"name":"address","nodeType":"ElementaryTypeName","src":"6404:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6389:31:1"},"returnParameters":{"id":354,"nodeType":"ParameterList","parameters":[],"src":"6445:0:1"},"scope":480,"src":"6368:214:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":382,"nodeType":"Block","src":"7335:42:1","statements":[{"expression":{"arguments":[{"id":378,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":372,"src":"7356:4:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":379,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":374,"src":"7362:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":377,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":443,"src":"7345:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":380,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7345:25:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":381,"nodeType":"ExpressionStatement","src":"7345:25:1"}]},"documentation":{"id":370,"nodeType":"StructuredDocumentation","src":"6588:674:1","text":" @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event. Note that unlike {grantRole}, this function doesn't perform any\n checks on the calling account.\n May emit a {RoleGranted} event.\n [WARNING]\n ====\n This function should only be called from the constructor when setting\n up the initial roles for the system.\n Using this function in any other way is effectively circumventing the admin\n system imposed by {AccessControl}.\n ====\n NOTE: This function is deprecated in favor of {_grantRole}."},"id":383,"implemented":true,"kind":"function","modifiers":[],"name":"_setupRole","nameLocation":"7276:10:1","nodeType":"FunctionDefinition","parameters":{"id":375,"nodeType":"ParameterList","parameters":[{"constant":false,"id":372,"mutability":"mutable","name":"role","nameLocation":"7295:4:1","nodeType":"VariableDeclaration","scope":383,"src":"7287:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":371,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7287:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":374,"mutability":"mutable","name":"account","nameLocation":"7309:7:1","nodeType":"VariableDeclaration","scope":383,"src":"7301:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":373,"name":"address","nodeType":"ElementaryTypeName","src":"7301:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7286:31:1"},"returnParameters":{"id":376,"nodeType":"ParameterList","parameters":[],"src":"7335:0:1"},"scope":480,"src":"7267:110:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":410,"nodeType":"Block","src":"7575:174:1","statements":[{"assignments":[392],"declarations":[{"constant":false,"id":392,"mutability":"mutable","name":"previousAdminRole","nameLocation":"7593:17:1","nodeType":"VariableDeclaration","scope":410,"src":"7585:25:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":391,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7585:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":396,"initialValue":{"arguments":[{"id":394,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":386,"src":"7626:4:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":393,"name":"getRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":306,"src":"7613:12:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":395,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7613:18:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"7585:46:1"},{"expression":{"id":402,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":397,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":184,"src":"7641:6:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$179_storage_$","typeString":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData storage ref)"}},"id":399,"indexExpression":{"id":398,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":386,"src":"7648:4:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7641:12:1","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$179_storage","typeString":"struct AccessControlUpgradeable.RoleData storage ref"}},"id":400,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"7654:9:1","memberName":"adminRole","nodeType":"MemberAccess","referencedDeclaration":178,"src":"7641:22:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":401,"name":"adminRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":388,"src":"7666:9:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"7641:34:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":403,"nodeType":"ExpressionStatement","src":"7641:34:1"},{"eventCall":{"arguments":[{"id":405,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":386,"src":"7707:4:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":406,"name":"previousAdminRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":392,"src":"7713:17:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":407,"name":"adminRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":388,"src":"7732:9:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":404,"name":"RoleAdminChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":517,"src":"7690:16:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$__$","typeString":"function (bytes32,bytes32,bytes32)"}},"id":408,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7690:52:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":409,"nodeType":"EmitStatement","src":"7685:57:1"}]},"documentation":{"id":384,"nodeType":"StructuredDocumentation","src":"7383:114:1","text":" @dev Sets `adminRole` as ``role``'s admin role.\n Emits a {RoleAdminChanged} event."},"id":411,"implemented":true,"kind":"function","modifiers":[],"name":"_setRoleAdmin","nameLocation":"7511:13:1","nodeType":"FunctionDefinition","parameters":{"id":389,"nodeType":"ParameterList","parameters":[{"constant":false,"id":386,"mutability":"mutable","name":"role","nameLocation":"7533:4:1","nodeType":"VariableDeclaration","scope":411,"src":"7525:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":385,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7525:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":388,"mutability":"mutable","name":"adminRole","nameLocation":"7547:9:1","nodeType":"VariableDeclaration","scope":411,"src":"7539:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":387,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7539:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7524:33:1"},"returnParameters":{"id":390,"nodeType":"ParameterList","parameters":[],"src":"7575:0:1"},"scope":480,"src":"7502:247:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":442,"nodeType":"Block","src":"7985:165:1","statements":[{"condition":{"id":423,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"7999:23:1","subExpression":{"arguments":[{"id":420,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":414,"src":"8008:4:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":421,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":416,"src":"8014:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":419,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":239,"src":"8000:7:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":422,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8000:22:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":441,"nodeType":"IfStatement","src":"7995:149:1","trueBody":{"id":440,"nodeType":"Block","src":"8024:120:1","statements":[{"expression":{"id":431,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"baseExpression":{"id":424,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":184,"src":"8038:6:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$179_storage_$","typeString":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData storage ref)"}},"id":426,"indexExpression":{"id":425,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":414,"src":"8045:4:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8038:12:1","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$179_storage","typeString":"struct AccessControlUpgradeable.RoleData storage ref"}},"id":427,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8051:7:1","memberName":"members","nodeType":"MemberAccess","referencedDeclaration":176,"src":"8038:20:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":429,"indexExpression":{"id":428,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":416,"src":"8059:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8038:29:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":430,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"8070:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"8038:36:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":432,"nodeType":"ExpressionStatement","src":"8038:36:1"},{"eventCall":{"arguments":[{"id":434,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":414,"src":"8105:4:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":435,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":416,"src":"8111:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":436,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2090,"src":"8120:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":437,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8120:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":433,"name":"RoleGranted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":526,"src":"8093:11:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$","typeString":"function (bytes32,address,address)"}},"id":438,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8093:40:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":439,"nodeType":"EmitStatement","src":"8088:45:1"}]}}]},"documentation":{"id":412,"nodeType":"StructuredDocumentation","src":"7755:157:1","text":" @dev Grants `role` to `account`.\n Internal function without access restriction.\n May emit a {RoleGranted} event."},"id":443,"implemented":true,"kind":"function","modifiers":[],"name":"_grantRole","nameLocation":"7926:10:1","nodeType":"FunctionDefinition","parameters":{"id":417,"nodeType":"ParameterList","parameters":[{"constant":false,"id":414,"mutability":"mutable","name":"role","nameLocation":"7945:4:1","nodeType":"VariableDeclaration","scope":443,"src":"7937:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":413,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7937:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":416,"mutability":"mutable","name":"account","nameLocation":"7959:7:1","nodeType":"VariableDeclaration","scope":443,"src":"7951:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":415,"name":"address","nodeType":"ElementaryTypeName","src":"7951:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7936:31:1"},"returnParameters":{"id":418,"nodeType":"ParameterList","parameters":[],"src":"7985:0:1"},"scope":480,"src":"7917:233:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":473,"nodeType":"Block","src":"8390:165:1","statements":[{"condition":{"arguments":[{"id":452,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":446,"src":"8412:4:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":453,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":448,"src":"8418:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":451,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":239,"src":"8404:7:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":454,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8404:22:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":472,"nodeType":"IfStatement","src":"8400:149:1","trueBody":{"id":471,"nodeType":"Block","src":"8428:121:1","statements":[{"expression":{"id":462,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"baseExpression":{"id":455,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":184,"src":"8442:6:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$179_storage_$","typeString":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData storage ref)"}},"id":457,"indexExpression":{"id":456,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":446,"src":"8449:4:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8442:12:1","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$179_storage","typeString":"struct AccessControlUpgradeable.RoleData storage ref"}},"id":458,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8455:7:1","memberName":"members","nodeType":"MemberAccess","referencedDeclaration":176,"src":"8442:20:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":460,"indexExpression":{"id":459,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":448,"src":"8463:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8442:29:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":461,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"8474:5:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"8442:37:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":463,"nodeType":"ExpressionStatement","src":"8442:37:1"},{"eventCall":{"arguments":[{"id":465,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":446,"src":"8510:4:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":466,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":448,"src":"8516:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":467,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2090,"src":"8525:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":468,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8525:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":464,"name":"RoleRevoked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":535,"src":"8498:11:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$","typeString":"function (bytes32,address,address)"}},"id":469,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8498:40:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":470,"nodeType":"EmitStatement","src":"8493:45:1"}]}}]},"documentation":{"id":444,"nodeType":"StructuredDocumentation","src":"8156:160:1","text":" @dev Revokes `role` from `account`.\n Internal function without access restriction.\n May emit a {RoleRevoked} event."},"id":474,"implemented":true,"kind":"function","modifiers":[],"name":"_revokeRole","nameLocation":"8330:11:1","nodeType":"FunctionDefinition","parameters":{"id":449,"nodeType":"ParameterList","parameters":[{"constant":false,"id":446,"mutability":"mutable","name":"role","nameLocation":"8350:4:1","nodeType":"VariableDeclaration","scope":474,"src":"8342:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":445,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8342:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":448,"mutability":"mutable","name":"account","nameLocation":"8364:7:1","nodeType":"VariableDeclaration","scope":474,"src":"8356:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":447,"name":"address","nodeType":"ElementaryTypeName","src":"8356:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8341:31:1"},"returnParameters":{"id":450,"nodeType":"ParameterList","parameters":[],"src":"8390:0:1"},"scope":480,"src":"8321:234:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":475,"nodeType":"StructuredDocumentation","src":"8561:254:1","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":479,"mutability":"mutable","name":"__gap","nameLocation":"8840:5:1","nodeType":"VariableDeclaration","scope":480,"src":"8820:25:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage","typeString":"uint256[49]"},"typeName":{"baseType":{"id":476,"name":"uint256","nodeType":"ElementaryTypeName","src":"8820:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":478,"length":{"hexValue":"3439","id":477,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8828:2:1","typeDescriptions":{"typeIdentifier":"t_rational_49_by_1","typeString":"int_const 49"},"value":"49"},"nodeType":"ArrayTypeName","src":"8820:11:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage_ptr","typeString":"uint256[49]"}},"visibility":"private"}],"scope":481,"src":"2019:6829:1","usedErrors":[]}],"src":"108:8741:1"},"id":1},"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol","exportedSymbols":{"IAccessControlEnumerableUpgradeable":[505],"IAccessControlUpgradeable":[578]},"id":506,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":482,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"104:23:2"},{"absolutePath":"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol","file":"./IAccessControlUpgradeable.sol","id":483,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":506,"sourceUnit":579,"src":"129:41:2","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":485,"name":"IAccessControlUpgradeable","nameLocations":["321:25:2"],"nodeType":"IdentifierPath","referencedDeclaration":578,"src":"321:25:2"},"id":486,"nodeType":"InheritanceSpecifier","src":"321:25:2"}],"canonicalName":"IAccessControlEnumerableUpgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":484,"nodeType":"StructuredDocumentation","src":"172:99:2","text":" @dev External interface of AccessControlEnumerable declared to support ERC165 detection."},"fullyImplemented":false,"id":505,"linearizedBaseContracts":[505,578],"name":"IAccessControlEnumerableUpgradeable","nameLocation":"282:35:2","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":487,"nodeType":"StructuredDocumentation","src":"353:574:2","text":" @dev Returns one of the accounts that have `role`. `index` must be a\n value between 0 and {getRoleMemberCount}, non-inclusive.\n Role bearers are not sorted in any particular way, and their ordering may\n change at any point.\n WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n you perform all queries on the same block. See the following\n https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n for more information."},"functionSelector":"9010d07c","id":496,"implemented":false,"kind":"function","modifiers":[],"name":"getRoleMember","nameLocation":"941:13:2","nodeType":"FunctionDefinition","parameters":{"id":492,"nodeType":"ParameterList","parameters":[{"constant":false,"id":489,"mutability":"mutable","name":"role","nameLocation":"963:4:2","nodeType":"VariableDeclaration","scope":496,"src":"955:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":488,"name":"bytes32","nodeType":"ElementaryTypeName","src":"955:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":491,"mutability":"mutable","name":"index","nameLocation":"977:5:2","nodeType":"VariableDeclaration","scope":496,"src":"969:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":490,"name":"uint256","nodeType":"ElementaryTypeName","src":"969:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"954:29:2"},"returnParameters":{"id":495,"nodeType":"ParameterList","parameters":[{"constant":false,"id":494,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":496,"src":"1007:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":493,"name":"address","nodeType":"ElementaryTypeName","src":"1007:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1006:9:2"},"scope":505,"src":"932:84:2","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":497,"nodeType":"StructuredDocumentation","src":"1022:157:2","text":" @dev Returns the number of accounts that have `role`. Can be used\n together with {getRoleMember} to enumerate all bearers of a role."},"functionSelector":"ca15c873","id":504,"implemented":false,"kind":"function","modifiers":[],"name":"getRoleMemberCount","nameLocation":"1193:18:2","nodeType":"FunctionDefinition","parameters":{"id":500,"nodeType":"ParameterList","parameters":[{"constant":false,"id":499,"mutability":"mutable","name":"role","nameLocation":"1220:4:2","nodeType":"VariableDeclaration","scope":504,"src":"1212:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":498,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1212:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1211:14:2"},"returnParameters":{"id":503,"nodeType":"ParameterList","parameters":[{"constant":false,"id":502,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":504,"src":"1249:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":501,"name":"uint256","nodeType":"ElementaryTypeName","src":"1249:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1248:9:2"},"scope":505,"src":"1184:74:2","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":506,"src":"272:988:2","usedErrors":[]}],"src":"104:1157:2"},"id":2},"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol","exportedSymbols":{"IAccessControlUpgradeable":[578]},"id":579,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":507,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"94:23:3"},{"abstract":false,"baseContracts":[],"canonicalName":"IAccessControlUpgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":508,"nodeType":"StructuredDocumentation","src":"119:89:3","text":" @dev External interface of AccessControl declared to support ERC165 detection."},"fullyImplemented":false,"id":578,"linearizedBaseContracts":[578],"name":"IAccessControlUpgradeable","nameLocation":"219:25:3","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":509,"nodeType":"StructuredDocumentation","src":"251:292:3","text":" @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n {RoleAdminChanged} not being emitted signaling this.\n _Available since v3.1._"},"eventSelector":"bd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff","id":517,"name":"RoleAdminChanged","nameLocation":"554:16:3","nodeType":"EventDefinition","parameters":{"id":516,"nodeType":"ParameterList","parameters":[{"constant":false,"id":511,"indexed":true,"mutability":"mutable","name":"role","nameLocation":"587:4:3","nodeType":"VariableDeclaration","scope":517,"src":"571:20:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":510,"name":"bytes32","nodeType":"ElementaryTypeName","src":"571:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":513,"indexed":true,"mutability":"mutable","name":"previousAdminRole","nameLocation":"609:17:3","nodeType":"VariableDeclaration","scope":517,"src":"593:33:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":512,"name":"bytes32","nodeType":"ElementaryTypeName","src":"593:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":515,"indexed":true,"mutability":"mutable","name":"newAdminRole","nameLocation":"644:12:3","nodeType":"VariableDeclaration","scope":517,"src":"628:28:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":514,"name":"bytes32","nodeType":"ElementaryTypeName","src":"628:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"570:87:3"},"src":"548:110:3"},{"anonymous":false,"documentation":{"id":518,"nodeType":"StructuredDocumentation","src":"664:212:3","text":" @dev Emitted when `account` is granted `role`.\n `sender` is the account that originated the contract call, an admin role\n bearer except when using {AccessControl-_setupRole}."},"eventSelector":"2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d","id":526,"name":"RoleGranted","nameLocation":"887:11:3","nodeType":"EventDefinition","parameters":{"id":525,"nodeType":"ParameterList","parameters":[{"constant":false,"id":520,"indexed":true,"mutability":"mutable","name":"role","nameLocation":"915:4:3","nodeType":"VariableDeclaration","scope":526,"src":"899:20:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":519,"name":"bytes32","nodeType":"ElementaryTypeName","src":"899:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":522,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"937:7:3","nodeType":"VariableDeclaration","scope":526,"src":"921:23:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":521,"name":"address","nodeType":"ElementaryTypeName","src":"921:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":524,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"962:6:3","nodeType":"VariableDeclaration","scope":526,"src":"946:22:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":523,"name":"address","nodeType":"ElementaryTypeName","src":"946:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"898:71:3"},"src":"881:89:3"},{"anonymous":false,"documentation":{"id":527,"nodeType":"StructuredDocumentation","src":"976:275:3","text":" @dev Emitted when `account` is revoked `role`.\n `sender` is the account that originated the contract call:\n   - if using `revokeRole`, it is the admin role bearer\n   - if using `renounceRole`, it is the role bearer (i.e. `account`)"},"eventSelector":"f6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b","id":535,"name":"RoleRevoked","nameLocation":"1262:11:3","nodeType":"EventDefinition","parameters":{"id":534,"nodeType":"ParameterList","parameters":[{"constant":false,"id":529,"indexed":true,"mutability":"mutable","name":"role","nameLocation":"1290:4:3","nodeType":"VariableDeclaration","scope":535,"src":"1274:20:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":528,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1274:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":531,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"1312:7:3","nodeType":"VariableDeclaration","scope":535,"src":"1296:23:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":530,"name":"address","nodeType":"ElementaryTypeName","src":"1296:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":533,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"1337:6:3","nodeType":"VariableDeclaration","scope":535,"src":"1321:22:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":532,"name":"address","nodeType":"ElementaryTypeName","src":"1321:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1273:71:3"},"src":"1256:89:3"},{"documentation":{"id":536,"nodeType":"StructuredDocumentation","src":"1351:76:3","text":" @dev Returns `true` if `account` has been granted `role`."},"functionSelector":"91d14854","id":545,"implemented":false,"kind":"function","modifiers":[],"name":"hasRole","nameLocation":"1441:7:3","nodeType":"FunctionDefinition","parameters":{"id":541,"nodeType":"ParameterList","parameters":[{"constant":false,"id":538,"mutability":"mutable","name":"role","nameLocation":"1457:4:3","nodeType":"VariableDeclaration","scope":545,"src":"1449:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":537,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1449:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":540,"mutability":"mutable","name":"account","nameLocation":"1471:7:3","nodeType":"VariableDeclaration","scope":545,"src":"1463:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":539,"name":"address","nodeType":"ElementaryTypeName","src":"1463:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1448:31:3"},"returnParameters":{"id":544,"nodeType":"ParameterList","parameters":[{"constant":false,"id":543,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":545,"src":"1503:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":542,"name":"bool","nodeType":"ElementaryTypeName","src":"1503:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1502:6:3"},"scope":578,"src":"1432:77:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":546,"nodeType":"StructuredDocumentation","src":"1515:184:3","text":" @dev Returns the admin role that controls `role`. See {grantRole} and\n {revokeRole}.\n To change a role's admin, use {AccessControl-_setRoleAdmin}."},"functionSelector":"248a9ca3","id":553,"implemented":false,"kind":"function","modifiers":[],"name":"getRoleAdmin","nameLocation":"1713:12:3","nodeType":"FunctionDefinition","parameters":{"id":549,"nodeType":"ParameterList","parameters":[{"constant":false,"id":548,"mutability":"mutable","name":"role","nameLocation":"1734:4:3","nodeType":"VariableDeclaration","scope":553,"src":"1726:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":547,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1726:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1725:14:3"},"returnParameters":{"id":552,"nodeType":"ParameterList","parameters":[{"constant":false,"id":551,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":553,"src":"1763:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":550,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1763:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1762:9:3"},"scope":578,"src":"1704:68:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":554,"nodeType":"StructuredDocumentation","src":"1778:239:3","text":" @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event.\n Requirements:\n - the caller must have ``role``'s admin role."},"functionSelector":"2f2ff15d","id":561,"implemented":false,"kind":"function","modifiers":[],"name":"grantRole","nameLocation":"2031:9:3","nodeType":"FunctionDefinition","parameters":{"id":559,"nodeType":"ParameterList","parameters":[{"constant":false,"id":556,"mutability":"mutable","name":"role","nameLocation":"2049:4:3","nodeType":"VariableDeclaration","scope":561,"src":"2041:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":555,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2041:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":558,"mutability":"mutable","name":"account","nameLocation":"2063:7:3","nodeType":"VariableDeclaration","scope":561,"src":"2055:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":557,"name":"address","nodeType":"ElementaryTypeName","src":"2055:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2040:31:3"},"returnParameters":{"id":560,"nodeType":"ParameterList","parameters":[],"src":"2080:0:3"},"scope":578,"src":"2022:59:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":562,"nodeType":"StructuredDocumentation","src":"2087:223:3","text":" @dev Revokes `role` from `account`.\n If `account` had been granted `role`, emits a {RoleRevoked} event.\n Requirements:\n - the caller must have ``role``'s admin role."},"functionSelector":"d547741f","id":569,"implemented":false,"kind":"function","modifiers":[],"name":"revokeRole","nameLocation":"2324:10:3","nodeType":"FunctionDefinition","parameters":{"id":567,"nodeType":"ParameterList","parameters":[{"constant":false,"id":564,"mutability":"mutable","name":"role","nameLocation":"2343:4:3","nodeType":"VariableDeclaration","scope":569,"src":"2335:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":563,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2335:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":566,"mutability":"mutable","name":"account","nameLocation":"2357:7:3","nodeType":"VariableDeclaration","scope":569,"src":"2349:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":565,"name":"address","nodeType":"ElementaryTypeName","src":"2349:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2334:31:3"},"returnParameters":{"id":568,"nodeType":"ParameterList","parameters":[],"src":"2374:0:3"},"scope":578,"src":"2315:60:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":570,"nodeType":"StructuredDocumentation","src":"2381:480:3","text":" @dev Revokes `role` from the calling account.\n Roles are often managed via {grantRole} and {revokeRole}: this function's\n purpose is to provide a mechanism for accounts to lose their privileges\n if they are compromised (such as when a trusted device is misplaced).\n If the calling account had been granted `role`, emits a {RoleRevoked}\n event.\n Requirements:\n - the caller must be `account`."},"functionSelector":"36568abe","id":577,"implemented":false,"kind":"function","modifiers":[],"name":"renounceRole","nameLocation":"2875:12:3","nodeType":"FunctionDefinition","parameters":{"id":575,"nodeType":"ParameterList","parameters":[{"constant":false,"id":572,"mutability":"mutable","name":"role","nameLocation":"2896:4:3","nodeType":"VariableDeclaration","scope":577,"src":"2888:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":571,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2888:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":574,"mutability":"mutable","name":"account","nameLocation":"2910:7:3","nodeType":"VariableDeclaration","scope":577,"src":"2902:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":573,"name":"address","nodeType":"ElementaryTypeName","src":"2902:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2887:31:3"},"returnParameters":{"id":576,"nodeType":"ParameterList","parameters":[],"src":"2927:0:3"},"scope":578,"src":"2866:62:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":579,"src":"209:2721:3","usedErrors":[]}],"src":"94:2837:3"},"id":3},"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[2063],"ContextUpgradeable":[2105],"Initializable":[1269],"OwnableUpgradeable":[710]},"id":711,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":580,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"102:23:4"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","file":"../utils/ContextUpgradeable.sol","id":581,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":711,"sourceUnit":2106,"src":"127:41:4","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":582,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":711,"sourceUnit":1270,"src":"169:42:4","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":584,"name":"Initializable","nameLocations":["748:13:4"],"nodeType":"IdentifierPath","referencedDeclaration":1269,"src":"748:13:4"},"id":585,"nodeType":"InheritanceSpecifier","src":"748:13:4"},{"baseName":{"id":586,"name":"ContextUpgradeable","nameLocations":["763:18:4"],"nodeType":"IdentifierPath","referencedDeclaration":2105,"src":"763:18:4"},"id":587,"nodeType":"InheritanceSpecifier","src":"763:18:4"}],"canonicalName":"OwnableUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":583,"nodeType":"StructuredDocumentation","src":"213:494:4","text":" @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."},"fullyImplemented":true,"id":710,"linearizedBaseContracts":[710,2105,1269],"name":"OwnableUpgradeable","nameLocation":"726:18:4","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":589,"mutability":"mutable","name":"_owner","nameLocation":"804:6:4","nodeType":"VariableDeclaration","scope":710,"src":"788:22:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":588,"name":"address","nodeType":"ElementaryTypeName","src":"788:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"anonymous":false,"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":595,"name":"OwnershipTransferred","nameLocation":"823:20:4","nodeType":"EventDefinition","parameters":{"id":594,"nodeType":"ParameterList","parameters":[{"constant":false,"id":591,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"860:13:4","nodeType":"VariableDeclaration","scope":595,"src":"844:29:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":590,"name":"address","nodeType":"ElementaryTypeName","src":"844:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":593,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"891:8:4","nodeType":"VariableDeclaration","scope":595,"src":"875:24:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":592,"name":"address","nodeType":"ElementaryTypeName","src":"875:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"843:57:4"},"src":"817:84:4"},{"body":{"id":604,"nodeType":"Block","src":"1055:43:4","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":601,"name":"__Ownable_init_unchained","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":616,"src":"1065:24:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":602,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1065:26:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":603,"nodeType":"ExpressionStatement","src":"1065:26:4"}]},"documentation":{"id":596,"nodeType":"StructuredDocumentation","src":"907:91:4","text":" @dev Initializes the contract setting the deployer as the initial owner."},"id":605,"implemented":true,"kind":"function","modifiers":[{"id":599,"kind":"modifierInvocation","modifierName":{"id":598,"name":"onlyInitializing","nameLocations":["1038:16:4"],"nodeType":"IdentifierPath","referencedDeclaration":1214,"src":"1038:16:4"},"nodeType":"ModifierInvocation","src":"1038:16:4"}],"name":"__Ownable_init","nameLocation":"1012:14:4","nodeType":"FunctionDefinition","parameters":{"id":597,"nodeType":"ParameterList","parameters":[],"src":"1026:2:4"},"returnParameters":{"id":600,"nodeType":"ParameterList","parameters":[],"src":"1055:0:4"},"scope":710,"src":"1003:95:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":615,"nodeType":"Block","src":"1166:49:4","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":611,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2090,"src":"1195:10:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":612,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1195:12:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":610,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":704,"src":"1176:18:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":613,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1176:32:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":614,"nodeType":"ExpressionStatement","src":"1176:32:4"}]},"id":616,"implemented":true,"kind":"function","modifiers":[{"id":608,"kind":"modifierInvocation","modifierName":{"id":607,"name":"onlyInitializing","nameLocations":["1149:16:4"],"nodeType":"IdentifierPath","referencedDeclaration":1214,"src":"1149:16:4"},"nodeType":"ModifierInvocation","src":"1149:16:4"}],"name":"__Ownable_init_unchained","nameLocation":"1113:24:4","nodeType":"FunctionDefinition","parameters":{"id":606,"nodeType":"ParameterList","parameters":[],"src":"1137:2:4"},"returnParameters":{"id":609,"nodeType":"ParameterList","parameters":[],"src":"1166:0:4"},"scope":710,"src":"1104:111:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":623,"nodeType":"Block","src":"1324:41:4","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":619,"name":"_checkOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":647,"src":"1334:11:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":620,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1334:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":621,"nodeType":"ExpressionStatement","src":"1334:13:4"},{"id":622,"nodeType":"PlaceholderStatement","src":"1357:1:4"}]},"documentation":{"id":617,"nodeType":"StructuredDocumentation","src":"1221:77:4","text":" @dev Throws if called by any account other than the owner."},"id":624,"name":"onlyOwner","nameLocation":"1312:9:4","nodeType":"ModifierDefinition","parameters":{"id":618,"nodeType":"ParameterList","parameters":[],"src":"1321:2:4"},"src":"1303:62:4","virtual":false,"visibility":"internal"},{"body":{"id":632,"nodeType":"Block","src":"1496:30:4","statements":[{"expression":{"id":630,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":589,"src":"1513:6:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":629,"id":631,"nodeType":"Return","src":"1506:13:4"}]},"documentation":{"id":625,"nodeType":"StructuredDocumentation","src":"1371:65:4","text":" @dev Returns the address of the current owner."},"functionSelector":"8da5cb5b","id":633,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"1450:5:4","nodeType":"FunctionDefinition","parameters":{"id":626,"nodeType":"ParameterList","parameters":[],"src":"1455:2:4"},"returnParameters":{"id":629,"nodeType":"ParameterList","parameters":[{"constant":false,"id":628,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":633,"src":"1487:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":627,"name":"address","nodeType":"ElementaryTypeName","src":"1487:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1486:9:4"},"scope":710,"src":"1441:85:4","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":646,"nodeType":"Block","src":"1644:85:4","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":642,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":638,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":633,"src":"1662:5:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":639,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1662:7:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":640,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2090,"src":"1673:10:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":641,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1673:12:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1662:23:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","id":643,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1687:34:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""},"value":"Ownable: caller is not the owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""}],"id":637,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1654:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":644,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1654:68:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":645,"nodeType":"ExpressionStatement","src":"1654:68:4"}]},"documentation":{"id":634,"nodeType":"StructuredDocumentation","src":"1532:62:4","text":" @dev Throws if the sender is not the owner."},"id":647,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOwner","nameLocation":"1608:11:4","nodeType":"FunctionDefinition","parameters":{"id":635,"nodeType":"ParameterList","parameters":[],"src":"1619:2:4"},"returnParameters":{"id":636,"nodeType":"ParameterList","parameters":[],"src":"1644:0:4"},"scope":710,"src":"1599:130:4","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":660,"nodeType":"Block","src":"2118:47:4","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":656,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2155:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":655,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2147:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":654,"name":"address","nodeType":"ElementaryTypeName","src":"2147:7:4","typeDescriptions":{}}},"id":657,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2147:10:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":653,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":704,"src":"2128:18:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":658,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2128:30:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":659,"nodeType":"ExpressionStatement","src":"2128:30:4"}]},"documentation":{"id":648,"nodeType":"StructuredDocumentation","src":"1735:324:4","text":" @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby disabling any functionality that is only available to the owner."},"functionSelector":"715018a6","id":661,"implemented":true,"kind":"function","modifiers":[{"id":651,"kind":"modifierInvocation","modifierName":{"id":650,"name":"onlyOwner","nameLocations":["2108:9:4"],"nodeType":"IdentifierPath","referencedDeclaration":624,"src":"2108:9:4"},"nodeType":"ModifierInvocation","src":"2108:9:4"}],"name":"renounceOwnership","nameLocation":"2073:17:4","nodeType":"FunctionDefinition","parameters":{"id":649,"nodeType":"ParameterList","parameters":[],"src":"2090:2:4"},"returnParameters":{"id":652,"nodeType":"ParameterList","parameters":[],"src":"2118:0:4"},"scope":710,"src":"2064:101:4","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":683,"nodeType":"Block","src":"2384:128:4","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":675,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":670,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":664,"src":"2402:8:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":673,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2422:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":672,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2414:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":671,"name":"address","nodeType":"ElementaryTypeName","src":"2414:7:4","typeDescriptions":{}}},"id":674,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2414:10:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2402:22:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373","id":676,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2426:40:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""},"value":"Ownable: new owner is the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""}],"id":669,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2394:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":677,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2394:73:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":678,"nodeType":"ExpressionStatement","src":"2394:73:4"},{"expression":{"arguments":[{"id":680,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":664,"src":"2496:8:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":679,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":704,"src":"2477:18:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":681,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2477:28:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":682,"nodeType":"ExpressionStatement","src":"2477:28:4"}]},"documentation":{"id":662,"nodeType":"StructuredDocumentation","src":"2171:138:4","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."},"functionSelector":"f2fde38b","id":684,"implemented":true,"kind":"function","modifiers":[{"id":667,"kind":"modifierInvocation","modifierName":{"id":666,"name":"onlyOwner","nameLocations":["2374:9:4"],"nodeType":"IdentifierPath","referencedDeclaration":624,"src":"2374:9:4"},"nodeType":"ModifierInvocation","src":"2374:9:4"}],"name":"transferOwnership","nameLocation":"2323:17:4","nodeType":"FunctionDefinition","parameters":{"id":665,"nodeType":"ParameterList","parameters":[{"constant":false,"id":664,"mutability":"mutable","name":"newOwner","nameLocation":"2349:8:4","nodeType":"VariableDeclaration","scope":684,"src":"2341:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":663,"name":"address","nodeType":"ElementaryTypeName","src":"2341:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2340:18:4"},"returnParameters":{"id":668,"nodeType":"ParameterList","parameters":[],"src":"2384:0:4"},"scope":710,"src":"2314:198:4","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":703,"nodeType":"Block","src":"2729:124:4","statements":[{"assignments":[691],"declarations":[{"constant":false,"id":691,"mutability":"mutable","name":"oldOwner","nameLocation":"2747:8:4","nodeType":"VariableDeclaration","scope":703,"src":"2739:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":690,"name":"address","nodeType":"ElementaryTypeName","src":"2739:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":693,"initialValue":{"id":692,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":589,"src":"2758:6:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2739:25:4"},{"expression":{"id":696,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":694,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":589,"src":"2774:6:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":695,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":687,"src":"2783:8:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2774:17:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":697,"nodeType":"ExpressionStatement","src":"2774:17:4"},{"eventCall":{"arguments":[{"id":699,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":691,"src":"2827:8:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":700,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":687,"src":"2837:8:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":698,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":595,"src":"2806:20:4","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":701,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2806:40:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":702,"nodeType":"EmitStatement","src":"2801:45:4"}]},"documentation":{"id":685,"nodeType":"StructuredDocumentation","src":"2518:143:4","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."},"id":704,"implemented":true,"kind":"function","modifiers":[],"name":"_transferOwnership","nameLocation":"2675:18:4","nodeType":"FunctionDefinition","parameters":{"id":688,"nodeType":"ParameterList","parameters":[{"constant":false,"id":687,"mutability":"mutable","name":"newOwner","nameLocation":"2702:8:4","nodeType":"VariableDeclaration","scope":704,"src":"2694:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":686,"name":"address","nodeType":"ElementaryTypeName","src":"2694:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2693:18:4"},"returnParameters":{"id":689,"nodeType":"ParameterList","parameters":[],"src":"2729:0:4"},"scope":710,"src":"2666:187:4","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":705,"nodeType":"StructuredDocumentation","src":"2859:254:4","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":709,"mutability":"mutable","name":"__gap","nameLocation":"3138:5:4","nodeType":"VariableDeclaration","scope":710,"src":"3118:25:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage","typeString":"uint256[49]"},"typeName":{"baseType":{"id":706,"name":"uint256","nodeType":"ElementaryTypeName","src":"3118:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":708,"length":{"hexValue":"3439","id":707,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3126:2:4","typeDescriptions":{"typeIdentifier":"t_rational_49_by_1","typeString":"int_const 49"},"value":"49"},"nodeType":"ArrayTypeName","src":"3118:11:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage_ptr","typeString":"uint256[49]"}},"visibility":"private"}],"scope":711,"src":"708:2438:4","usedErrors":[]}],"src":"102:3045:4"},"id":4},"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol","exportedSymbols":{"IERC1967Upgradeable":[731]},"id":732,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":712,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"107:23:5"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC1967Upgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":713,"nodeType":"StructuredDocumentation","src":"132:133:5","text":" @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\n _Available since v4.8.3._"},"fullyImplemented":true,"id":731,"linearizedBaseContracts":[731],"name":"IERC1967Upgradeable","nameLocation":"276:19:5","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":714,"nodeType":"StructuredDocumentation","src":"302:68:5","text":" @dev Emitted when the implementation is upgraded."},"eventSelector":"bc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b","id":718,"name":"Upgraded","nameLocation":"381:8:5","nodeType":"EventDefinition","parameters":{"id":717,"nodeType":"ParameterList","parameters":[{"constant":false,"id":716,"indexed":true,"mutability":"mutable","name":"implementation","nameLocation":"406:14:5","nodeType":"VariableDeclaration","scope":718,"src":"390:30:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":715,"name":"address","nodeType":"ElementaryTypeName","src":"390:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"389:32:5"},"src":"375:47:5"},{"anonymous":false,"documentation":{"id":719,"nodeType":"StructuredDocumentation","src":"428:67:5","text":" @dev Emitted when the admin account has changed."},"eventSelector":"7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f","id":725,"name":"AdminChanged","nameLocation":"506:12:5","nodeType":"EventDefinition","parameters":{"id":724,"nodeType":"ParameterList","parameters":[{"constant":false,"id":721,"indexed":false,"mutability":"mutable","name":"previousAdmin","nameLocation":"527:13:5","nodeType":"VariableDeclaration","scope":725,"src":"519:21:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":720,"name":"address","nodeType":"ElementaryTypeName","src":"519:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":723,"indexed":false,"mutability":"mutable","name":"newAdmin","nameLocation":"550:8:5","nodeType":"VariableDeclaration","scope":725,"src":"542:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":722,"name":"address","nodeType":"ElementaryTypeName","src":"542:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"518:41:5"},"src":"500:60:5"},{"anonymous":false,"documentation":{"id":726,"nodeType":"StructuredDocumentation","src":"566:59:5","text":" @dev Emitted when the beacon is changed."},"eventSelector":"1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e","id":730,"name":"BeaconUpgraded","nameLocation":"636:14:5","nodeType":"EventDefinition","parameters":{"id":729,"nodeType":"ParameterList","parameters":[{"constant":false,"id":728,"indexed":true,"mutability":"mutable","name":"beacon","nameLocation":"667:6:5","nodeType":"VariableDeclaration","scope":730,"src":"651:22:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":727,"name":"address","nodeType":"ElementaryTypeName","src":"651:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"650:24:5"},"src":"630:45:5"}],"scope":732,"src":"266:411:5","usedErrors":[]}],"src":"107:571:5"},"id":5},"@openzeppelin/contracts-upgradeable/interfaces/IERC5267Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/interfaces/IERC5267Upgradeable.sol","exportedSymbols":{"IERC5267Upgradeable":[756]},"id":757,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":733,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"107:23:6"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC5267Upgradeable","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":756,"linearizedBaseContracts":[756],"name":"IERC5267Upgradeable","nameLocation":"142:19:6","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":734,"nodeType":"StructuredDocumentation","src":"168:84:6","text":" @dev MAY be emitted to signal that the domain could have changed."},"eventSelector":"0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31","id":736,"name":"EIP712DomainChanged","nameLocation":"263:19:6","nodeType":"EventDefinition","parameters":{"id":735,"nodeType":"ParameterList","parameters":[],"src":"282:2:6"},"src":"257:28:6"},{"documentation":{"id":737,"nodeType":"StructuredDocumentation","src":"291:140:6","text":" @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\n signature."},"functionSelector":"84b0196e","id":755,"implemented":false,"kind":"function","modifiers":[],"name":"eip712Domain","nameLocation":"445:12:6","nodeType":"FunctionDefinition","parameters":{"id":738,"nodeType":"ParameterList","parameters":[],"src":"457:2:6"},"returnParameters":{"id":754,"nodeType":"ParameterList","parameters":[{"constant":false,"id":740,"mutability":"mutable","name":"fields","nameLocation":"527:6:6","nodeType":"VariableDeclaration","scope":755,"src":"520:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"typeName":{"id":739,"name":"bytes1","nodeType":"ElementaryTypeName","src":"520:6:6","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"visibility":"internal"},{"constant":false,"id":742,"mutability":"mutable","name":"name","nameLocation":"561:4:6","nodeType":"VariableDeclaration","scope":755,"src":"547:18:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":741,"name":"string","nodeType":"ElementaryTypeName","src":"547:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":744,"mutability":"mutable","name":"version","nameLocation":"593:7:6","nodeType":"VariableDeclaration","scope":755,"src":"579:21:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":743,"name":"string","nodeType":"ElementaryTypeName","src":"579:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":746,"mutability":"mutable","name":"chainId","nameLocation":"622:7:6","nodeType":"VariableDeclaration","scope":755,"src":"614:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":745,"name":"uint256","nodeType":"ElementaryTypeName","src":"614:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":748,"mutability":"mutable","name":"verifyingContract","nameLocation":"651:17:6","nodeType":"VariableDeclaration","scope":755,"src":"643:25:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":747,"name":"address","nodeType":"ElementaryTypeName","src":"643:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":750,"mutability":"mutable","name":"salt","nameLocation":"690:4:6","nodeType":"VariableDeclaration","scope":755,"src":"682:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":749,"name":"bytes32","nodeType":"ElementaryTypeName","src":"682:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":753,"mutability":"mutable","name":"extensions","nameLocation":"725:10:6","nodeType":"VariableDeclaration","scope":755,"src":"708:27:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":751,"name":"uint256","nodeType":"ElementaryTypeName","src":"708:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":752,"nodeType":"ArrayTypeName","src":"708:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"506:239:6"},"scope":756,"src":"436:310:6","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":757,"src":"132:616:6","usedErrors":[]}],"src":"107:642:6"},"id":6},"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol","exportedSymbols":{"IERC1822ProxiableUpgradeable":[766]},"id":767,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":758,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"113:23:7"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC1822ProxiableUpgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":759,"nodeType":"StructuredDocumentation","src":"138:203:7","text":" @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n proxy whose upgrades are fully controlled by the current implementation."},"fullyImplemented":false,"id":766,"linearizedBaseContracts":[766],"name":"IERC1822ProxiableUpgradeable","nameLocation":"352:28:7","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":760,"nodeType":"StructuredDocumentation","src":"387:438:7","text":" @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n address.\n IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n function revert if invoked through a proxy."},"functionSelector":"52d1902d","id":765,"implemented":false,"kind":"function","modifiers":[],"name":"proxiableUUID","nameLocation":"839:13:7","nodeType":"FunctionDefinition","parameters":{"id":761,"nodeType":"ParameterList","parameters":[],"src":"852:2:7"},"returnParameters":{"id":764,"nodeType":"ParameterList","parameters":[{"constant":false,"id":763,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":765,"src":"878:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":762,"name":"bytes32","nodeType":"ElementaryTypeName","src":"878:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"877:9:7"},"scope":766,"src":"830:57:7","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":767,"src":"342:547:7","usedErrors":[]}],"src":"113:777:7"},"id":7},"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[2063],"ERC1967UpgradeUpgradeable":[1090],"IBeaconUpgradeable":[1100],"IERC1822ProxiableUpgradeable":[766],"IERC1967Upgradeable":[731],"Initializable":[1269],"StorageSlotUpgradeable":[2215]},"id":1091,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":768,"literals":["solidity","^","0.8",".2"],"nodeType":"PragmaDirective","src":"116:23:8"},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol","file":"../beacon/IBeaconUpgradeable.sol","id":769,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1091,"sourceUnit":1101,"src":"141:42:8","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol","file":"../../interfaces/IERC1967Upgradeable.sol","id":770,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1091,"sourceUnit":732,"src":"184:50:8","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol","file":"../../interfaces/draft-IERC1822Upgradeable.sol","id":771,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1091,"sourceUnit":767,"src":"235:56:8","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","file":"../../utils/AddressUpgradeable.sol","id":772,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1091,"sourceUnit":2064,"src":"292:44:8","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol","file":"../../utils/StorageSlotUpgradeable.sol","id":773,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1091,"sourceUnit":2216,"src":"337:48:8","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../utils/Initializable.sol","id":774,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1091,"sourceUnit":1270,"src":"386:36:8","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":776,"name":"Initializable","nameLocations":["656:13:8"],"nodeType":"IdentifierPath","referencedDeclaration":1269,"src":"656:13:8"},"id":777,"nodeType":"InheritanceSpecifier","src":"656:13:8"},{"baseName":{"id":778,"name":"IERC1967Upgradeable","nameLocations":["671:19:8"],"nodeType":"IdentifierPath","referencedDeclaration":731,"src":"671:19:8"},"id":779,"nodeType":"InheritanceSpecifier","src":"671:19:8"}],"canonicalName":"ERC1967UpgradeUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":775,"nodeType":"StructuredDocumentation","src":"424:184:8","text":" @dev This abstract contract provides getters and event emitting update functions for\n https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n _Available since v4.1._"},"fullyImplemented":true,"id":1090,"linearizedBaseContracts":[1090,731,1269],"name":"ERC1967UpgradeUpgradeable","nameLocation":"627:25:8","nodeType":"ContractDefinition","nodes":[{"body":{"id":784,"nodeType":"Block","src":"756:7:8","statements":[]},"id":785,"implemented":true,"kind":"function","modifiers":[{"id":782,"kind":"modifierInvocation","modifierName":{"id":781,"name":"onlyInitializing","nameLocations":["739:16:8"],"nodeType":"IdentifierPath","referencedDeclaration":1214,"src":"739:16:8"},"nodeType":"ModifierInvocation","src":"739:16:8"}],"name":"__ERC1967Upgrade_init","nameLocation":"706:21:8","nodeType":"FunctionDefinition","parameters":{"id":780,"nodeType":"ParameterList","parameters":[],"src":"727:2:8"},"returnParameters":{"id":783,"nodeType":"ParameterList","parameters":[],"src":"756:0:8"},"scope":1090,"src":"697:66:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":790,"nodeType":"Block","src":"838:7:8","statements":[]},"id":791,"implemented":true,"kind":"function","modifiers":[{"id":788,"kind":"modifierInvocation","modifierName":{"id":787,"name":"onlyInitializing","nameLocations":["821:16:8"],"nodeType":"IdentifierPath","referencedDeclaration":1214,"src":"821:16:8"},"nodeType":"ModifierInvocation","src":"821:16:8"}],"name":"__ERC1967Upgrade_init_unchained","nameLocation":"778:31:8","nodeType":"FunctionDefinition","parameters":{"id":786,"nodeType":"ParameterList","parameters":[],"src":"809:2:8"},"returnParameters":{"id":789,"nodeType":"ParameterList","parameters":[],"src":"838:0:8"},"scope":1090,"src":"769:76:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"constant":true,"id":794,"mutability":"constant","name":"_ROLLBACK_SLOT","nameLocation":"954:14:8","nodeType":"VariableDeclaration","scope":1090,"src":"929:108:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":792,"name":"bytes32","nodeType":"ElementaryTypeName","src":"929:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307834393130666466613136666564333236306564306537313437663763633664613131613630323038623562393430366431326136333536313466666439313433","id":793,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"971:66:8","typeDescriptions":{"typeIdentifier":"t_rational_33048860383849004559742813297059419343339852917517107368639918720169455489347_by_1","typeString":"int_const 3304...(69 digits omitted)...9347"},"value":"0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143"},"visibility":"private"},{"constant":true,"documentation":{"id":795,"nodeType":"StructuredDocumentation","src":"1044:214:8","text":" @dev Storage slot with the address of the current implementation.\n This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n validated in the constructor."},"id":798,"mutability":"constant","name":"_IMPLEMENTATION_SLOT","nameLocation":"1289:20:8","nodeType":"VariableDeclaration","scope":1090,"src":"1263:115:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":796,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1263:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307833363038393461313362613161333231303636376338323834393264623938646361336532303736636333373335613932306133636135303564333832626263","id":797,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1312:66:8","typeDescriptions":{"typeIdentifier":"t_rational_24440054405305269366569402256811496959409073762505157381672968839269610695612_by_1","typeString":"int_const 2444...(69 digits omitted)...5612"},"value":"0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc"},"visibility":"internal"},{"body":{"id":810,"nodeType":"Block","src":"1519:89:8","statements":[{"expression":{"expression":{"arguments":[{"id":806,"name":"_IMPLEMENTATION_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":798,"src":"1574:20:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":804,"name":"StorageSlotUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2215,"src":"1536:22:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlotUpgradeable_$2215_$","typeString":"type(library StorageSlotUpgradeable)"}},"id":805,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1559:14:8","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":2137,"src":"1536:37:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$2111_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.AddressSlot storage pointer)"}},"id":807,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1536:59:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$2111_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot storage pointer"}},"id":808,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1596:5:8","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":2110,"src":"1536:65:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":803,"id":809,"nodeType":"Return","src":"1529:72:8"}]},"documentation":{"id":799,"nodeType":"StructuredDocumentation","src":"1385:67:8","text":" @dev Returns the current implementation address."},"id":811,"implemented":true,"kind":"function","modifiers":[],"name":"_getImplementation","nameLocation":"1466:18:8","nodeType":"FunctionDefinition","parameters":{"id":800,"nodeType":"ParameterList","parameters":[],"src":"1484:2:8"},"returnParameters":{"id":803,"nodeType":"ParameterList","parameters":[{"constant":false,"id":802,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":811,"src":"1510:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":801,"name":"address","nodeType":"ElementaryTypeName","src":"1510:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1509:9:8"},"scope":1090,"src":"1457:151:8","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":834,"nodeType":"Block","src":"1762:218:8","statements":[{"expression":{"arguments":[{"arguments":[{"id":820,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":814,"src":"1810:17:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":818,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2063,"src":"1780:18:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$2063_$","typeString":"type(library AddressUpgradeable)"}},"id":819,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1799:10:8","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":1751,"src":"1780:29:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":821,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1780:48:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313936373a206e657720696d706c656d656e746174696f6e206973206e6f74206120636f6e7472616374","id":822,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1830:47:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65","typeString":"literal_string \"ERC1967: new implementation is not a contract\""},"value":"ERC1967: new implementation is not a contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65","typeString":"literal_string \"ERC1967: new implementation is not a contract\""}],"id":817,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1772:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":823,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1772:106:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":824,"nodeType":"ExpressionStatement","src":"1772:106:8"},{"expression":{"id":832,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"arguments":[{"id":828,"name":"_IMPLEMENTATION_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":798,"src":"1926:20:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":825,"name":"StorageSlotUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2215,"src":"1888:22:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlotUpgradeable_$2215_$","typeString":"type(library StorageSlotUpgradeable)"}},"id":827,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1911:14:8","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":2137,"src":"1888:37:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$2111_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.AddressSlot storage pointer)"}},"id":829,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1888:59:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$2111_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot storage pointer"}},"id":830,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1948:5:8","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":2110,"src":"1888:65:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":831,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":814,"src":"1956:17:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1888:85:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":833,"nodeType":"ExpressionStatement","src":"1888:85:8"}]},"documentation":{"id":812,"nodeType":"StructuredDocumentation","src":"1614:80:8","text":" @dev Stores a new address in the EIP1967 implementation slot."},"id":835,"implemented":true,"kind":"function","modifiers":[],"name":"_setImplementation","nameLocation":"1708:18:8","nodeType":"FunctionDefinition","parameters":{"id":815,"nodeType":"ParameterList","parameters":[{"constant":false,"id":814,"mutability":"mutable","name":"newImplementation","nameLocation":"1735:17:8","nodeType":"VariableDeclaration","scope":835,"src":"1727:25:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":813,"name":"address","nodeType":"ElementaryTypeName","src":"1727:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1726:27:8"},"returnParameters":{"id":816,"nodeType":"ParameterList","parameters":[],"src":"1762:0:8"},"scope":1090,"src":"1699:281:8","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":849,"nodeType":"Block","src":"2142:96:8","statements":[{"expression":{"arguments":[{"id":842,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":838,"src":"2171:17:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":841,"name":"_setImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":835,"src":"2152:18:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":843,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2152:37:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":844,"nodeType":"ExpressionStatement","src":"2152:37:8"},{"eventCall":{"arguments":[{"id":846,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":838,"src":"2213:17:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":845,"name":"Upgraded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":718,"src":"2204:8:8","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":847,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2204:27:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":848,"nodeType":"EmitStatement","src":"2199:32:8"}]},"documentation":{"id":836,"nodeType":"StructuredDocumentation","src":"1986:95:8","text":" @dev Perform implementation upgrade\n Emits an {Upgraded} event."},"id":850,"implemented":true,"kind":"function","modifiers":[],"name":"_upgradeTo","nameLocation":"2095:10:8","nodeType":"FunctionDefinition","parameters":{"id":839,"nodeType":"ParameterList","parameters":[{"constant":false,"id":838,"mutability":"mutable","name":"newImplementation","nameLocation":"2114:17:8","nodeType":"VariableDeclaration","scope":850,"src":"2106:25:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":837,"name":"address","nodeType":"ElementaryTypeName","src":"2106:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2105:27:8"},"returnParameters":{"id":840,"nodeType":"ParameterList","parameters":[],"src":"2142:0:8"},"scope":1090,"src":"2086:152:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":879,"nodeType":"Block","src":"2470:178:8","statements":[{"expression":{"arguments":[{"id":861,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":853,"src":"2491:17:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":860,"name":"_upgradeTo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":850,"src":"2480:10:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":862,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2480:29:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":863,"nodeType":"ExpressionStatement","src":"2480:29:8"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":869,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":867,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":864,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":855,"src":"2523:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":865,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2528:6:8","memberName":"length","nodeType":"MemberAccess","src":"2523:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":866,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2537:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2523:15:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"id":868,"name":"forceCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":857,"src":"2542:9:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2523:28:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":878,"nodeType":"IfStatement","src":"2519:123:8","trueBody":{"id":877,"nodeType":"Block","src":"2553:89:8","statements":[{"expression":{"arguments":[{"id":873,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":853,"src":"2607:17:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":874,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":855,"src":"2626:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":870,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2063,"src":"2567:18:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$2063_$","typeString":"type(library AddressUpgradeable)"}},"id":872,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2586:20:8","memberName":"functionDelegateCall","nodeType":"MemberAccess","referencedDeclaration":1950,"src":"2567:39:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory) returns (bytes memory)"}},"id":875,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2567:64:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":876,"nodeType":"ExpressionStatement","src":"2567:64:8"}]}}]},"documentation":{"id":851,"nodeType":"StructuredDocumentation","src":"2244:123:8","text":" @dev Perform implementation upgrade with additional setup call.\n Emits an {Upgraded} event."},"id":880,"implemented":true,"kind":"function","modifiers":[],"name":"_upgradeToAndCall","nameLocation":"2381:17:8","nodeType":"FunctionDefinition","parameters":{"id":858,"nodeType":"ParameterList","parameters":[{"constant":false,"id":853,"mutability":"mutable","name":"newImplementation","nameLocation":"2407:17:8","nodeType":"VariableDeclaration","scope":880,"src":"2399:25:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":852,"name":"address","nodeType":"ElementaryTypeName","src":"2399:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":855,"mutability":"mutable","name":"data","nameLocation":"2439:4:8","nodeType":"VariableDeclaration","scope":880,"src":"2426:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":854,"name":"bytes","nodeType":"ElementaryTypeName","src":"2426:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":857,"mutability":"mutable","name":"forceCall","nameLocation":"2450:9:8","nodeType":"VariableDeclaration","scope":880,"src":"2445:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":856,"name":"bool","nodeType":"ElementaryTypeName","src":"2445:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2398:62:8"},"returnParameters":{"id":859,"nodeType":"ParameterList","parameters":[],"src":"2470:0:8"},"scope":1090,"src":"2372:276:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":932,"nodeType":"Block","src":"2922:842:8","statements":[{"condition":{"expression":{"arguments":[{"id":892,"name":"_ROLLBACK_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":794,"src":"3274:14:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":890,"name":"StorageSlotUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2215,"src":"3236:22:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlotUpgradeable_$2215_$","typeString":"type(library StorageSlotUpgradeable)"}},"id":891,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3259:14:8","memberName":"getBooleanSlot","nodeType":"MemberAccess","referencedDeclaration":2148,"src":"3236:37:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_BooleanSlot_$2114_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.BooleanSlot storage pointer)"}},"id":893,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3236:53:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$2114_storage_ptr","typeString":"struct StorageSlotUpgradeable.BooleanSlot storage pointer"}},"id":894,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3290:5:8","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":2113,"src":"3236:59:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":930,"nodeType":"Block","src":"3365:393:8","statements":[{"clauses":[{"block":{"id":915,"nodeType":"Block","src":"3470:115:8","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":911,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":909,"name":"slot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":906,"src":"3496:4:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":910,"name":"_IMPLEMENTATION_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":798,"src":"3504:20:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3496:28:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524331393637557067726164653a20756e737570706f727465642070726f786961626c6555554944","id":912,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3526:43:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c","typeString":"literal_string \"ERC1967Upgrade: unsupported proxiableUUID\""},"value":"ERC1967Upgrade: unsupported proxiableUUID"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c","typeString":"literal_string \"ERC1967Upgrade: unsupported proxiableUUID\""}],"id":908,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3488:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":913,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3488:82:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":914,"nodeType":"ExpressionStatement","src":"3488:82:8"}]},"errorName":"","id":916,"nodeType":"TryCatchClause","parameters":{"id":907,"nodeType":"ParameterList","parameters":[{"constant":false,"id":906,"mutability":"mutable","name":"slot","nameLocation":"3464:4:8","nodeType":"VariableDeclaration","scope":916,"src":"3456:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":905,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3456:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3455:14:8"},"src":"3447:138:8"},{"block":{"id":921,"nodeType":"Block","src":"3592:89:8","statements":[{"expression":{"arguments":[{"hexValue":"45524331393637557067726164653a206e657720696d706c656d656e746174696f6e206973206e6f742055555053","id":918,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3617:48:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24","typeString":"literal_string \"ERC1967Upgrade: new implementation is not UUPS\""},"value":"ERC1967Upgrade: new implementation is not UUPS"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24","typeString":"literal_string \"ERC1967Upgrade: new implementation is not UUPS\""}],"id":917,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"3610:6:8","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":919,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3610:56:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":920,"nodeType":"ExpressionStatement","src":"3610:56:8"}]},"errorName":"","id":922,"nodeType":"TryCatchClause","src":"3586:95:8"}],"externalCall":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":901,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":883,"src":"3412:17:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":900,"name":"IERC1822ProxiableUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":766,"src":"3383:28:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1822ProxiableUpgradeable_$766_$","typeString":"type(contract IERC1822ProxiableUpgradeable)"}},"id":902,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3383:47:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC1822ProxiableUpgradeable_$766","typeString":"contract IERC1822ProxiableUpgradeable"}},"id":903,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3431:13:8","memberName":"proxiableUUID","nodeType":"MemberAccess","referencedDeclaration":765,"src":"3383:61:8","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_bytes32_$","typeString":"function () view external returns (bytes32)"}},"id":904,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3383:63:8","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":923,"nodeType":"TryStatement","src":"3379:302:8"},{"expression":{"arguments":[{"id":925,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":883,"src":"3712:17:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":926,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":885,"src":"3731:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":927,"name":"forceCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":887,"src":"3737:9:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":924,"name":"_upgradeToAndCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":880,"src":"3694:17:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_bool_$returns$__$","typeString":"function (address,bytes memory,bool)"}},"id":928,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3694:53:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":929,"nodeType":"ExpressionStatement","src":"3694:53:8"}]},"id":931,"nodeType":"IfStatement","src":"3232:526:8","trueBody":{"id":899,"nodeType":"Block","src":"3297:62:8","statements":[{"expression":{"arguments":[{"id":896,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":883,"src":"3330:17:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":895,"name":"_setImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":835,"src":"3311:18:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":897,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3311:37:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":898,"nodeType":"ExpressionStatement","src":"3311:37:8"}]}}]},"documentation":{"id":881,"nodeType":"StructuredDocumentation","src":"2654:161:8","text":" @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n Emits an {Upgraded} event."},"id":933,"implemented":true,"kind":"function","modifiers":[],"name":"_upgradeToAndCallUUPS","nameLocation":"2829:21:8","nodeType":"FunctionDefinition","parameters":{"id":888,"nodeType":"ParameterList","parameters":[{"constant":false,"id":883,"mutability":"mutable","name":"newImplementation","nameLocation":"2859:17:8","nodeType":"VariableDeclaration","scope":933,"src":"2851:25:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":882,"name":"address","nodeType":"ElementaryTypeName","src":"2851:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":885,"mutability":"mutable","name":"data","nameLocation":"2891:4:8","nodeType":"VariableDeclaration","scope":933,"src":"2878:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":884,"name":"bytes","nodeType":"ElementaryTypeName","src":"2878:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":887,"mutability":"mutable","name":"forceCall","nameLocation":"2902:9:8","nodeType":"VariableDeclaration","scope":933,"src":"2897:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":886,"name":"bool","nodeType":"ElementaryTypeName","src":"2897:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2850:62:8"},"returnParameters":{"id":889,"nodeType":"ParameterList","parameters":[],"src":"2922:0:8"},"scope":1090,"src":"2820:944:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"constant":true,"documentation":{"id":934,"nodeType":"StructuredDocumentation","src":"3770:189:8","text":" @dev Storage slot with the admin of the contract.\n This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n validated in the constructor."},"id":937,"mutability":"constant","name":"_ADMIN_SLOT","nameLocation":"3990:11:8","nodeType":"VariableDeclaration","scope":1090,"src":"3964:106:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":935,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3964:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307862353331323736383461353638623331373361653133623966386136303136653234336536336236653865653131373864366137313738353062356436313033","id":936,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4004:66:8","typeDescriptions":{"typeIdentifier":"t_rational_81955473079516046949633743016697847541294818689821282749996681496272635257091_by_1","typeString":"int_const 8195...(69 digits omitted)...7091"},"value":"0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103"},"visibility":"internal"},{"body":{"id":949,"nodeType":"Block","src":"4185:80:8","statements":[{"expression":{"expression":{"arguments":[{"id":945,"name":"_ADMIN_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":937,"src":"4240:11:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":943,"name":"StorageSlotUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2215,"src":"4202:22:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlotUpgradeable_$2215_$","typeString":"type(library StorageSlotUpgradeable)"}},"id":944,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4225:14:8","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":2137,"src":"4202:37:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$2111_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.AddressSlot storage pointer)"}},"id":946,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4202:50:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$2111_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot storage pointer"}},"id":947,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4253:5:8","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":2110,"src":"4202:56:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":942,"id":948,"nodeType":"Return","src":"4195:63:8"}]},"documentation":{"id":938,"nodeType":"StructuredDocumentation","src":"4077:50:8","text":" @dev Returns the current admin."},"id":950,"implemented":true,"kind":"function","modifiers":[],"name":"_getAdmin","nameLocation":"4141:9:8","nodeType":"FunctionDefinition","parameters":{"id":939,"nodeType":"ParameterList","parameters":[],"src":"4150:2:8"},"returnParameters":{"id":942,"nodeType":"ParameterList","parameters":[{"constant":false,"id":941,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":950,"src":"4176:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":940,"name":"address","nodeType":"ElementaryTypeName","src":"4176:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4175:9:8"},"scope":1090,"src":"4132:133:8","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":975,"nodeType":"Block","src":"4392:167:8","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":962,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":957,"name":"newAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":953,"src":"4410:8:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":960,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4430:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":959,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4422:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":958,"name":"address","nodeType":"ElementaryTypeName","src":"4422:7:8","typeDescriptions":{}}},"id":961,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4422:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4410:22:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313936373a206e65772061646d696e20697320746865207a65726f2061646472657373","id":963,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4434:40:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_3820e16891102c1360a787e6e648431097d92537f969d458f5c94b56f8318be5","typeString":"literal_string \"ERC1967: new admin is the zero address\""},"value":"ERC1967: new admin is the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3820e16891102c1360a787e6e648431097d92537f969d458f5c94b56f8318be5","typeString":"literal_string \"ERC1967: new admin is the zero address\""}],"id":956,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4402:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":964,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4402:73:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":965,"nodeType":"ExpressionStatement","src":"4402:73:8"},{"expression":{"id":973,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"arguments":[{"id":969,"name":"_ADMIN_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":937,"src":"4523:11:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":966,"name":"StorageSlotUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2215,"src":"4485:22:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlotUpgradeable_$2215_$","typeString":"type(library StorageSlotUpgradeable)"}},"id":968,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4508:14:8","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":2137,"src":"4485:37:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$2111_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.AddressSlot storage pointer)"}},"id":970,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4485:50:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$2111_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot storage pointer"}},"id":971,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"4536:5:8","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":2110,"src":"4485:56:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":972,"name":"newAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":953,"src":"4544:8:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4485:67:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":974,"nodeType":"ExpressionStatement","src":"4485:67:8"}]},"documentation":{"id":951,"nodeType":"StructuredDocumentation","src":"4271:71:8","text":" @dev Stores a new address in the EIP1967 admin slot."},"id":976,"implemented":true,"kind":"function","modifiers":[],"name":"_setAdmin","nameLocation":"4356:9:8","nodeType":"FunctionDefinition","parameters":{"id":954,"nodeType":"ParameterList","parameters":[{"constant":false,"id":953,"mutability":"mutable","name":"newAdmin","nameLocation":"4374:8:8","nodeType":"VariableDeclaration","scope":976,"src":"4366:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":952,"name":"address","nodeType":"ElementaryTypeName","src":"4366:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4365:18:8"},"returnParameters":{"id":955,"nodeType":"ParameterList","parameters":[],"src":"4392:0:8"},"scope":1090,"src":"4347:212:8","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":992,"nodeType":"Block","src":"4719:86:8","statements":[{"eventCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":983,"name":"_getAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":950,"src":"4747:9:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":984,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4747:11:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":985,"name":"newAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":979,"src":"4760:8:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":982,"name":"AdminChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":725,"src":"4734:12:8","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":986,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4734:35:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":987,"nodeType":"EmitStatement","src":"4729:40:8"},{"expression":{"arguments":[{"id":989,"name":"newAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":979,"src":"4789:8:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":988,"name":"_setAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":976,"src":"4779:9:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":990,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4779:19:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":991,"nodeType":"ExpressionStatement","src":"4779:19:8"}]},"documentation":{"id":977,"nodeType":"StructuredDocumentation","src":"4565:100:8","text":" @dev Changes the admin of the proxy.\n Emits an {AdminChanged} event."},"id":993,"implemented":true,"kind":"function","modifiers":[],"name":"_changeAdmin","nameLocation":"4679:12:8","nodeType":"FunctionDefinition","parameters":{"id":980,"nodeType":"ParameterList","parameters":[{"constant":false,"id":979,"mutability":"mutable","name":"newAdmin","nameLocation":"4700:8:8","nodeType":"VariableDeclaration","scope":993,"src":"4692:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":978,"name":"address","nodeType":"ElementaryTypeName","src":"4692:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4691:18:8"},"returnParameters":{"id":981,"nodeType":"ParameterList","parameters":[],"src":"4719:0:8"},"scope":1090,"src":"4670:135:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"constant":true,"documentation":{"id":994,"nodeType":"StructuredDocumentation","src":"4811:232:8","text":" @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor."},"id":997,"mutability":"constant","name":"_BEACON_SLOT","nameLocation":"5074:12:8","nodeType":"VariableDeclaration","scope":1090,"src":"5048:107:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":995,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5048:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307861336630616437346535343233616562666438306433656634333436353738333335613961373261656165653539666636636233353832623335313333643530","id":996,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5089:66:8","typeDescriptions":{"typeIdentifier":"t_rational_74152234768234802001998023604048924213078445070507226371336425913862612794704_by_1","typeString":"int_const 7415...(69 digits omitted)...4704"},"value":"0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50"},"visibility":"internal"},{"body":{"id":1009,"nodeType":"Block","src":"5272:81:8","statements":[{"expression":{"expression":{"arguments":[{"id":1005,"name":"_BEACON_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":997,"src":"5327:12:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1003,"name":"StorageSlotUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2215,"src":"5289:22:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlotUpgradeable_$2215_$","typeString":"type(library StorageSlotUpgradeable)"}},"id":1004,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5312:14:8","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":2137,"src":"5289:37:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$2111_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.AddressSlot storage pointer)"}},"id":1006,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5289:51:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$2111_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot storage pointer"}},"id":1007,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5341:5:8","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":2110,"src":"5289:57:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1002,"id":1008,"nodeType":"Return","src":"5282:64:8"}]},"documentation":{"id":998,"nodeType":"StructuredDocumentation","src":"5162:51:8","text":" @dev Returns the current beacon."},"id":1010,"implemented":true,"kind":"function","modifiers":[],"name":"_getBeacon","nameLocation":"5227:10:8","nodeType":"FunctionDefinition","parameters":{"id":999,"nodeType":"ParameterList","parameters":[],"src":"5237:2:8"},"returnParameters":{"id":1002,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1001,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1010,"src":"5263:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1000,"name":"address","nodeType":"ElementaryTypeName","src":"5263:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5262:9:8"},"scope":1090,"src":"5218:135:8","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1045,"nodeType":"Block","src":"5482:368:8","statements":[{"expression":{"arguments":[{"arguments":[{"id":1019,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1013,"src":"5530:9:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1017,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2063,"src":"5500:18:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$2063_$","typeString":"type(library AddressUpgradeable)"}},"id":1018,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5519:10:8","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":1751,"src":"5500:29:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":1020,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5500:40:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313936373a206e657720626561636f6e206973206e6f74206120636f6e7472616374","id":1021,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5542:39:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_9589b7809634e4928033de18bb696e9af4ef71b703652af5245f2dbebf2f4470","typeString":"literal_string \"ERC1967: new beacon is not a contract\""},"value":"ERC1967: new beacon is not a contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9589b7809634e4928033de18bb696e9af4ef71b703652af5245f2dbebf2f4470","typeString":"literal_string \"ERC1967: new beacon is not a contract\""}],"id":1016,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5492:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1022,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5492:90:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1023,"nodeType":"ExpressionStatement","src":"5492:90:8"},{"expression":{"arguments":[{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":1028,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1013,"src":"5662:9:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1027,"name":"IBeaconUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1100,"src":"5643:18:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IBeaconUpgradeable_$1100_$","typeString":"type(contract IBeaconUpgradeable)"}},"id":1029,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5643:29:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IBeaconUpgradeable_$1100","typeString":"contract IBeaconUpgradeable"}},"id":1030,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5673:14:8","memberName":"implementation","nodeType":"MemberAccess","referencedDeclaration":1099,"src":"5643:44:8","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":1031,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5643:46:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1025,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2063,"src":"5613:18:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$2063_$","typeString":"type(library AddressUpgradeable)"}},"id":1026,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5632:10:8","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":1751,"src":"5613:29:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":1032,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5613:77:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313936373a20626561636f6e20696d706c656d656e746174696f6e206973206e6f74206120636f6e7472616374","id":1033,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5704:50:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_f95fd1f5b5578816eb23f6ca0f2439b4b5e4094dc16e99c3b8e91603a83f93c8","typeString":"literal_string \"ERC1967: beacon implementation is not a contract\""},"value":"ERC1967: beacon implementation is not a contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f95fd1f5b5578816eb23f6ca0f2439b4b5e4094dc16e99c3b8e91603a83f93c8","typeString":"literal_string \"ERC1967: beacon implementation is not a contract\""}],"id":1024,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5592:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1034,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5592:172:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1035,"nodeType":"ExpressionStatement","src":"5592:172:8"},{"expression":{"id":1043,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"arguments":[{"id":1039,"name":"_BEACON_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":997,"src":"5812:12:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1036,"name":"StorageSlotUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2215,"src":"5774:22:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlotUpgradeable_$2215_$","typeString":"type(library StorageSlotUpgradeable)"}},"id":1038,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5797:14:8","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":2137,"src":"5774:37:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$2111_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.AddressSlot storage pointer)"}},"id":1040,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5774:51:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$2111_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot storage pointer"}},"id":1041,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"5826:5:8","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":2110,"src":"5774:57:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1042,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1013,"src":"5834:9:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5774:69:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1044,"nodeType":"ExpressionStatement","src":"5774:69:8"}]},"documentation":{"id":1011,"nodeType":"StructuredDocumentation","src":"5359:71:8","text":" @dev Stores a new beacon in the EIP1967 beacon slot."},"id":1046,"implemented":true,"kind":"function","modifiers":[],"name":"_setBeacon","nameLocation":"5444:10:8","nodeType":"FunctionDefinition","parameters":{"id":1014,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1013,"mutability":"mutable","name":"newBeacon","nameLocation":"5463:9:8","nodeType":"VariableDeclaration","scope":1046,"src":"5455:17:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1012,"name":"address","nodeType":"ElementaryTypeName","src":"5455:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5454:19:8"},"returnParameters":{"id":1015,"nodeType":"ParameterList","parameters":[],"src":"5482:0:8"},"scope":1090,"src":"5435:415:8","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":1083,"nodeType":"Block","src":"6249:239:8","statements":[{"expression":{"arguments":[{"id":1057,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1049,"src":"6270:9:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1056,"name":"_setBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1046,"src":"6259:10:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1058,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6259:21:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1059,"nodeType":"ExpressionStatement","src":"6259:21:8"},{"eventCall":{"arguments":[{"id":1061,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1049,"src":"6310:9:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1060,"name":"BeaconUpgraded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":730,"src":"6295:14:8","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1062,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6295:25:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1063,"nodeType":"EmitStatement","src":"6290:30:8"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1069,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1067,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1064,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1051,"src":"6334:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1065,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6339:6:8","memberName":"length","nodeType":"MemberAccess","src":"6334:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1066,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6348:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6334:15:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"id":1068,"name":"forceCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1053,"src":"6353:9:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6334:28:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1082,"nodeType":"IfStatement","src":"6330:152:8","trueBody":{"id":1081,"nodeType":"Block","src":"6364:118:8","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":1074,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1049,"src":"6437:9:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1073,"name":"IBeaconUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1100,"src":"6418:18:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IBeaconUpgradeable_$1100_$","typeString":"type(contract IBeaconUpgradeable)"}},"id":1075,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6418:29:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IBeaconUpgradeable_$1100","typeString":"contract IBeaconUpgradeable"}},"id":1076,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6448:14:8","memberName":"implementation","nodeType":"MemberAccess","referencedDeclaration":1099,"src":"6418:44:8","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":1077,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6418:46:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1078,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1051,"src":"6466:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1070,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2063,"src":"6378:18:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$2063_$","typeString":"type(library AddressUpgradeable)"}},"id":1072,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6397:20:8","memberName":"functionDelegateCall","nodeType":"MemberAccess","referencedDeclaration":1950,"src":"6378:39:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory) returns (bytes memory)"}},"id":1079,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6378:93:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1080,"nodeType":"ExpressionStatement","src":"6378:93:8"}]}}]},"documentation":{"id":1047,"nodeType":"StructuredDocumentation","src":"5856:292:8","text":" @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n Emits a {BeaconUpgraded} event."},"id":1084,"implemented":true,"kind":"function","modifiers":[],"name":"_upgradeBeaconToAndCall","nameLocation":"6162:23:8","nodeType":"FunctionDefinition","parameters":{"id":1054,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1049,"mutability":"mutable","name":"newBeacon","nameLocation":"6194:9:8","nodeType":"VariableDeclaration","scope":1084,"src":"6186:17:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1048,"name":"address","nodeType":"ElementaryTypeName","src":"6186:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1051,"mutability":"mutable","name":"data","nameLocation":"6218:4:8","nodeType":"VariableDeclaration","scope":1084,"src":"6205:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1050,"name":"bytes","nodeType":"ElementaryTypeName","src":"6205:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1053,"mutability":"mutable","name":"forceCall","nameLocation":"6229:9:8","nodeType":"VariableDeclaration","scope":1084,"src":"6224:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1052,"name":"bool","nodeType":"ElementaryTypeName","src":"6224:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6185:54:8"},"returnParameters":{"id":1055,"nodeType":"ParameterList","parameters":[],"src":"6249:0:8"},"scope":1090,"src":"6153:335:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"constant":false,"documentation":{"id":1085,"nodeType":"StructuredDocumentation","src":"6494:254:8","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":1089,"mutability":"mutable","name":"__gap","nameLocation":"6773:5:8","nodeType":"VariableDeclaration","scope":1090,"src":"6753:25:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":1086,"name":"uint256","nodeType":"ElementaryTypeName","src":"6753:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1088,"length":{"hexValue":"3530","id":1087,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6761:2:8","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"6753:11:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"}],"scope":1091,"src":"609:6172:8","usedErrors":[]}],"src":"116:6666:8"},"id":8},"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol","exportedSymbols":{"IBeaconUpgradeable":[1100]},"id":1101,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1092,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"93:23:9"},{"abstract":false,"baseContracts":[],"canonicalName":"IBeaconUpgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":1093,"nodeType":"StructuredDocumentation","src":"118:79:9","text":" @dev This is the interface that {BeaconProxy} expects of its beacon."},"fullyImplemented":false,"id":1100,"linearizedBaseContracts":[1100],"name":"IBeaconUpgradeable","nameLocation":"208:18:9","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1094,"nodeType":"StructuredDocumentation","src":"233:162:9","text":" @dev Must return an address that can be used as a delegate call target.\n {BeaconProxy} will check that this address is a contract."},"functionSelector":"5c60da1b","id":1099,"implemented":false,"kind":"function","modifiers":[],"name":"implementation","nameLocation":"409:14:9","nodeType":"FunctionDefinition","parameters":{"id":1095,"nodeType":"ParameterList","parameters":[],"src":"423:2:9"},"returnParameters":{"id":1098,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1097,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1099,"src":"449:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1096,"name":"address","nodeType":"ElementaryTypeName","src":"449:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"448:9:9"},"scope":1100,"src":"400:58:9","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1101,"src":"198:262:9","usedErrors":[]}],"src":"93:368:9"},"id":9},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","exportedSymbols":{"AddressUpgradeable":[2063],"Initializable":[1269]},"id":1270,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1102,"literals":["solidity","^","0.8",".2"],"nodeType":"PragmaDirective","src":"113:23:10"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","file":"../../utils/AddressUpgradeable.sol","id":1103,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1270,"sourceUnit":2064,"src":"138:44:10","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[],"canonicalName":"Initializable","contractDependencies":[],"contractKind":"contract","documentation":{"id":1104,"nodeType":"StructuredDocumentation","src":"184:2209:10","text":" @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n case an upgrade adds a module that needs to be initialized.\n For example:\n [.hljs-theme-light.nopadding]\n ```solidity\n contract MyToken is ERC20Upgradeable {\n     function initialize() initializer public {\n         __ERC20_init(\"MyToken\", \"MTK\");\n     }\n }\n contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n     function initializeV2() reinitializer(2) public {\n         __ERC20Permit_init(\"MyToken\");\n     }\n }\n ```\n TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n [CAUTION]\n ====\n Avoid leaving a contract uninitialized.\n An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n [.hljs-theme-light.nopadding]\n ```\n /// @custom:oz-upgrades-unsafe-allow constructor\n constructor() {\n     _disableInitializers();\n }\n ```\n ===="},"fullyImplemented":true,"id":1269,"linearizedBaseContracts":[1269],"name":"Initializable","nameLocation":"2412:13:10","nodeType":"ContractDefinition","nodes":[{"constant":false,"documentation":{"id":1105,"nodeType":"StructuredDocumentation","src":"2432:109:10","text":" @dev Indicates that the contract has been initialized.\n @custom:oz-retyped-from bool"},"id":1107,"mutability":"mutable","name":"_initialized","nameLocation":"2560:12:10","nodeType":"VariableDeclaration","scope":1269,"src":"2546:26:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1106,"name":"uint8","nodeType":"ElementaryTypeName","src":"2546:5:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"private"},{"constant":false,"documentation":{"id":1108,"nodeType":"StructuredDocumentation","src":"2579:91:10","text":" @dev Indicates that the contract is in the process of being initialized."},"id":1110,"mutability":"mutable","name":"_initializing","nameLocation":"2688:13:10","nodeType":"VariableDeclaration","scope":1269,"src":"2675:26:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1109,"name":"bool","nodeType":"ElementaryTypeName","src":"2675:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"private"},{"anonymous":false,"documentation":{"id":1111,"nodeType":"StructuredDocumentation","src":"2708:90:10","text":" @dev Triggered when the contract has been initialized or reinitialized."},"eventSelector":"7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498","id":1115,"name":"Initialized","nameLocation":"2809:11:10","nodeType":"EventDefinition","parameters":{"id":1114,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1113,"indexed":false,"mutability":"mutable","name":"version","nameLocation":"2827:7:10","nodeType":"VariableDeclaration","scope":1115,"src":"2821:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1112,"name":"uint8","nodeType":"ElementaryTypeName","src":"2821:5:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"2820:15:10"},"src":"2803:33:10"},{"body":{"id":1170,"nodeType":"Block","src":"3269:483:10","statements":[{"assignments":[1119],"declarations":[{"constant":false,"id":1119,"mutability":"mutable","name":"isTopLevelCall","nameLocation":"3284:14:10","nodeType":"VariableDeclaration","scope":1170,"src":"3279:19:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1118,"name":"bool","nodeType":"ElementaryTypeName","src":"3279:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":1122,"initialValue":{"id":1121,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3301:14:10","subExpression":{"id":1120,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1110,"src":"3302:13:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"3279:36:10"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1143,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1128,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1124,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1119,"src":"3347:14:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":1127,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1125,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1107,"src":"3365:12:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"31","id":1126,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3380:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3365:16:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3347:34:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":1129,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3346:36:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1141,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1137,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3387:45:10","subExpression":{"arguments":[{"arguments":[{"id":1134,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3426:4:10","typeDescriptions":{"typeIdentifier":"t_contract$_Initializable_$1269","typeString":"contract Initializable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Initializable_$1269","typeString":"contract Initializable"}],"id":1133,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3418:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1132,"name":"address","nodeType":"ElementaryTypeName","src":"3418:7:10","typeDescriptions":{}}},"id":1135,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3418:13:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1130,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2063,"src":"3388:18:10","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$2063_$","typeString":"type(library AddressUpgradeable)"}},"id":1131,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3407:10:10","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":1751,"src":"3388:29:10","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":1136,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3388:44:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":1140,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1138,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1107,"src":"3436:12:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":1139,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3452:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3436:17:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3387:66:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":1142,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3386:68:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3346:108:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564","id":1144,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3468:48:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""},"value":"Initializable: contract is already initialized"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""}],"id":1123,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3325:7:10","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1145,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3325:201:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1146,"nodeType":"ExpressionStatement","src":"3325:201:10"},{"expression":{"id":1149,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1147,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1107,"src":"3536:12:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"31","id":1148,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3551:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3536:16:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":1150,"nodeType":"ExpressionStatement","src":"3536:16:10"},{"condition":{"id":1151,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1119,"src":"3566:14:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1157,"nodeType":"IfStatement","src":"3562:65:10","trueBody":{"id":1156,"nodeType":"Block","src":"3582:45:10","statements":[{"expression":{"id":1154,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1152,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1110,"src":"3596:13:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":1153,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3612:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"3596:20:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1155,"nodeType":"ExpressionStatement","src":"3596:20:10"}]}},{"id":1158,"nodeType":"PlaceholderStatement","src":"3636:1:10"},{"condition":{"id":1159,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1119,"src":"3651:14:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1169,"nodeType":"IfStatement","src":"3647:99:10","trueBody":{"id":1168,"nodeType":"Block","src":"3667:79:10","statements":[{"expression":{"id":1162,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1160,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1110,"src":"3681:13:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":1161,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3697:5:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"3681:21:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1163,"nodeType":"ExpressionStatement","src":"3681:21:10"},{"eventCall":{"arguments":[{"hexValue":"31","id":1165,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3733:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":1164,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1115,"src":"3721:11:10","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":1166,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3721:14:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1167,"nodeType":"EmitStatement","src":"3716:19:10"}]}}]},"documentation":{"id":1116,"nodeType":"StructuredDocumentation","src":"2842:399:10","text":" @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n `onlyInitializing` functions can be used to initialize parent contracts.\n Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n constructor.\n Emits an {Initialized} event."},"id":1171,"name":"initializer","nameLocation":"3255:11:10","nodeType":"ModifierDefinition","parameters":{"id":1117,"nodeType":"ParameterList","parameters":[],"src":"3266:2:10"},"src":"3246:506:10","virtual":false,"visibility":"internal"},{"body":{"id":1203,"nodeType":"Block","src":"4863:255:10","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1182,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1178,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4881:14:10","subExpression":{"id":1177,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1110,"src":"4882:13:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":1181,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1179,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1107,"src":"4899:12:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1180,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1174,"src":"4914:7:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"4899:22:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4881:40:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564","id":1183,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4923:48:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""},"value":"Initializable: contract is already initialized"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""}],"id":1176,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4873:7:10","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1184,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4873:99:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1185,"nodeType":"ExpressionStatement","src":"4873:99:10"},{"expression":{"id":1188,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1186,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1107,"src":"4982:12:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1187,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1174,"src":"4997:7:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"4982:22:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":1189,"nodeType":"ExpressionStatement","src":"4982:22:10"},{"expression":{"id":1192,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1190,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1110,"src":"5014:13:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":1191,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5030:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"5014:20:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1193,"nodeType":"ExpressionStatement","src":"5014:20:10"},{"id":1194,"nodeType":"PlaceholderStatement","src":"5044:1:10"},{"expression":{"id":1197,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1195,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1110,"src":"5055:13:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":1196,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5071:5:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"5055:21:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1198,"nodeType":"ExpressionStatement","src":"5055:21:10"},{"eventCall":{"arguments":[{"id":1200,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1174,"src":"5103:7:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":1199,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1115,"src":"5091:11:10","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":1201,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5091:20:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1202,"nodeType":"EmitStatement","src":"5086:25:10"}]},"documentation":{"id":1172,"nodeType":"StructuredDocumentation","src":"3758:1062:10","text":" @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n used to initialize parent contracts.\n A reinitializer may be used after the original initialization step. This is essential to configure modules that\n are added through upgrades and that require initialization.\n When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n cannot be nested. If one is invoked in the context of another, execution will revert.\n Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n a contract, executing them in the right order is up to the developer or operator.\n WARNING: setting the version to 255 will prevent any future reinitialization.\n Emits an {Initialized} event."},"id":1204,"name":"reinitializer","nameLocation":"4834:13:10","nodeType":"ModifierDefinition","parameters":{"id":1175,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1174,"mutability":"mutable","name":"version","nameLocation":"4854:7:10","nodeType":"VariableDeclaration","scope":1204,"src":"4848:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1173,"name":"uint8","nodeType":"ElementaryTypeName","src":"4848:5:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"4847:15:10"},"src":"4825:293:10","virtual":false,"visibility":"internal"},{"body":{"id":1213,"nodeType":"Block","src":"5356:97:10","statements":[{"expression":{"arguments":[{"id":1208,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1110,"src":"5374:13:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e7472616374206973206e6f7420696e697469616c697a696e67","id":1209,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5389:45:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","typeString":"literal_string \"Initializable: contract is not initializing\""},"value":"Initializable: contract is not initializing"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","typeString":"literal_string \"Initializable: contract is not initializing\""}],"id":1207,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5366:7:10","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1210,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5366:69:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1211,"nodeType":"ExpressionStatement","src":"5366:69:10"},{"id":1212,"nodeType":"PlaceholderStatement","src":"5445:1:10"}]},"documentation":{"id":1205,"nodeType":"StructuredDocumentation","src":"5124:199:10","text":" @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n {initializer} and {reinitializer} modifiers, directly or indirectly."},"id":1214,"name":"onlyInitializing","nameLocation":"5337:16:10","nodeType":"ModifierDefinition","parameters":{"id":1206,"nodeType":"ParameterList","parameters":[],"src":"5353:2:10"},"src":"5328:125:10","virtual":false,"visibility":"internal"},{"body":{"id":1249,"nodeType":"Block","src":"5988:231:10","statements":[{"expression":{"arguments":[{"id":1220,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"6006:14:10","subExpression":{"id":1219,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1110,"src":"6007:13:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320696e697469616c697a696e67","id":1221,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6022:41:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","typeString":"literal_string \"Initializable: contract is initializing\""},"value":"Initializable: contract is initializing"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","typeString":"literal_string \"Initializable: contract is initializing\""}],"id":1218,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5998:7:10","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1222,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5998:66:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1223,"nodeType":"ExpressionStatement","src":"5998:66:10"},{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":1230,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1224,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1107,"src":"6078:12:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"arguments":[{"id":1227,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6099:5:10","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":1226,"name":"uint8","nodeType":"ElementaryTypeName","src":"6099:5:10","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":1225,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6094:4:10","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1228,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6094:11:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":1229,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6106:3:10","memberName":"max","nodeType":"MemberAccess","src":"6094:15:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"6078:31:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1248,"nodeType":"IfStatement","src":"6074:139:10","trueBody":{"id":1247,"nodeType":"Block","src":"6111:102:10","statements":[{"expression":{"id":1237,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1231,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1107,"src":"6125:12:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"arguments":[{"id":1234,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6145:5:10","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":1233,"name":"uint8","nodeType":"ElementaryTypeName","src":"6145:5:10","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":1232,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6140:4:10","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1235,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6140:11:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":1236,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6152:3:10","memberName":"max","nodeType":"MemberAccess","src":"6140:15:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"6125:30:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":1238,"nodeType":"ExpressionStatement","src":"6125:30:10"},{"eventCall":{"arguments":[{"expression":{"arguments":[{"id":1242,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6191:5:10","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":1241,"name":"uint8","nodeType":"ElementaryTypeName","src":"6191:5:10","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":1240,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6186:4:10","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1243,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6186:11:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":1244,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6198:3:10","memberName":"max","nodeType":"MemberAccess","src":"6186:15:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":1239,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1115,"src":"6174:11:10","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":1245,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6174:28:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1246,"nodeType":"EmitStatement","src":"6169:33:10"}]}}]},"documentation":{"id":1215,"nodeType":"StructuredDocumentation","src":"5459:475:10","text":" @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n through proxies.\n Emits an {Initialized} event the first time it is successfully executed."},"id":1250,"implemented":true,"kind":"function","modifiers":[],"name":"_disableInitializers","nameLocation":"5948:20:10","nodeType":"FunctionDefinition","parameters":{"id":1216,"nodeType":"ParameterList","parameters":[],"src":"5968:2:10"},"returnParameters":{"id":1217,"nodeType":"ParameterList","parameters":[],"src":"5988:0:10"},"scope":1269,"src":"5939:280:10","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1258,"nodeType":"Block","src":"6393:36:10","statements":[{"expression":{"id":1256,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1107,"src":"6410:12:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"functionReturnParameters":1255,"id":1257,"nodeType":"Return","src":"6403:19:10"}]},"documentation":{"id":1251,"nodeType":"StructuredDocumentation","src":"6225:99:10","text":" @dev Returns the highest version that has been initialized. See {reinitializer}."},"id":1259,"implemented":true,"kind":"function","modifiers":[],"name":"_getInitializedVersion","nameLocation":"6338:22:10","nodeType":"FunctionDefinition","parameters":{"id":1252,"nodeType":"ParameterList","parameters":[],"src":"6360:2:10"},"returnParameters":{"id":1255,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1254,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1259,"src":"6386:5:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1253,"name":"uint8","nodeType":"ElementaryTypeName","src":"6386:5:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"6385:7:10"},"scope":1269,"src":"6329:100:10","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1267,"nodeType":"Block","src":"6601:37:10","statements":[{"expression":{"id":1265,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1110,"src":"6618:13:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1264,"id":1266,"nodeType":"Return","src":"6611:20:10"}]},"documentation":{"id":1260,"nodeType":"StructuredDocumentation","src":"6435:105:10","text":" @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}."},"id":1268,"implemented":true,"kind":"function","modifiers":[],"name":"_isInitializing","nameLocation":"6554:15:10","nodeType":"FunctionDefinition","parameters":{"id":1261,"nodeType":"ParameterList","parameters":[],"src":"6569:2:10"},"returnParameters":{"id":1264,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1263,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1268,"src":"6595:4:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1262,"name":"bool","nodeType":"ElementaryTypeName","src":"6595:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6594:6:10"},"scope":1269,"src":"6545:93:10","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":1270,"src":"2394:4246:10","usedErrors":[]}],"src":"113:6528:10"},"id":10},"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[2063],"ERC1967UpgradeUpgradeable":[1090],"IBeaconUpgradeable":[1100],"IERC1822ProxiableUpgradeable":[766],"IERC1967Upgradeable":[731],"Initializable":[1269],"StorageSlotUpgradeable":[2215],"UUPSUpgradeable":[1405]},"id":1406,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1271,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"115:23:11"},{"absolutePath":"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol","file":"../../interfaces/draft-IERC1822Upgradeable.sol","id":1272,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1406,"sourceUnit":767,"src":"140:56:11","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol","file":"../ERC1967/ERC1967UpgradeUpgradeable.sol","id":1273,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1406,"sourceUnit":1091,"src":"197:50:11","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"./Initializable.sol","id":1274,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1406,"sourceUnit":1270,"src":"248:29:11","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1276,"name":"Initializable","nameLocations":["965:13:11"],"nodeType":"IdentifierPath","referencedDeclaration":1269,"src":"965:13:11"},"id":1277,"nodeType":"InheritanceSpecifier","src":"965:13:11"},{"baseName":{"id":1278,"name":"IERC1822ProxiableUpgradeable","nameLocations":["980:28:11"],"nodeType":"IdentifierPath","referencedDeclaration":766,"src":"980:28:11"},"id":1279,"nodeType":"InheritanceSpecifier","src":"980:28:11"},{"baseName":{"id":1280,"name":"ERC1967UpgradeUpgradeable","nameLocations":["1010:25:11"],"nodeType":"IdentifierPath","referencedDeclaration":1090,"src":"1010:25:11"},"id":1281,"nodeType":"InheritanceSpecifier","src":"1010:25:11"}],"canonicalName":"UUPSUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":1275,"nodeType":"StructuredDocumentation","src":"279:648:11","text":" @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n `UUPSUpgradeable` with a custom implementation of upgrades.\n The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n _Available since v4.1._"},"fullyImplemented":false,"id":1405,"linearizedBaseContracts":[1405,1090,731,766,1269],"name":"UUPSUpgradeable","nameLocation":"946:15:11","nodeType":"ContractDefinition","nodes":[{"body":{"id":1286,"nodeType":"Block","src":"1102:7:11","statements":[]},"id":1287,"implemented":true,"kind":"function","modifiers":[{"id":1284,"kind":"modifierInvocation","modifierName":{"id":1283,"name":"onlyInitializing","nameLocations":["1085:16:11"],"nodeType":"IdentifierPath","referencedDeclaration":1214,"src":"1085:16:11"},"nodeType":"ModifierInvocation","src":"1085:16:11"}],"name":"__UUPSUpgradeable_init","nameLocation":"1051:22:11","nodeType":"FunctionDefinition","parameters":{"id":1282,"nodeType":"ParameterList","parameters":[],"src":"1073:2:11"},"returnParameters":{"id":1285,"nodeType":"ParameterList","parameters":[],"src":"1102:0:11"},"scope":1405,"src":"1042:67:11","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1292,"nodeType":"Block","src":"1185:7:11","statements":[]},"id":1293,"implemented":true,"kind":"function","modifiers":[{"id":1290,"kind":"modifierInvocation","modifierName":{"id":1289,"name":"onlyInitializing","nameLocations":["1168:16:11"],"nodeType":"IdentifierPath","referencedDeclaration":1214,"src":"1168:16:11"},"nodeType":"ModifierInvocation","src":"1168:16:11"}],"name":"__UUPSUpgradeable_init_unchained","nameLocation":"1124:32:11","nodeType":"FunctionDefinition","parameters":{"id":1288,"nodeType":"ParameterList","parameters":[],"src":"1156:2:11"},"returnParameters":{"id":1291,"nodeType":"ParameterList","parameters":[],"src":"1185:0:11"},"scope":1405,"src":"1115:77:11","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"constant":false,"documentation":{"id":1294,"nodeType":"StructuredDocumentation","src":"1197:87:11","text":"@custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment"},"id":1300,"mutability":"immutable","name":"__self","nameLocation":"1315:6:11","nodeType":"VariableDeclaration","scope":1405,"src":"1289:48:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1295,"name":"address","nodeType":"ElementaryTypeName","src":"1289:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":{"arguments":[{"id":1298,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1332:4:11","typeDescriptions":{"typeIdentifier":"t_contract$_UUPSUpgradeable_$1405","typeString":"contract UUPSUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_UUPSUpgradeable_$1405","typeString":"contract UUPSUpgradeable"}],"id":1297,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1324:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1296,"name":"address","nodeType":"ElementaryTypeName","src":"1324:7:11","typeDescriptions":{}}},"id":1299,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1324:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"body":{"id":1322,"nodeType":"Block","src":"1863:205:11","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1309,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1306,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1889:4:11","typeDescriptions":{"typeIdentifier":"t_contract$_UUPSUpgradeable_$1405","typeString":"contract UUPSUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_UUPSUpgradeable_$1405","typeString":"contract UUPSUpgradeable"}],"id":1305,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1881:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1304,"name":"address","nodeType":"ElementaryTypeName","src":"1881:7:11","typeDescriptions":{}}},"id":1307,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1881:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1308,"name":"__self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1300,"src":"1898:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1881:23:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682064656c656761746563616c6c","id":1310,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1906:46:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb","typeString":"literal_string \"Function must be called through delegatecall\""},"value":"Function must be called through delegatecall"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb","typeString":"literal_string \"Function must be called through delegatecall\""}],"id":1303,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1873:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1311,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1873:80:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1312,"nodeType":"ExpressionStatement","src":"1873:80:11"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1317,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":1314,"name":"_getImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":811,"src":"1971:18:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1315,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1971:20:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1316,"name":"__self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1300,"src":"1995:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1971:30:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"46756e6374696f6e206d7573742062652063616c6c6564207468726f756768206163746976652070726f7879","id":1318,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2003:46:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434","typeString":"literal_string \"Function must be called through active proxy\""},"value":"Function must be called through active proxy"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434","typeString":"literal_string \"Function must be called through active proxy\""}],"id":1313,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1963:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1319,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1963:87:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1320,"nodeType":"ExpressionStatement","src":"1963:87:11"},{"id":1321,"nodeType":"PlaceholderStatement","src":"2060:1:11"}]},"documentation":{"id":1301,"nodeType":"StructuredDocumentation","src":"1344:493:11","text":" @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n fail."},"id":1323,"name":"onlyProxy","nameLocation":"1851:9:11","nodeType":"ModifierDefinition","parameters":{"id":1302,"nodeType":"ParameterList","parameters":[],"src":"1860:2:11"},"src":"1842:226:11","virtual":false,"visibility":"internal"},{"body":{"id":1337,"nodeType":"Block","src":"2298:120:11","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1332,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1329,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2324:4:11","typeDescriptions":{"typeIdentifier":"t_contract$_UUPSUpgradeable_$1405","typeString":"contract UUPSUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_UUPSUpgradeable_$1405","typeString":"contract UUPSUpgradeable"}],"id":1328,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2316:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1327,"name":"address","nodeType":"ElementaryTypeName","src":"2316:7:11","typeDescriptions":{}}},"id":1330,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2316:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1331,"name":"__self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1300,"src":"2333:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2316:23:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"555550535570677261646561626c653a206d757374206e6f742062652063616c6c6564207468726f7567682064656c656761746563616c6c","id":1333,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2341:58:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4","typeString":"literal_string \"UUPSUpgradeable: must not be called through delegatecall\""},"value":"UUPSUpgradeable: must not be called through delegatecall"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4","typeString":"literal_string \"UUPSUpgradeable: must not be called through delegatecall\""}],"id":1326,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2308:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1334,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2308:92:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1335,"nodeType":"ExpressionStatement","src":"2308:92:11"},{"id":1336,"nodeType":"PlaceholderStatement","src":"2410:1:11"}]},"documentation":{"id":1324,"nodeType":"StructuredDocumentation","src":"2074:195:11","text":" @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n callable on the implementing contract but not through proxies."},"id":1338,"name":"notDelegated","nameLocation":"2283:12:11","nodeType":"ModifierDefinition","parameters":{"id":1325,"nodeType":"ParameterList","parameters":[],"src":"2295:2:11"},"src":"2274:144:11","virtual":false,"visibility":"internal"},{"baseFunctions":[765],"body":{"id":1349,"nodeType":"Block","src":"3093:44:11","statements":[{"expression":{"id":1347,"name":"_IMPLEMENTATION_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":798,"src":"3110:20:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1346,"id":1348,"nodeType":"Return","src":"3103:27:11"}]},"documentation":{"id":1339,"nodeType":"StructuredDocumentation","src":"2424:577:11","text":" @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n implementation. It is used to validate the implementation's compatibility when performing an upgrade.\n IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."},"functionSelector":"52d1902d","id":1350,"implemented":true,"kind":"function","modifiers":[{"id":1343,"kind":"modifierInvocation","modifierName":{"id":1342,"name":"notDelegated","nameLocations":["3062:12:11"],"nodeType":"IdentifierPath","referencedDeclaration":1338,"src":"3062:12:11"},"nodeType":"ModifierInvocation","src":"3062:12:11"}],"name":"proxiableUUID","nameLocation":"3015:13:11","nodeType":"FunctionDefinition","overrides":{"id":1341,"nodeType":"OverrideSpecifier","overrides":[],"src":"3053:8:11"},"parameters":{"id":1340,"nodeType":"ParameterList","parameters":[],"src":"3028:2:11"},"returnParameters":{"id":1346,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1345,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1350,"src":"3084:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1344,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3084:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3083:9:11"},"scope":1405,"src":"3006:131:11","stateMutability":"view","virtual":true,"visibility":"external"},{"body":{"id":1371,"nodeType":"Block","src":"3458:124:11","statements":[{"expression":{"arguments":[{"id":1359,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1353,"src":"3486:17:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1358,"name":"_authorizeUpgrade","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1399,"src":"3468:17:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1360,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3468:36:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1361,"nodeType":"ExpressionStatement","src":"3468:36:11"},{"expression":{"arguments":[{"id":1363,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1353,"src":"3536:17:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1366,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3565:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1365,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"3555:9:11","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":1364,"name":"bytes","nodeType":"ElementaryTypeName","src":"3559:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":1367,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3555:12:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"66616c7365","id":1368,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3569:5:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1362,"name":"_upgradeToAndCallUUPS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":933,"src":"3514:21:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_bool_$returns$__$","typeString":"function (address,bytes memory,bool)"}},"id":1369,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3514:61:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1370,"nodeType":"ExpressionStatement","src":"3514:61:11"}]},"documentation":{"id":1351,"nodeType":"StructuredDocumentation","src":"3143:239:11","text":" @dev Upgrade the implementation of the proxy to `newImplementation`.\n Calls {_authorizeUpgrade}.\n Emits an {Upgraded} event.\n @custom:oz-upgrades-unsafe-allow-reachable delegatecall"},"functionSelector":"3659cfe6","id":1372,"implemented":true,"kind":"function","modifiers":[{"id":1356,"kind":"modifierInvocation","modifierName":{"id":1355,"name":"onlyProxy","nameLocations":["3448:9:11"],"nodeType":"IdentifierPath","referencedDeclaration":1323,"src":"3448:9:11"},"nodeType":"ModifierInvocation","src":"3448:9:11"}],"name":"upgradeTo","nameLocation":"3396:9:11","nodeType":"FunctionDefinition","parameters":{"id":1354,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1353,"mutability":"mutable","name":"newImplementation","nameLocation":"3414:17:11","nodeType":"VariableDeclaration","scope":1372,"src":"3406:25:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1352,"name":"address","nodeType":"ElementaryTypeName","src":"3406:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3405:27:11"},"returnParameters":{"id":1357,"nodeType":"ParameterList","parameters":[],"src":"3458:0:11"},"scope":1405,"src":"3387:195:11","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":1392,"nodeType":"Block","src":"4006:115:11","statements":[{"expression":{"arguments":[{"id":1383,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1375,"src":"4034:17:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1382,"name":"_authorizeUpgrade","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1399,"src":"4016:17:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1384,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4016:36:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1385,"nodeType":"ExpressionStatement","src":"4016:36:11"},{"expression":{"arguments":[{"id":1387,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1375,"src":"4084:17:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1388,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1377,"src":"4103:4:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"74727565","id":1389,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4109:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1386,"name":"_upgradeToAndCallUUPS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":933,"src":"4062:21:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_bool_$returns$__$","typeString":"function (address,bytes memory,bool)"}},"id":1390,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4062:52:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1391,"nodeType":"ExpressionStatement","src":"4062:52:11"}]},"documentation":{"id":1373,"nodeType":"StructuredDocumentation","src":"3588:308:11","text":" @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n encoded in `data`.\n Calls {_authorizeUpgrade}.\n Emits an {Upgraded} event.\n @custom:oz-upgrades-unsafe-allow-reachable delegatecall"},"functionSelector":"4f1ef286","id":1393,"implemented":true,"kind":"function","modifiers":[{"id":1380,"kind":"modifierInvocation","modifierName":{"id":1379,"name":"onlyProxy","nameLocations":["3996:9:11"],"nodeType":"IdentifierPath","referencedDeclaration":1323,"src":"3996:9:11"},"nodeType":"ModifierInvocation","src":"3996:9:11"}],"name":"upgradeToAndCall","nameLocation":"3910:16:11","nodeType":"FunctionDefinition","parameters":{"id":1378,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1375,"mutability":"mutable","name":"newImplementation","nameLocation":"3935:17:11","nodeType":"VariableDeclaration","scope":1393,"src":"3927:25:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1374,"name":"address","nodeType":"ElementaryTypeName","src":"3927:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1377,"mutability":"mutable","name":"data","nameLocation":"3967:4:11","nodeType":"VariableDeclaration","scope":1393,"src":"3954:17:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1376,"name":"bytes","nodeType":"ElementaryTypeName","src":"3954:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3926:46:11"},"returnParameters":{"id":1381,"nodeType":"ParameterList","parameters":[],"src":"4006:0:11"},"scope":1405,"src":"3901:220:11","stateMutability":"payable","virtual":true,"visibility":"public"},{"documentation":{"id":1394,"nodeType":"StructuredDocumentation","src":"4127:397:11","text":" @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n {upgradeTo} and {upgradeToAndCall}.\n Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n ```solidity\n function _authorizeUpgrade(address) internal override onlyOwner {}\n ```"},"id":1399,"implemented":false,"kind":"function","modifiers":[],"name":"_authorizeUpgrade","nameLocation":"4538:17:11","nodeType":"FunctionDefinition","parameters":{"id":1397,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1396,"mutability":"mutable","name":"newImplementation","nameLocation":"4564:17:11","nodeType":"VariableDeclaration","scope":1399,"src":"4556:25:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1395,"name":"address","nodeType":"ElementaryTypeName","src":"4556:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4555:27:11"},"returnParameters":{"id":1398,"nodeType":"ParameterList","parameters":[],"src":"4599:0:11"},"scope":1405,"src":"4529:71:11","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":1400,"nodeType":"StructuredDocumentation","src":"4606:254:11","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":1404,"mutability":"mutable","name":"__gap","nameLocation":"4885:5:11","nodeType":"VariableDeclaration","scope":1405,"src":"4865:25:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":1401,"name":"uint256","nodeType":"ElementaryTypeName","src":"4865:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1403,"length":{"hexValue":"3530","id":1402,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4873:2:11","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"4865:11:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"}],"scope":1406,"src":"928:3965:11","usedErrors":[]}],"src":"115:4779:11"},"id":11},"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[2063],"ContextUpgradeable":[2105],"Initializable":[1269],"PausableUpgradeable":[1532]},"id":1533,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1407,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"105:23:12"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","file":"../utils/ContextUpgradeable.sol","id":1408,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1533,"sourceUnit":2106,"src":"130:41:12","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":1409,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1533,"sourceUnit":1270,"src":"172:42:12","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1411,"name":"Initializable","nameLocations":["697:13:12"],"nodeType":"IdentifierPath","referencedDeclaration":1269,"src":"697:13:12"},"id":1412,"nodeType":"InheritanceSpecifier","src":"697:13:12"},{"baseName":{"id":1413,"name":"ContextUpgradeable","nameLocations":["712:18:12"],"nodeType":"IdentifierPath","referencedDeclaration":2105,"src":"712:18:12"},"id":1414,"nodeType":"InheritanceSpecifier","src":"712:18:12"}],"canonicalName":"PausableUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":1410,"nodeType":"StructuredDocumentation","src":"216:439:12","text":" @dev Contract module which allows children to implement an emergency stop\n mechanism that can be triggered by an authorized account.\n This module is used through inheritance. It will make available the\n modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n the functions of your contract. Note that they will not be pausable by\n simply including this module, only once the modifiers are put in place."},"fullyImplemented":true,"id":1532,"linearizedBaseContracts":[1532,2105,1269],"name":"PausableUpgradeable","nameLocation":"674:19:12","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":1415,"nodeType":"StructuredDocumentation","src":"737:73:12","text":" @dev Emitted when the pause is triggered by `account`."},"eventSelector":"62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258","id":1419,"name":"Paused","nameLocation":"821:6:12","nodeType":"EventDefinition","parameters":{"id":1418,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1417,"indexed":false,"mutability":"mutable","name":"account","nameLocation":"836:7:12","nodeType":"VariableDeclaration","scope":1419,"src":"828:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1416,"name":"address","nodeType":"ElementaryTypeName","src":"828:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"827:17:12"},"src":"815:30:12"},{"anonymous":false,"documentation":{"id":1420,"nodeType":"StructuredDocumentation","src":"851:70:12","text":" @dev Emitted when the pause is lifted by `account`."},"eventSelector":"5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa","id":1424,"name":"Unpaused","nameLocation":"932:8:12","nodeType":"EventDefinition","parameters":{"id":1423,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1422,"indexed":false,"mutability":"mutable","name":"account","nameLocation":"949:7:12","nodeType":"VariableDeclaration","scope":1424,"src":"941:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1421,"name":"address","nodeType":"ElementaryTypeName","src":"941:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"940:17:12"},"src":"926:32:12"},{"constant":false,"id":1426,"mutability":"mutable","name":"_paused","nameLocation":"977:7:12","nodeType":"VariableDeclaration","scope":1532,"src":"964:20:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1425,"name":"bool","nodeType":"ElementaryTypeName","src":"964:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"private"},{"body":{"id":1435,"nodeType":"Block","src":"1116:44:12","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":1432,"name":"__Pausable_init_unchained","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1446,"src":"1126:25:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":1433,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1126:27:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1434,"nodeType":"ExpressionStatement","src":"1126:27:12"}]},"documentation":{"id":1427,"nodeType":"StructuredDocumentation","src":"991:67:12","text":" @dev Initializes the contract in unpaused state."},"id":1436,"implemented":true,"kind":"function","modifiers":[{"id":1430,"kind":"modifierInvocation","modifierName":{"id":1429,"name":"onlyInitializing","nameLocations":["1099:16:12"],"nodeType":"IdentifierPath","referencedDeclaration":1214,"src":"1099:16:12"},"nodeType":"ModifierInvocation","src":"1099:16:12"}],"name":"__Pausable_init","nameLocation":"1072:15:12","nodeType":"FunctionDefinition","parameters":{"id":1428,"nodeType":"ParameterList","parameters":[],"src":"1087:2:12"},"returnParameters":{"id":1431,"nodeType":"ParameterList","parameters":[],"src":"1116:0:12"},"scope":1532,"src":"1063:97:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1445,"nodeType":"Block","src":"1229:32:12","statements":[{"expression":{"id":1443,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1441,"name":"_paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1426,"src":"1239:7:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":1442,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1249:5:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"1239:15:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1444,"nodeType":"ExpressionStatement","src":"1239:15:12"}]},"id":1446,"implemented":true,"kind":"function","modifiers":[{"id":1439,"kind":"modifierInvocation","modifierName":{"id":1438,"name":"onlyInitializing","nameLocations":["1212:16:12"],"nodeType":"IdentifierPath","referencedDeclaration":1214,"src":"1212:16:12"},"nodeType":"ModifierInvocation","src":"1212:16:12"}],"name":"__Pausable_init_unchained","nameLocation":"1175:25:12","nodeType":"FunctionDefinition","parameters":{"id":1437,"nodeType":"ParameterList","parameters":[],"src":"1200:2:12"},"returnParameters":{"id":1440,"nodeType":"ParameterList","parameters":[],"src":"1229:0:12"},"scope":1532,"src":"1166:95:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1453,"nodeType":"Block","src":"1472:47:12","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":1449,"name":"_requireNotPaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1483,"src":"1482:17:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":1450,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1482:19:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1451,"nodeType":"ExpressionStatement","src":"1482:19:12"},{"id":1452,"nodeType":"PlaceholderStatement","src":"1511:1:12"}]},"documentation":{"id":1447,"nodeType":"StructuredDocumentation","src":"1267:175:12","text":" @dev Modifier to make a function callable only when the contract is not paused.\n Requirements:\n - The contract must not be paused."},"id":1454,"name":"whenNotPaused","nameLocation":"1456:13:12","nodeType":"ModifierDefinition","parameters":{"id":1448,"nodeType":"ParameterList","parameters":[],"src":"1469:2:12"},"src":"1447:72:12","virtual":false,"visibility":"internal"},{"body":{"id":1461,"nodeType":"Block","src":"1719:44:12","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":1457,"name":"_requirePaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1494,"src":"1729:14:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":1458,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1729:16:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1459,"nodeType":"ExpressionStatement","src":"1729:16:12"},{"id":1460,"nodeType":"PlaceholderStatement","src":"1755:1:12"}]},"documentation":{"id":1455,"nodeType":"StructuredDocumentation","src":"1525:167:12","text":" @dev Modifier to make a function callable only when the contract is paused.\n Requirements:\n - The contract must be paused."},"id":1462,"name":"whenPaused","nameLocation":"1706:10:12","nodeType":"ModifierDefinition","parameters":{"id":1456,"nodeType":"ParameterList","parameters":[],"src":"1716:2:12"},"src":"1697:66:12","virtual":false,"visibility":"internal"},{"body":{"id":1470,"nodeType":"Block","src":"1911:31:12","statements":[{"expression":{"id":1468,"name":"_paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1426,"src":"1928:7:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1467,"id":1469,"nodeType":"Return","src":"1921:14:12"}]},"documentation":{"id":1463,"nodeType":"StructuredDocumentation","src":"1769:84:12","text":" @dev Returns true if the contract is paused, and false otherwise."},"functionSelector":"5c975abb","id":1471,"implemented":true,"kind":"function","modifiers":[],"name":"paused","nameLocation":"1867:6:12","nodeType":"FunctionDefinition","parameters":{"id":1464,"nodeType":"ParameterList","parameters":[],"src":"1873:2:12"},"returnParameters":{"id":1467,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1466,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1471,"src":"1905:4:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1465,"name":"bool","nodeType":"ElementaryTypeName","src":"1905:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1904:6:12"},"scope":1532,"src":"1858:84:12","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":1482,"nodeType":"Block","src":"2061:55:12","statements":[{"expression":{"arguments":[{"id":1478,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"2079:9:12","subExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":1476,"name":"paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1471,"src":"2080:6:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bool_$","typeString":"function () view returns (bool)"}},"id":1477,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2080:8:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5061757361626c653a20706175736564","id":1479,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2090:18:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a","typeString":"literal_string \"Pausable: paused\""},"value":"Pausable: paused"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a","typeString":"literal_string \"Pausable: paused\""}],"id":1475,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2071:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1480,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2071:38:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1481,"nodeType":"ExpressionStatement","src":"2071:38:12"}]},"documentation":{"id":1472,"nodeType":"StructuredDocumentation","src":"1948:57:12","text":" @dev Throws if the contract is paused."},"id":1483,"implemented":true,"kind":"function","modifiers":[],"name":"_requireNotPaused","nameLocation":"2019:17:12","nodeType":"FunctionDefinition","parameters":{"id":1473,"nodeType":"ParameterList","parameters":[],"src":"2036:2:12"},"returnParameters":{"id":1474,"nodeType":"ParameterList","parameters":[],"src":"2061:0:12"},"scope":1532,"src":"2010:106:12","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1493,"nodeType":"Block","src":"2236:58:12","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1488,"name":"paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1471,"src":"2254:6:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bool_$","typeString":"function () view returns (bool)"}},"id":1489,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2254:8:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5061757361626c653a206e6f7420706175736564","id":1490,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2264:22:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a","typeString":"literal_string \"Pausable: not paused\""},"value":"Pausable: not paused"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a","typeString":"literal_string \"Pausable: not paused\""}],"id":1487,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2246:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1491,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2246:41:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1492,"nodeType":"ExpressionStatement","src":"2246:41:12"}]},"documentation":{"id":1484,"nodeType":"StructuredDocumentation","src":"2122:61:12","text":" @dev Throws if the contract is not paused."},"id":1494,"implemented":true,"kind":"function","modifiers":[],"name":"_requirePaused","nameLocation":"2197:14:12","nodeType":"FunctionDefinition","parameters":{"id":1485,"nodeType":"ParameterList","parameters":[],"src":"2211:2:12"},"returnParameters":{"id":1486,"nodeType":"ParameterList","parameters":[],"src":"2236:0:12"},"scope":1532,"src":"2188:106:12","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1509,"nodeType":"Block","src":"2478:66:12","statements":[{"expression":{"id":1502,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1500,"name":"_paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1426,"src":"2488:7:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":1501,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2498:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"2488:14:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1503,"nodeType":"ExpressionStatement","src":"2488:14:12"},{"eventCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1505,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2090,"src":"2524:10:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1506,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2524:12:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1504,"name":"Paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1419,"src":"2517:6:12","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1507,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2517:20:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1508,"nodeType":"EmitStatement","src":"2512:25:12"}]},"documentation":{"id":1495,"nodeType":"StructuredDocumentation","src":"2300:124:12","text":" @dev Triggers stopped state.\n Requirements:\n - The contract must not be paused."},"id":1510,"implemented":true,"kind":"function","modifiers":[{"id":1498,"kind":"modifierInvocation","modifierName":{"id":1497,"name":"whenNotPaused","nameLocations":["2464:13:12"],"nodeType":"IdentifierPath","referencedDeclaration":1454,"src":"2464:13:12"},"nodeType":"ModifierInvocation","src":"2464:13:12"}],"name":"_pause","nameLocation":"2438:6:12","nodeType":"FunctionDefinition","parameters":{"id":1496,"nodeType":"ParameterList","parameters":[],"src":"2444:2:12"},"returnParameters":{"id":1499,"nodeType":"ParameterList","parameters":[],"src":"2478:0:12"},"scope":1532,"src":"2429:115:12","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1525,"nodeType":"Block","src":"2724:69:12","statements":[{"expression":{"id":1518,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1516,"name":"_paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1426,"src":"2734:7:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":1517,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2744:5:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"2734:15:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1519,"nodeType":"ExpressionStatement","src":"2734:15:12"},{"eventCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1521,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2090,"src":"2773:10:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1522,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2773:12:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1520,"name":"Unpaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1424,"src":"2764:8:12","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1523,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2764:22:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1524,"nodeType":"EmitStatement","src":"2759:27:12"}]},"documentation":{"id":1511,"nodeType":"StructuredDocumentation","src":"2550:121:12","text":" @dev Returns to normal state.\n Requirements:\n - The contract must be paused."},"id":1526,"implemented":true,"kind":"function","modifiers":[{"id":1514,"kind":"modifierInvocation","modifierName":{"id":1513,"name":"whenPaused","nameLocations":["2713:10:12"],"nodeType":"IdentifierPath","referencedDeclaration":1462,"src":"2713:10:12"},"nodeType":"ModifierInvocation","src":"2713:10:12"}],"name":"_unpause","nameLocation":"2685:8:12","nodeType":"FunctionDefinition","parameters":{"id":1512,"nodeType":"ParameterList","parameters":[],"src":"2693:2:12"},"returnParameters":{"id":1515,"nodeType":"ParameterList","parameters":[],"src":"2724:0:12"},"scope":1532,"src":"2676:117:12","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":1527,"nodeType":"StructuredDocumentation","src":"2799:254:12","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":1531,"mutability":"mutable","name":"__gap","nameLocation":"3078:5:12","nodeType":"VariableDeclaration","scope":1532,"src":"3058:25:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage","typeString":"uint256[49]"},"typeName":{"baseType":{"id":1528,"name":"uint256","nodeType":"ElementaryTypeName","src":"3058:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1530,"length":{"hexValue":"3439","id":1529,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3066:2:12","typeDescriptions":{"typeIdentifier":"t_rational_49_by_1","typeString":"int_const 49"},"value":"49"},"nodeType":"ArrayTypeName","src":"3058:11:12","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage_ptr","typeString":"uint256[49]"}},"visibility":"private"}],"scope":1533,"src":"656:2430:12","usedErrors":[]}],"src":"105:2982:12"},"id":12},"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[2063],"Initializable":[1269],"ReentrancyGuardUpgradeable":[1616]},"id":1617,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1534,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"112:23:13"},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":1535,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1617,"sourceUnit":1270,"src":"136:42:13","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1537,"name":"Initializable","nameLocations":["979:13:13"],"nodeType":"IdentifierPath","referencedDeclaration":1269,"src":"979:13:13"},"id":1538,"nodeType":"InheritanceSpecifier","src":"979:13:13"}],"canonicalName":"ReentrancyGuardUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":1536,"nodeType":"StructuredDocumentation","src":"180:750:13","text":" @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `nonReentrant` guard, functions marked as\n `nonReentrant` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `nonReentrant` entry\n points to them.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."},"fullyImplemented":true,"id":1616,"linearizedBaseContracts":[1616,1269],"name":"ReentrancyGuardUpgradeable","nameLocation":"949:26:13","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":1541,"mutability":"constant","name":"_NOT_ENTERED","nameLocation":"1772:12:13","nodeType":"VariableDeclaration","scope":1616,"src":"1747:41:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1539,"name":"uint256","nodeType":"ElementaryTypeName","src":"1747:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31","id":1540,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1787:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"private"},{"constant":true,"id":1544,"mutability":"constant","name":"_ENTERED","nameLocation":"1819:8:13","nodeType":"VariableDeclaration","scope":1616,"src":"1794:37:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1542,"name":"uint256","nodeType":"ElementaryTypeName","src":"1794:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"32","id":1543,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1830:1:13","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"visibility":"private"},{"constant":false,"id":1546,"mutability":"mutable","name":"_status","nameLocation":"1854:7:13","nodeType":"VariableDeclaration","scope":1616,"src":"1838:23:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1545,"name":"uint256","nodeType":"ElementaryTypeName","src":"1838:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"body":{"id":1554,"nodeType":"Block","src":"1928:51:13","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":1551,"name":"__ReentrancyGuard_init_unchained","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1565,"src":"1938:32:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":1552,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1938:34:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1553,"nodeType":"ExpressionStatement","src":"1938:34:13"}]},"id":1555,"implemented":true,"kind":"function","modifiers":[{"id":1549,"kind":"modifierInvocation","modifierName":{"id":1548,"name":"onlyInitializing","nameLocations":["1911:16:13"],"nodeType":"IdentifierPath","referencedDeclaration":1214,"src":"1911:16:13"},"nodeType":"ModifierInvocation","src":"1911:16:13"}],"name":"__ReentrancyGuard_init","nameLocation":"1877:22:13","nodeType":"FunctionDefinition","parameters":{"id":1547,"nodeType":"ParameterList","parameters":[],"src":"1899:2:13"},"returnParameters":{"id":1550,"nodeType":"ParameterList","parameters":[],"src":"1928:0:13"},"scope":1616,"src":"1868:111:13","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1564,"nodeType":"Block","src":"2055:39:13","statements":[{"expression":{"id":1562,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1560,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1546,"src":"2065:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1561,"name":"_NOT_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1541,"src":"2075:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2065:22:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1563,"nodeType":"ExpressionStatement","src":"2065:22:13"}]},"id":1565,"implemented":true,"kind":"function","modifiers":[{"id":1558,"kind":"modifierInvocation","modifierName":{"id":1557,"name":"onlyInitializing","nameLocations":["2038:16:13"],"nodeType":"IdentifierPath","referencedDeclaration":1214,"src":"2038:16:13"},"nodeType":"ModifierInvocation","src":"2038:16:13"}],"name":"__ReentrancyGuard_init_unchained","nameLocation":"1994:32:13","nodeType":"FunctionDefinition","parameters":{"id":1556,"nodeType":"ParameterList","parameters":[],"src":"2026:2:13"},"returnParameters":{"id":1559,"nodeType":"ParameterList","parameters":[],"src":"2055:0:13"},"scope":1616,"src":"1985:109:13","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1575,"nodeType":"Block","src":"2495:79:13","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":1568,"name":"_nonReentrantBefore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1591,"src":"2505:19:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":1569,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2505:21:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1570,"nodeType":"ExpressionStatement","src":"2505:21:13"},{"id":1571,"nodeType":"PlaceholderStatement","src":"2536:1:13"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":1572,"name":"_nonReentrantAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1599,"src":"2547:18:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":1573,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2547:20:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1574,"nodeType":"ExpressionStatement","src":"2547:20:13"}]},"documentation":{"id":1566,"nodeType":"StructuredDocumentation","src":"2100:366:13","text":" @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and making it call a\n `private` function that does the actual work."},"id":1576,"name":"nonReentrant","nameLocation":"2480:12:13","nodeType":"ModifierDefinition","parameters":{"id":1567,"nodeType":"ParameterList","parameters":[],"src":"2492:2:13"},"src":"2471:103:13","virtual":false,"visibility":"internal"},{"body":{"id":1590,"nodeType":"Block","src":"2619:248:13","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1582,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1580,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1546,"src":"2712:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1581,"name":"_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1544,"src":"2723:8:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2712:19:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5265656e7472616e637947756172643a207265656e7472616e742063616c6c","id":1583,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2733:33:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619","typeString":"literal_string \"ReentrancyGuard: reentrant call\""},"value":"ReentrancyGuard: reentrant call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619","typeString":"literal_string \"ReentrancyGuard: reentrant call\""}],"id":1579,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2704:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1584,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2704:63:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1585,"nodeType":"ExpressionStatement","src":"2704:63:13"},{"expression":{"id":1588,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1586,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1546,"src":"2842:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1587,"name":"_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1544,"src":"2852:8:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2842:18:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1589,"nodeType":"ExpressionStatement","src":"2842:18:13"}]},"id":1591,"implemented":true,"kind":"function","modifiers":[],"name":"_nonReentrantBefore","nameLocation":"2589:19:13","nodeType":"FunctionDefinition","parameters":{"id":1577,"nodeType":"ParameterList","parameters":[],"src":"2608:2:13"},"returnParameters":{"id":1578,"nodeType":"ParameterList","parameters":[],"src":"2619:0:13"},"scope":1616,"src":"2580:287:13","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":1598,"nodeType":"Block","src":"2911:171:13","statements":[{"expression":{"id":1596,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1594,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1546,"src":"3053:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1595,"name":"_NOT_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1541,"src":"3063:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3053:22:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1597,"nodeType":"ExpressionStatement","src":"3053:22:13"}]},"id":1599,"implemented":true,"kind":"function","modifiers":[],"name":"_nonReentrantAfter","nameLocation":"2882:18:13","nodeType":"FunctionDefinition","parameters":{"id":1592,"nodeType":"ParameterList","parameters":[],"src":"2900:2:13"},"returnParameters":{"id":1593,"nodeType":"ParameterList","parameters":[],"src":"2911:0:13"},"scope":1616,"src":"2873:209:13","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":1609,"nodeType":"Block","src":"3325:43:13","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1607,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1605,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1546,"src":"3342:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1606,"name":"_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1544,"src":"3353:8:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3342:19:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1604,"id":1608,"nodeType":"Return","src":"3335:26:13"}]},"documentation":{"id":1600,"nodeType":"StructuredDocumentation","src":"3088:168:13","text":" @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n `nonReentrant` function in the call stack."},"id":1610,"implemented":true,"kind":"function","modifiers":[],"name":"_reentrancyGuardEntered","nameLocation":"3270:23:13","nodeType":"FunctionDefinition","parameters":{"id":1601,"nodeType":"ParameterList","parameters":[],"src":"3293:2:13"},"returnParameters":{"id":1604,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1603,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1610,"src":"3319:4:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1602,"name":"bool","nodeType":"ElementaryTypeName","src":"3319:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3318:6:13"},"scope":1616,"src":"3261:107:13","stateMutability":"view","virtual":false,"visibility":"internal"},{"constant":false,"documentation":{"id":1611,"nodeType":"StructuredDocumentation","src":"3374:254:13","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":1615,"mutability":"mutable","name":"__gap","nameLocation":"3653:5:13","nodeType":"VariableDeclaration","scope":1616,"src":"3633:25:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage","typeString":"uint256[49]"},"typeName":{"baseType":{"id":1612,"name":"uint256","nodeType":"ElementaryTypeName","src":"3633:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1614,"length":{"hexValue":"3439","id":1613,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3641:2:13","typeDescriptions":{"typeIdentifier":"t_rational_49_by_1","typeString":"int_const 49"},"value":"49"},"nodeType":"ArrayTypeName","src":"3633:11:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage_ptr","typeString":"uint256[49]"}},"visibility":"private"}],"scope":1617,"src":"931:2730:13","usedErrors":[]}],"src":"112:3550:13"},"id":13},"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol","exportedSymbols":{"IERC20Upgradeable":[1694]},"id":1695,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1618,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"106:23:14"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20Upgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":1619,"nodeType":"StructuredDocumentation","src":"131:70:14","text":" @dev Interface of the ERC20 standard as defined in the EIP."},"fullyImplemented":false,"id":1694,"linearizedBaseContracts":[1694],"name":"IERC20Upgradeable","nameLocation":"212:17:14","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":1620,"nodeType":"StructuredDocumentation","src":"236:158:14","text":" @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":1628,"name":"Transfer","nameLocation":"405:8:14","nodeType":"EventDefinition","parameters":{"id":1627,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1622,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"430:4:14","nodeType":"VariableDeclaration","scope":1628,"src":"414:20:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1621,"name":"address","nodeType":"ElementaryTypeName","src":"414:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1624,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"452:2:14","nodeType":"VariableDeclaration","scope":1628,"src":"436:18:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1623,"name":"address","nodeType":"ElementaryTypeName","src":"436:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1626,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"464:5:14","nodeType":"VariableDeclaration","scope":1628,"src":"456:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1625,"name":"uint256","nodeType":"ElementaryTypeName","src":"456:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"413:57:14"},"src":"399:72:14"},{"anonymous":false,"documentation":{"id":1629,"nodeType":"StructuredDocumentation","src":"477:148:14","text":" @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":1637,"name":"Approval","nameLocation":"636:8:14","nodeType":"EventDefinition","parameters":{"id":1636,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1631,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"661:5:14","nodeType":"VariableDeclaration","scope":1637,"src":"645:21:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1630,"name":"address","nodeType":"ElementaryTypeName","src":"645:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1633,"indexed":true,"mutability":"mutable","name":"spender","nameLocation":"684:7:14","nodeType":"VariableDeclaration","scope":1637,"src":"668:23:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1632,"name":"address","nodeType":"ElementaryTypeName","src":"668:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1635,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"701:5:14","nodeType":"VariableDeclaration","scope":1637,"src":"693:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1634,"name":"uint256","nodeType":"ElementaryTypeName","src":"693:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"644:63:14"},"src":"630:78:14"},{"documentation":{"id":1638,"nodeType":"StructuredDocumentation","src":"714:66:14","text":" @dev Returns the amount of tokens in existence."},"functionSelector":"18160ddd","id":1643,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"794:11:14","nodeType":"FunctionDefinition","parameters":{"id":1639,"nodeType":"ParameterList","parameters":[],"src":"805:2:14"},"returnParameters":{"id":1642,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1641,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1643,"src":"831:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1640,"name":"uint256","nodeType":"ElementaryTypeName","src":"831:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"830:9:14"},"scope":1694,"src":"785:55:14","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1644,"nodeType":"StructuredDocumentation","src":"846:72:14","text":" @dev Returns the amount of tokens owned by `account`."},"functionSelector":"70a08231","id":1651,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"932:9:14","nodeType":"FunctionDefinition","parameters":{"id":1647,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1646,"mutability":"mutable","name":"account","nameLocation":"950:7:14","nodeType":"VariableDeclaration","scope":1651,"src":"942:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1645,"name":"address","nodeType":"ElementaryTypeName","src":"942:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"941:17:14"},"returnParameters":{"id":1650,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1649,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1651,"src":"982:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1648,"name":"uint256","nodeType":"ElementaryTypeName","src":"982:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"981:9:14"},"scope":1694,"src":"923:68:14","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1652,"nodeType":"StructuredDocumentation","src":"997:202:14","text":" @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"a9059cbb","id":1661,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"1213:8:14","nodeType":"FunctionDefinition","parameters":{"id":1657,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1654,"mutability":"mutable","name":"to","nameLocation":"1230:2:14","nodeType":"VariableDeclaration","scope":1661,"src":"1222:10:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1653,"name":"address","nodeType":"ElementaryTypeName","src":"1222:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1656,"mutability":"mutable","name":"amount","nameLocation":"1242:6:14","nodeType":"VariableDeclaration","scope":1661,"src":"1234:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1655,"name":"uint256","nodeType":"ElementaryTypeName","src":"1234:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1221:28:14"},"returnParameters":{"id":1660,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1659,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1661,"src":"1268:4:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1658,"name":"bool","nodeType":"ElementaryTypeName","src":"1268:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1267:6:14"},"scope":1694,"src":"1204:70:14","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1662,"nodeType":"StructuredDocumentation","src":"1280:264:14","text":" @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."},"functionSelector":"dd62ed3e","id":1671,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"1558:9:14","nodeType":"FunctionDefinition","parameters":{"id":1667,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1664,"mutability":"mutable","name":"owner","nameLocation":"1576:5:14","nodeType":"VariableDeclaration","scope":1671,"src":"1568:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1663,"name":"address","nodeType":"ElementaryTypeName","src":"1568:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1666,"mutability":"mutable","name":"spender","nameLocation":"1591:7:14","nodeType":"VariableDeclaration","scope":1671,"src":"1583:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1665,"name":"address","nodeType":"ElementaryTypeName","src":"1583:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1567:32:14"},"returnParameters":{"id":1670,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1669,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1671,"src":"1623:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1668,"name":"uint256","nodeType":"ElementaryTypeName","src":"1623:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1622:9:14"},"scope":1694,"src":"1549:83:14","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1672,"nodeType":"StructuredDocumentation","src":"1638:642:14","text":" @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":1681,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"2294:7:14","nodeType":"FunctionDefinition","parameters":{"id":1677,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1674,"mutability":"mutable","name":"spender","nameLocation":"2310:7:14","nodeType":"VariableDeclaration","scope":1681,"src":"2302:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1673,"name":"address","nodeType":"ElementaryTypeName","src":"2302:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1676,"mutability":"mutable","name":"amount","nameLocation":"2327:6:14","nodeType":"VariableDeclaration","scope":1681,"src":"2319:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1675,"name":"uint256","nodeType":"ElementaryTypeName","src":"2319:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2301:33:14"},"returnParameters":{"id":1680,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1679,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1681,"src":"2353:4:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1678,"name":"bool","nodeType":"ElementaryTypeName","src":"2353:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2352:6:14"},"scope":1694,"src":"2285:74:14","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1682,"nodeType":"StructuredDocumentation","src":"2365:287:14","text":" @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":1693,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"2666:12:14","nodeType":"FunctionDefinition","parameters":{"id":1689,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1684,"mutability":"mutable","name":"from","nameLocation":"2687:4:14","nodeType":"VariableDeclaration","scope":1693,"src":"2679:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1683,"name":"address","nodeType":"ElementaryTypeName","src":"2679:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1686,"mutability":"mutable","name":"to","nameLocation":"2701:2:14","nodeType":"VariableDeclaration","scope":1693,"src":"2693:10:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1685,"name":"address","nodeType":"ElementaryTypeName","src":"2693:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1688,"mutability":"mutable","name":"amount","nameLocation":"2713:6:14","nodeType":"VariableDeclaration","scope":1693,"src":"2705:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1687,"name":"uint256","nodeType":"ElementaryTypeName","src":"2705:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2678:42:14"},"returnParameters":{"id":1692,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1691,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1693,"src":"2739:4:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1690,"name":"bool","nodeType":"ElementaryTypeName","src":"2739:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2738:6:14"},"scope":1694,"src":"2657:88:14","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1695,"src":"202:2545:14","usedErrors":[]}],"src":"106:2642:14"},"id":14},"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol","exportedSymbols":{"IERC20PermitUpgradeable":[1730]},"id":1731,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1696,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"123:23:15"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20PermitUpgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":1697,"nodeType":"StructuredDocumentation","src":"148:480:15","text":" @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all."},"fullyImplemented":false,"id":1730,"linearizedBaseContracts":[1730],"name":"IERC20PermitUpgradeable","nameLocation":"639:23:15","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1698,"nodeType":"StructuredDocumentation","src":"669:792:15","text":" @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n given ``owner``'s signed approval.\n IMPORTANT: The same issues {IERC20-approve} has related to transaction\n ordering also apply here.\n Emits an {Approval} event.\n Requirements:\n - `spender` cannot be the zero address.\n - `deadline` must be a timestamp in the future.\n - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n over the EIP712-formatted function arguments.\n - the signature must use ``owner``'s current nonce (see {nonces}).\n For more information on the signature format, see the\n https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n section]."},"functionSelector":"d505accf","id":1715,"implemented":false,"kind":"function","modifiers":[],"name":"permit","nameLocation":"1475:6:15","nodeType":"FunctionDefinition","parameters":{"id":1713,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1700,"mutability":"mutable","name":"owner","nameLocation":"1499:5:15","nodeType":"VariableDeclaration","scope":1715,"src":"1491:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1699,"name":"address","nodeType":"ElementaryTypeName","src":"1491:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1702,"mutability":"mutable","name":"spender","nameLocation":"1522:7:15","nodeType":"VariableDeclaration","scope":1715,"src":"1514:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1701,"name":"address","nodeType":"ElementaryTypeName","src":"1514:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1704,"mutability":"mutable","name":"value","nameLocation":"1547:5:15","nodeType":"VariableDeclaration","scope":1715,"src":"1539:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1703,"name":"uint256","nodeType":"ElementaryTypeName","src":"1539:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1706,"mutability":"mutable","name":"deadline","nameLocation":"1570:8:15","nodeType":"VariableDeclaration","scope":1715,"src":"1562:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1705,"name":"uint256","nodeType":"ElementaryTypeName","src":"1562:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1708,"mutability":"mutable","name":"v","nameLocation":"1594:1:15","nodeType":"VariableDeclaration","scope":1715,"src":"1588:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1707,"name":"uint8","nodeType":"ElementaryTypeName","src":"1588:5:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":1710,"mutability":"mutable","name":"r","nameLocation":"1613:1:15","nodeType":"VariableDeclaration","scope":1715,"src":"1605:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1709,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1605:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1712,"mutability":"mutable","name":"s","nameLocation":"1632:1:15","nodeType":"VariableDeclaration","scope":1715,"src":"1624:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1711,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1624:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1481:158:15"},"returnParameters":{"id":1714,"nodeType":"ParameterList","parameters":[],"src":"1648:0:15"},"scope":1730,"src":"1466:183:15","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1716,"nodeType":"StructuredDocumentation","src":"1655:294:15","text":" @dev Returns the current nonce for `owner`. This value must be\n included whenever a signature is generated for {permit}.\n Every successful call to {permit} increases ``owner``'s nonce by one. This\n prevents a signature from being used multiple times."},"functionSelector":"7ecebe00","id":1723,"implemented":false,"kind":"function","modifiers":[],"name":"nonces","nameLocation":"1963:6:15","nodeType":"FunctionDefinition","parameters":{"id":1719,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1718,"mutability":"mutable","name":"owner","nameLocation":"1978:5:15","nodeType":"VariableDeclaration","scope":1723,"src":"1970:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1717,"name":"address","nodeType":"ElementaryTypeName","src":"1970:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1969:15:15"},"returnParameters":{"id":1722,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1721,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1723,"src":"2008:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1720,"name":"uint256","nodeType":"ElementaryTypeName","src":"2008:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2007:9:15"},"scope":1730,"src":"1954:63:15","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1724,"nodeType":"StructuredDocumentation","src":"2023:128:15","text":" @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."},"functionSelector":"3644e515","id":1729,"implemented":false,"kind":"function","modifiers":[],"name":"DOMAIN_SEPARATOR","nameLocation":"2218:16:15","nodeType":"FunctionDefinition","parameters":{"id":1725,"nodeType":"ParameterList","parameters":[],"src":"2234:2:15"},"returnParameters":{"id":1728,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1727,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1729,"src":"2260:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1726,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2260:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2259:9:15"},"scope":1730,"src":"2209:60:15","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1731,"src":"629:1642:15","usedErrors":[]}],"src":"123:2149:15"},"id":15},"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol","exportedSymbols":{"IERC20PermitUpgradeable":[1730]},"id":1734,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1732,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"129:23:16"},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol","file":"./IERC20PermitUpgradeable.sol","id":1733,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1734,"sourceUnit":1731,"src":"219:39:16","symbolAliases":[],"unitAlias":""}],"src":"129:130:16"},"id":16},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[2063]},"id":2064,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1735,"literals":["solidity","^","0.8",".1"],"nodeType":"PragmaDirective","src":"101:23:17"},{"abstract":false,"baseContracts":[],"canonicalName":"AddressUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":1736,"nodeType":"StructuredDocumentation","src":"126:67:17","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":2063,"linearizedBaseContracts":[2063],"name":"AddressUpgradeable","nameLocation":"202:18:17","nodeType":"ContractDefinition","nodes":[{"body":{"id":1750,"nodeType":"Block","src":"1489:254:17","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1748,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":1744,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1739,"src":"1713:7:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1745,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1721:4:17","memberName":"code","nodeType":"MemberAccess","src":"1713:12:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1746,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1726:6:17","memberName":"length","nodeType":"MemberAccess","src":"1713:19:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1747,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1735:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1713:23:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1743,"id":1749,"nodeType":"Return","src":"1706:30:17"}]},"documentation":{"id":1737,"nodeType":"StructuredDocumentation","src":"227:1191:17","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n Furthermore, `isContract` will also return true if the target contract within\n the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n which only has an effect at the end of a transaction.\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"id":1751,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"1432:10:17","nodeType":"FunctionDefinition","parameters":{"id":1740,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1739,"mutability":"mutable","name":"account","nameLocation":"1451:7:17","nodeType":"VariableDeclaration","scope":1751,"src":"1443:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1738,"name":"address","nodeType":"ElementaryTypeName","src":"1443:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1442:17:17"},"returnParameters":{"id":1743,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1742,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1751,"src":"1483:4:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1741,"name":"bool","nodeType":"ElementaryTypeName","src":"1483:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1482:6:17"},"scope":2063,"src":"1423:320:17","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1784,"nodeType":"Block","src":"2729:241:17","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1766,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1762,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2755:4:17","typeDescriptions":{"typeIdentifier":"t_contract$_AddressUpgradeable_$2063","typeString":"library AddressUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_AddressUpgradeable_$2063","typeString":"library AddressUpgradeable"}],"id":1761,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2747:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1760,"name":"address","nodeType":"ElementaryTypeName","src":"2747:7:17","typeDescriptions":{}}},"id":1763,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2747:13:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1764,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2761:7:17","memberName":"balance","nodeType":"MemberAccess","src":"2747:21:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1765,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1756,"src":"2772:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2747:31:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":1767,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2780:31:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":1759,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2739:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1768,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2739:73:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1769,"nodeType":"ExpressionStatement","src":"2739:73:17"},{"assignments":[1771,null],"declarations":[{"constant":false,"id":1771,"mutability":"mutable","name":"success","nameLocation":"2829:7:17","nodeType":"VariableDeclaration","scope":1784,"src":"2824:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1770,"name":"bool","nodeType":"ElementaryTypeName","src":"2824:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":1778,"initialValue":{"arguments":[{"hexValue":"","id":1776,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2872:2:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":1772,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1754,"src":"2842:9:17","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":1773,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2852:4:17","memberName":"call","nodeType":"MemberAccess","src":"2842:14:17","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1775,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":1774,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1756,"src":"2864:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2842:29:17","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1777,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2842:33:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2823:52:17"},{"expression":{"arguments":[{"id":1780,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1771,"src":"2893:7:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":1781,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2902:60:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":1779,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2885:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1782,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2885:78:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1783,"nodeType":"ExpressionStatement","src":"2885:78:17"}]},"documentation":{"id":1752,"nodeType":"StructuredDocumentation","src":"1749:904:17","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":1785,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2667:9:17","nodeType":"FunctionDefinition","parameters":{"id":1757,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1754,"mutability":"mutable","name":"recipient","nameLocation":"2693:9:17","nodeType":"VariableDeclaration","scope":1785,"src":"2677:25:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":1753,"name":"address","nodeType":"ElementaryTypeName","src":"2677:15:17","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":1756,"mutability":"mutable","name":"amount","nameLocation":"2712:6:17","nodeType":"VariableDeclaration","scope":1785,"src":"2704:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1755,"name":"uint256","nodeType":"ElementaryTypeName","src":"2704:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2676:43:17"},"returnParameters":{"id":1758,"nodeType":"ParameterList","parameters":[],"src":"2729:0:17"},"scope":2063,"src":"2658:312:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1802,"nodeType":"Block","src":"3801:96:17","statements":[{"expression":{"arguments":[{"id":1796,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1788,"src":"3840:6:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1797,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1790,"src":"3848:4:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":1798,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3854:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":1799,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3857:32:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":1795,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1843,1887],"referencedDeclaration":1887,"src":"3818:21:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1800,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3818:72:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1794,"id":1801,"nodeType":"Return","src":"3811:79:17"}]},"documentation":{"id":1786,"nodeType":"StructuredDocumentation","src":"2976:731:17","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":1803,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3721:12:17","nodeType":"FunctionDefinition","parameters":{"id":1791,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1788,"mutability":"mutable","name":"target","nameLocation":"3742:6:17","nodeType":"VariableDeclaration","scope":1803,"src":"3734:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1787,"name":"address","nodeType":"ElementaryTypeName","src":"3734:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1790,"mutability":"mutable","name":"data","nameLocation":"3763:4:17","nodeType":"VariableDeclaration","scope":1803,"src":"3750:17:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1789,"name":"bytes","nodeType":"ElementaryTypeName","src":"3750:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3733:35:17"},"returnParameters":{"id":1794,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1793,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1803,"src":"3787:12:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1792,"name":"bytes","nodeType":"ElementaryTypeName","src":"3787:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3786:14:17"},"scope":2063,"src":"3712:185:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1822,"nodeType":"Block","src":"4266:76:17","statements":[{"expression":{"arguments":[{"id":1816,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1806,"src":"4305:6:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1817,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1808,"src":"4313:4:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":1818,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4319:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":1819,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1810,"src":"4322:12:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1815,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1843,1887],"referencedDeclaration":1887,"src":"4283:21:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1820,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4283:52:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1814,"id":1821,"nodeType":"Return","src":"4276:59:17"}]},"documentation":{"id":1804,"nodeType":"StructuredDocumentation","src":"3903:211:17","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":1823,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"4128:12:17","nodeType":"FunctionDefinition","parameters":{"id":1811,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1806,"mutability":"mutable","name":"target","nameLocation":"4158:6:17","nodeType":"VariableDeclaration","scope":1823,"src":"4150:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1805,"name":"address","nodeType":"ElementaryTypeName","src":"4150:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1808,"mutability":"mutable","name":"data","nameLocation":"4187:4:17","nodeType":"VariableDeclaration","scope":1823,"src":"4174:17:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1807,"name":"bytes","nodeType":"ElementaryTypeName","src":"4174:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1810,"mutability":"mutable","name":"errorMessage","nameLocation":"4215:12:17","nodeType":"VariableDeclaration","scope":1823,"src":"4201:26:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1809,"name":"string","nodeType":"ElementaryTypeName","src":"4201:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4140:93:17"},"returnParameters":{"id":1814,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1813,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1823,"src":"4252:12:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1812,"name":"bytes","nodeType":"ElementaryTypeName","src":"4252:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4251:14:17"},"scope":2063,"src":"4119:223:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1842,"nodeType":"Block","src":"4817:111:17","statements":[{"expression":{"arguments":[{"id":1836,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1826,"src":"4856:6:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1837,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1828,"src":"4864:4:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1838,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1830,"src":"4870:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":1839,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4877:43:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":1835,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1843,1887],"referencedDeclaration":1887,"src":"4834:21:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1840,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4834:87:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1834,"id":1841,"nodeType":"Return","src":"4827:94:17"}]},"documentation":{"id":1824,"nodeType":"StructuredDocumentation","src":"4348:351:17","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":1843,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4713:21:17","nodeType":"FunctionDefinition","parameters":{"id":1831,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1826,"mutability":"mutable","name":"target","nameLocation":"4743:6:17","nodeType":"VariableDeclaration","scope":1843,"src":"4735:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1825,"name":"address","nodeType":"ElementaryTypeName","src":"4735:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1828,"mutability":"mutable","name":"data","nameLocation":"4764:4:17","nodeType":"VariableDeclaration","scope":1843,"src":"4751:17:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1827,"name":"bytes","nodeType":"ElementaryTypeName","src":"4751:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1830,"mutability":"mutable","name":"value","nameLocation":"4778:5:17","nodeType":"VariableDeclaration","scope":1843,"src":"4770:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1829,"name":"uint256","nodeType":"ElementaryTypeName","src":"4770:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4734:50:17"},"returnParameters":{"id":1834,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1833,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1843,"src":"4803:12:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1832,"name":"bytes","nodeType":"ElementaryTypeName","src":"4803:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4802:14:17"},"scope":2063,"src":"4704:224:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1886,"nodeType":"Block","src":"5355:267:17","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1864,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1860,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5381:4:17","typeDescriptions":{"typeIdentifier":"t_contract$_AddressUpgradeable_$2063","typeString":"library AddressUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_AddressUpgradeable_$2063","typeString":"library AddressUpgradeable"}],"id":1859,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5373:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1858,"name":"address","nodeType":"ElementaryTypeName","src":"5373:7:17","typeDescriptions":{}}},"id":1861,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5373:13:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1862,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5387:7:17","memberName":"balance","nodeType":"MemberAccess","src":"5373:21:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1863,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1850,"src":"5398:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5373:30:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":1865,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5405:40:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":1857,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5365:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1866,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5365:81:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1867,"nodeType":"ExpressionStatement","src":"5365:81:17"},{"assignments":[1869,1871],"declarations":[{"constant":false,"id":1869,"mutability":"mutable","name":"success","nameLocation":"5462:7:17","nodeType":"VariableDeclaration","scope":1886,"src":"5457:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1868,"name":"bool","nodeType":"ElementaryTypeName","src":"5457:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1871,"mutability":"mutable","name":"returndata","nameLocation":"5484:10:17","nodeType":"VariableDeclaration","scope":1886,"src":"5471:23:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1870,"name":"bytes","nodeType":"ElementaryTypeName","src":"5471:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1878,"initialValue":{"arguments":[{"id":1876,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1848,"src":"5524:4:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1872,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1846,"src":"5498:6:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1873,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5505:4:17","memberName":"call","nodeType":"MemberAccess","src":"5498:11:17","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1875,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":1874,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1850,"src":"5517:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5498:25:17","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1877,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5498:31:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5456:73:17"},{"expression":{"arguments":[{"id":1880,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1846,"src":"5573:6:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1881,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1869,"src":"5581:7:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1882,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1871,"src":"5590:10:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1883,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1852,"src":"5602:12:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1879,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2018,"src":"5546:26:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1884,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5546:69:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1856,"id":1885,"nodeType":"Return","src":"5539:76:17"}]},"documentation":{"id":1844,"nodeType":"StructuredDocumentation","src":"4934:237:17","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":1887,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"5185:21:17","nodeType":"FunctionDefinition","parameters":{"id":1853,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1846,"mutability":"mutable","name":"target","nameLocation":"5224:6:17","nodeType":"VariableDeclaration","scope":1887,"src":"5216:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1845,"name":"address","nodeType":"ElementaryTypeName","src":"5216:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1848,"mutability":"mutable","name":"data","nameLocation":"5253:4:17","nodeType":"VariableDeclaration","scope":1887,"src":"5240:17:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1847,"name":"bytes","nodeType":"ElementaryTypeName","src":"5240:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1850,"mutability":"mutable","name":"value","nameLocation":"5275:5:17","nodeType":"VariableDeclaration","scope":1887,"src":"5267:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1849,"name":"uint256","nodeType":"ElementaryTypeName","src":"5267:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1852,"mutability":"mutable","name":"errorMessage","nameLocation":"5304:12:17","nodeType":"VariableDeclaration","scope":1887,"src":"5290:26:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1851,"name":"string","nodeType":"ElementaryTypeName","src":"5290:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5206:116:17"},"returnParameters":{"id":1856,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1855,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1887,"src":"5341:12:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1854,"name":"bytes","nodeType":"ElementaryTypeName","src":"5341:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5340:14:17"},"scope":2063,"src":"5176:446:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1903,"nodeType":"Block","src":"5899:97:17","statements":[{"expression":{"arguments":[{"id":1898,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1890,"src":"5935:6:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1899,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1892,"src":"5943:4:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":1900,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5949:39:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":1897,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[1904,1933],"referencedDeclaration":1933,"src":"5916:18:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":1901,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5916:73:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1896,"id":1902,"nodeType":"Return","src":"5909:80:17"}]},"documentation":{"id":1888,"nodeType":"StructuredDocumentation","src":"5628:166:17","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":1904,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5808:18:17","nodeType":"FunctionDefinition","parameters":{"id":1893,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1890,"mutability":"mutable","name":"target","nameLocation":"5835:6:17","nodeType":"VariableDeclaration","scope":1904,"src":"5827:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1889,"name":"address","nodeType":"ElementaryTypeName","src":"5827:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1892,"mutability":"mutable","name":"data","nameLocation":"5856:4:17","nodeType":"VariableDeclaration","scope":1904,"src":"5843:17:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1891,"name":"bytes","nodeType":"ElementaryTypeName","src":"5843:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5826:35:17"},"returnParameters":{"id":1896,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1895,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1904,"src":"5885:12:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1894,"name":"bytes","nodeType":"ElementaryTypeName","src":"5885:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5884:14:17"},"scope":2063,"src":"5799:197:17","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1932,"nodeType":"Block","src":"6338:168:17","statements":[{"assignments":[1917,1919],"declarations":[{"constant":false,"id":1917,"mutability":"mutable","name":"success","nameLocation":"6354:7:17","nodeType":"VariableDeclaration","scope":1932,"src":"6349:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1916,"name":"bool","nodeType":"ElementaryTypeName","src":"6349:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1919,"mutability":"mutable","name":"returndata","nameLocation":"6376:10:17","nodeType":"VariableDeclaration","scope":1932,"src":"6363:23:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1918,"name":"bytes","nodeType":"ElementaryTypeName","src":"6363:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1924,"initialValue":{"arguments":[{"id":1922,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1909,"src":"6408:4:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1920,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1907,"src":"6390:6:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1921,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6397:10:17","memberName":"staticcall","nodeType":"MemberAccess","src":"6390:17:17","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":1923,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6390:23:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6348:65:17"},{"expression":{"arguments":[{"id":1926,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1907,"src":"6457:6:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1927,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1917,"src":"6465:7:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1928,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1919,"src":"6474:10:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1929,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1911,"src":"6486:12:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1925,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2018,"src":"6430:26:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1930,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6430:69:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1915,"id":1931,"nodeType":"Return","src":"6423:76:17"}]},"documentation":{"id":1905,"nodeType":"StructuredDocumentation","src":"6002:173:17","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":1933,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"6189:18:17","nodeType":"FunctionDefinition","parameters":{"id":1912,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1907,"mutability":"mutable","name":"target","nameLocation":"6225:6:17","nodeType":"VariableDeclaration","scope":1933,"src":"6217:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1906,"name":"address","nodeType":"ElementaryTypeName","src":"6217:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1909,"mutability":"mutable","name":"data","nameLocation":"6254:4:17","nodeType":"VariableDeclaration","scope":1933,"src":"6241:17:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1908,"name":"bytes","nodeType":"ElementaryTypeName","src":"6241:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1911,"mutability":"mutable","name":"errorMessage","nameLocation":"6282:12:17","nodeType":"VariableDeclaration","scope":1933,"src":"6268:26:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1910,"name":"string","nodeType":"ElementaryTypeName","src":"6268:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6207:93:17"},"returnParameters":{"id":1915,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1914,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1933,"src":"6324:12:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1913,"name":"bytes","nodeType":"ElementaryTypeName","src":"6324:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6323:14:17"},"scope":2063,"src":"6180:326:17","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1949,"nodeType":"Block","src":"6782:101:17","statements":[{"expression":{"arguments":[{"id":1944,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1936,"src":"6820:6:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1945,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1938,"src":"6828:4:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564","id":1946,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6834:41:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""},"value":"Address: low-level delegate call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""}],"id":1943,"name":"functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[1950,1979],"referencedDeclaration":1979,"src":"6799:20:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":1947,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6799:77:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1942,"id":1948,"nodeType":"Return","src":"6792:84:17"}]},"documentation":{"id":1934,"nodeType":"StructuredDocumentation","src":"6512:168:17","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":1950,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6694:20:17","nodeType":"FunctionDefinition","parameters":{"id":1939,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1936,"mutability":"mutable","name":"target","nameLocation":"6723:6:17","nodeType":"VariableDeclaration","scope":1950,"src":"6715:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1935,"name":"address","nodeType":"ElementaryTypeName","src":"6715:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1938,"mutability":"mutable","name":"data","nameLocation":"6744:4:17","nodeType":"VariableDeclaration","scope":1950,"src":"6731:17:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1937,"name":"bytes","nodeType":"ElementaryTypeName","src":"6731:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6714:35:17"},"returnParameters":{"id":1942,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1941,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1950,"src":"6768:12:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1940,"name":"bytes","nodeType":"ElementaryTypeName","src":"6768:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6767:14:17"},"scope":2063,"src":"6685:198:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1978,"nodeType":"Block","src":"7224:170:17","statements":[{"assignments":[1963,1965],"declarations":[{"constant":false,"id":1963,"mutability":"mutable","name":"success","nameLocation":"7240:7:17","nodeType":"VariableDeclaration","scope":1978,"src":"7235:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1962,"name":"bool","nodeType":"ElementaryTypeName","src":"7235:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1965,"mutability":"mutable","name":"returndata","nameLocation":"7262:10:17","nodeType":"VariableDeclaration","scope":1978,"src":"7249:23:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1964,"name":"bytes","nodeType":"ElementaryTypeName","src":"7249:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1970,"initialValue":{"arguments":[{"id":1968,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1955,"src":"7296:4:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1966,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1953,"src":"7276:6:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1967,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7283:12:17","memberName":"delegatecall","nodeType":"MemberAccess","src":"7276:19:17","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":1969,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7276:25:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"7234:67:17"},{"expression":{"arguments":[{"id":1972,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1953,"src":"7345:6:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1973,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1963,"src":"7353:7:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1974,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1965,"src":"7362:10:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1975,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1957,"src":"7374:12:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1971,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2018,"src":"7318:26:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1976,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7318:69:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1961,"id":1977,"nodeType":"Return","src":"7311:76:17"}]},"documentation":{"id":1951,"nodeType":"StructuredDocumentation","src":"6889:175:17","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":1979,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"7078:20:17","nodeType":"FunctionDefinition","parameters":{"id":1958,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1953,"mutability":"mutable","name":"target","nameLocation":"7116:6:17","nodeType":"VariableDeclaration","scope":1979,"src":"7108:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1952,"name":"address","nodeType":"ElementaryTypeName","src":"7108:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1955,"mutability":"mutable","name":"data","nameLocation":"7145:4:17","nodeType":"VariableDeclaration","scope":1979,"src":"7132:17:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1954,"name":"bytes","nodeType":"ElementaryTypeName","src":"7132:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1957,"mutability":"mutable","name":"errorMessage","nameLocation":"7173:12:17","nodeType":"VariableDeclaration","scope":1979,"src":"7159:26:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1956,"name":"string","nodeType":"ElementaryTypeName","src":"7159:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7098:93:17"},"returnParameters":{"id":1961,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1960,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1979,"src":"7210:12:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1959,"name":"bytes","nodeType":"ElementaryTypeName","src":"7210:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7209:14:17"},"scope":2063,"src":"7069:325:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2017,"nodeType":"Block","src":"7876:434:17","statements":[{"condition":{"id":1993,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1984,"src":"7890:7:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2015,"nodeType":"Block","src":"8246:58:17","statements":[{"expression":{"arguments":[{"id":2011,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1986,"src":"8268:10:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2012,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1988,"src":"8280:12:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2010,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2062,"src":"8260:7:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":2013,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8260:33:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2014,"nodeType":"ExpressionStatement","src":"8260:33:17"}]},"id":2016,"nodeType":"IfStatement","src":"7886:418:17","trueBody":{"id":2009,"nodeType":"Block","src":"7899:341:17","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1997,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1994,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1986,"src":"7917:10:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1995,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7928:6:17","memberName":"length","nodeType":"MemberAccess","src":"7917:17:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1996,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7938:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7917:22:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2006,"nodeType":"IfStatement","src":"7913:286:17","trueBody":{"id":2005,"nodeType":"Block","src":"7941:258:17","statements":[{"expression":{"arguments":[{"arguments":[{"id":2000,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1982,"src":"8143:6:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1999,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1751,"src":"8132:10:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":2001,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8132:18:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":2002,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8152:31:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":1998,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8124:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2003,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8124:60:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2004,"nodeType":"ExpressionStatement","src":"8124:60:17"}]}},{"expression":{"id":2007,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1986,"src":"8219:10:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1992,"id":2008,"nodeType":"Return","src":"8212:17:17"}]}}]},"documentation":{"id":1980,"nodeType":"StructuredDocumentation","src":"7400:277:17","text":" @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"},"id":2018,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"7691:26:17","nodeType":"FunctionDefinition","parameters":{"id":1989,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1982,"mutability":"mutable","name":"target","nameLocation":"7735:6:17","nodeType":"VariableDeclaration","scope":2018,"src":"7727:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1981,"name":"address","nodeType":"ElementaryTypeName","src":"7727:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1984,"mutability":"mutable","name":"success","nameLocation":"7756:7:17","nodeType":"VariableDeclaration","scope":2018,"src":"7751:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1983,"name":"bool","nodeType":"ElementaryTypeName","src":"7751:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1986,"mutability":"mutable","name":"returndata","nameLocation":"7786:10:17","nodeType":"VariableDeclaration","scope":2018,"src":"7773:23:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1985,"name":"bytes","nodeType":"ElementaryTypeName","src":"7773:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1988,"mutability":"mutable","name":"errorMessage","nameLocation":"7820:12:17","nodeType":"VariableDeclaration","scope":2018,"src":"7806:26:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1987,"name":"string","nodeType":"ElementaryTypeName","src":"7806:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7717:121:17"},"returnParameters":{"id":1992,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1991,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2018,"src":"7862:12:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1990,"name":"bytes","nodeType":"ElementaryTypeName","src":"7862:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7861:14:17"},"scope":2063,"src":"7682:628:17","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2041,"nodeType":"Block","src":"8691:135:17","statements":[{"condition":{"id":2030,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2021,"src":"8705:7:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2039,"nodeType":"Block","src":"8762:58:17","statements":[{"expression":{"arguments":[{"id":2035,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2023,"src":"8784:10:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2036,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2025,"src":"8796:12:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2034,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2062,"src":"8776:7:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":2037,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8776:33:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2038,"nodeType":"ExpressionStatement","src":"8776:33:17"}]},"id":2040,"nodeType":"IfStatement","src":"8701:119:17","trueBody":{"id":2033,"nodeType":"Block","src":"8714:42:17","statements":[{"expression":{"id":2031,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2023,"src":"8735:10:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2029,"id":2032,"nodeType":"Return","src":"8728:17:17"}]}}]},"documentation":{"id":2019,"nodeType":"StructuredDocumentation","src":"8316:210:17","text":" @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"},"id":2042,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"8540:16:17","nodeType":"FunctionDefinition","parameters":{"id":2026,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2021,"mutability":"mutable","name":"success","nameLocation":"8571:7:17","nodeType":"VariableDeclaration","scope":2042,"src":"8566:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2020,"name":"bool","nodeType":"ElementaryTypeName","src":"8566:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2023,"mutability":"mutable","name":"returndata","nameLocation":"8601:10:17","nodeType":"VariableDeclaration","scope":2042,"src":"8588:23:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2022,"name":"bytes","nodeType":"ElementaryTypeName","src":"8588:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2025,"mutability":"mutable","name":"errorMessage","nameLocation":"8635:12:17","nodeType":"VariableDeclaration","scope":2042,"src":"8621:26:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2024,"name":"string","nodeType":"ElementaryTypeName","src":"8621:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8556:97:17"},"returnParameters":{"id":2029,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2028,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2042,"src":"8677:12:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2027,"name":"bytes","nodeType":"ElementaryTypeName","src":"8677:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8676:14:17"},"scope":2063,"src":"8531:295:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2061,"nodeType":"Block","src":"8915:457:17","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2052,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2049,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2044,"src":"8991:10:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2050,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9002:6:17","memberName":"length","nodeType":"MemberAccess","src":"8991:17:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2051,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9011:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8991:21:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2059,"nodeType":"Block","src":"9321:45:17","statements":[{"expression":{"arguments":[{"id":2056,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2046,"src":"9342:12:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2055,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"9335:6:17","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":2057,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9335:20:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2058,"nodeType":"ExpressionStatement","src":"9335:20:17"}]},"id":2060,"nodeType":"IfStatement","src":"8987:379:17","trueBody":{"id":2054,"nodeType":"Block","src":"9014:301:17","statements":[{"AST":{"nodeType":"YulBlock","src":"9172:133:17","statements":[{"nodeType":"YulVariableDeclaration","src":"9190:40:17","value":{"arguments":[{"name":"returndata","nodeType":"YulIdentifier","src":"9219:10:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9213:5:17"},"nodeType":"YulFunctionCall","src":"9213:17:17"},"variables":[{"name":"returndata_size","nodeType":"YulTypedName","src":"9194:15:17","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9258:2:17","type":"","value":"32"},{"name":"returndata","nodeType":"YulIdentifier","src":"9262:10:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9254:3:17"},"nodeType":"YulFunctionCall","src":"9254:19:17"},{"name":"returndata_size","nodeType":"YulIdentifier","src":"9275:15:17"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9247:6:17"},"nodeType":"YulFunctionCall","src":"9247:44:17"},"nodeType":"YulExpressionStatement","src":"9247:44:17"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":2044,"isOffset":false,"isSlot":false,"src":"9219:10:17","valueSize":1},{"declaration":2044,"isOffset":false,"isSlot":false,"src":"9262:10:17","valueSize":1}],"id":2053,"nodeType":"InlineAssembly","src":"9163:142:17"}]}}]},"id":2062,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"8841:7:17","nodeType":"FunctionDefinition","parameters":{"id":2047,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2044,"mutability":"mutable","name":"returndata","nameLocation":"8862:10:17","nodeType":"VariableDeclaration","scope":2062,"src":"8849:23:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2043,"name":"bytes","nodeType":"ElementaryTypeName","src":"8849:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2046,"mutability":"mutable","name":"errorMessage","nameLocation":"8888:12:17","nodeType":"VariableDeclaration","scope":2062,"src":"8874:26:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2045,"name":"string","nodeType":"ElementaryTypeName","src":"8874:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8848:53:17"},"returnParameters":{"id":2048,"nodeType":"ParameterList","parameters":[],"src":"8915:0:17"},"scope":2063,"src":"8832:540:17","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":2064,"src":"194:9180:17","usedErrors":[]}],"src":"101:9274:17"},"id":17},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[2063],"ContextUpgradeable":[2105],"Initializable":[1269]},"id":2106,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2065,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"86:23:18"},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":2066,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2106,"sourceUnit":1270,"src":"110:42:18","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":2068,"name":"Initializable","nameLocations":["691:13:18"],"nodeType":"IdentifierPath","referencedDeclaration":1269,"src":"691:13:18"},"id":2069,"nodeType":"InheritanceSpecifier","src":"691:13:18"}],"canonicalName":"ContextUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":2067,"nodeType":"StructuredDocumentation","src":"154:496:18","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":2105,"linearizedBaseContracts":[2105,1269],"name":"ContextUpgradeable","nameLocation":"669:18:18","nodeType":"ContractDefinition","nodes":[{"body":{"id":2074,"nodeType":"Block","src":"763:7:18","statements":[]},"id":2075,"implemented":true,"kind":"function","modifiers":[{"id":2072,"kind":"modifierInvocation","modifierName":{"id":2071,"name":"onlyInitializing","nameLocations":["746:16:18"],"nodeType":"IdentifierPath","referencedDeclaration":1214,"src":"746:16:18"},"nodeType":"ModifierInvocation","src":"746:16:18"}],"name":"__Context_init","nameLocation":"720:14:18","nodeType":"FunctionDefinition","parameters":{"id":2070,"nodeType":"ParameterList","parameters":[],"src":"734:2:18"},"returnParameters":{"id":2073,"nodeType":"ParameterList","parameters":[],"src":"763:0:18"},"scope":2105,"src":"711:59:18","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2080,"nodeType":"Block","src":"838:7:18","statements":[]},"id":2081,"implemented":true,"kind":"function","modifiers":[{"id":2078,"kind":"modifierInvocation","modifierName":{"id":2077,"name":"onlyInitializing","nameLocations":["821:16:18"],"nodeType":"IdentifierPath","referencedDeclaration":1214,"src":"821:16:18"},"nodeType":"ModifierInvocation","src":"821:16:18"}],"name":"__Context_init_unchained","nameLocation":"785:24:18","nodeType":"FunctionDefinition","parameters":{"id":2076,"nodeType":"ParameterList","parameters":[],"src":"809:2:18"},"returnParameters":{"id":2079,"nodeType":"ParameterList","parameters":[],"src":"838:0:18"},"scope":2105,"src":"776:69:18","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2089,"nodeType":"Block","src":"912:34:18","statements":[{"expression":{"expression":{"id":2086,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"929:3:18","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2087,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"933:6:18","memberName":"sender","nodeType":"MemberAccess","src":"929:10:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2085,"id":2088,"nodeType":"Return","src":"922:17:18"}]},"id":2090,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"859:10:18","nodeType":"FunctionDefinition","parameters":{"id":2082,"nodeType":"ParameterList","parameters":[],"src":"869:2:18"},"returnParameters":{"id":2085,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2084,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2090,"src":"903:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2083,"name":"address","nodeType":"ElementaryTypeName","src":"903:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"902:9:18"},"scope":2105,"src":"850:96:18","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":2098,"nodeType":"Block","src":"1019:32:18","statements":[{"expression":{"expression":{"id":2095,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1036:3:18","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2096,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1040:4:18","memberName":"data","nodeType":"MemberAccess","src":"1036:8:18","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":2094,"id":2097,"nodeType":"Return","src":"1029:15:18"}]},"id":2099,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"961:8:18","nodeType":"FunctionDefinition","parameters":{"id":2091,"nodeType":"ParameterList","parameters":[],"src":"969:2:18"},"returnParameters":{"id":2094,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2093,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2099,"src":"1003:14:18","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2092,"name":"bytes","nodeType":"ElementaryTypeName","src":"1003:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1002:16:18"},"scope":2105,"src":"952:99:18","stateMutability":"view","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":2100,"nodeType":"StructuredDocumentation","src":"1057:254:18","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":2104,"mutability":"mutable","name":"__gap","nameLocation":"1336:5:18","nodeType":"VariableDeclaration","scope":2105,"src":"1316:25:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":2101,"name":"uint256","nodeType":"ElementaryTypeName","src":"1316:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2103,"length":{"hexValue":"3530","id":2102,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1324:2:18","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"1316:11:18","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"}],"scope":2106,"src":"651:693:18","usedErrors":[]}],"src":"86:1259:18"},"id":18},"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol","exportedSymbols":{"StorageSlotUpgradeable":[2215]},"id":2216,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2107,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"193:23:19"},{"abstract":false,"baseContracts":[],"canonicalName":"StorageSlotUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":2108,"nodeType":"StructuredDocumentation","src":"218:1201:19","text":" @dev Library for reading and writing primitive types to specific storage slots.\n Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n This library helps with reading and writing to such slots without the need for inline assembly.\n The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n Example usage to set ERC1967 implementation slot:\n ```solidity\n contract ERC1967 {\n     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n     function _getImplementation() internal view returns (address) {\n         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n     }\n     function _setImplementation(address newImplementation) internal {\n         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n     }\n }\n ```\n _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n _Available since v4.9 for `string`, `bytes`._"},"fullyImplemented":true,"id":2215,"linearizedBaseContracts":[2215],"name":"StorageSlotUpgradeable","nameLocation":"1428:22:19","nodeType":"ContractDefinition","nodes":[{"canonicalName":"StorageSlotUpgradeable.AddressSlot","id":2111,"members":[{"constant":false,"id":2110,"mutability":"mutable","name":"value","nameLocation":"1494:5:19","nodeType":"VariableDeclaration","scope":2111,"src":"1486:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2109,"name":"address","nodeType":"ElementaryTypeName","src":"1486:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"AddressSlot","nameLocation":"1464:11:19","nodeType":"StructDefinition","scope":2215,"src":"1457:49:19","visibility":"public"},{"canonicalName":"StorageSlotUpgradeable.BooleanSlot","id":2114,"members":[{"constant":false,"id":2113,"mutability":"mutable","name":"value","nameLocation":"1546:5:19","nodeType":"VariableDeclaration","scope":2114,"src":"1541:10:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2112,"name":"bool","nodeType":"ElementaryTypeName","src":"1541:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"BooleanSlot","nameLocation":"1519:11:19","nodeType":"StructDefinition","scope":2215,"src":"1512:46:19","visibility":"public"},{"canonicalName":"StorageSlotUpgradeable.Bytes32Slot","id":2117,"members":[{"constant":false,"id":2116,"mutability":"mutable","name":"value","nameLocation":"1601:5:19","nodeType":"VariableDeclaration","scope":2117,"src":"1593:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2115,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1593:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"Bytes32Slot","nameLocation":"1571:11:19","nodeType":"StructDefinition","scope":2215,"src":"1564:49:19","visibility":"public"},{"canonicalName":"StorageSlotUpgradeable.Uint256Slot","id":2120,"members":[{"constant":false,"id":2119,"mutability":"mutable","name":"value","nameLocation":"1656:5:19","nodeType":"VariableDeclaration","scope":2120,"src":"1648:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2118,"name":"uint256","nodeType":"ElementaryTypeName","src":"1648:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Uint256Slot","nameLocation":"1626:11:19","nodeType":"StructDefinition","scope":2215,"src":"1619:49:19","visibility":"public"},{"canonicalName":"StorageSlotUpgradeable.StringSlot","id":2123,"members":[{"constant":false,"id":2122,"mutability":"mutable","name":"value","nameLocation":"1709:5:19","nodeType":"VariableDeclaration","scope":2123,"src":"1702:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":2121,"name":"string","nodeType":"ElementaryTypeName","src":"1702:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"name":"StringSlot","nameLocation":"1681:10:19","nodeType":"StructDefinition","scope":2215,"src":"1674:47:19","visibility":"public"},{"canonicalName":"StorageSlotUpgradeable.BytesSlot","id":2126,"members":[{"constant":false,"id":2125,"mutability":"mutable","name":"value","nameLocation":"1760:5:19","nodeType":"VariableDeclaration","scope":2126,"src":"1754:11:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":2124,"name":"bytes","nodeType":"ElementaryTypeName","src":"1754:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"BytesSlot","nameLocation":"1734:9:19","nodeType":"StructDefinition","scope":2215,"src":"1727:45:19","visibility":"public"},{"body":{"id":2136,"nodeType":"Block","src":"1954:106:19","statements":[{"AST":{"nodeType":"YulBlock","src":"2016:38:19","statements":[{"nodeType":"YulAssignment","src":"2030:14:19","value":{"name":"slot","nodeType":"YulIdentifier","src":"2040:4:19"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"2030:6:19"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":2133,"isOffset":false,"isSlot":true,"src":"2030:6:19","suffix":"slot","valueSize":1},{"declaration":2129,"isOffset":false,"isSlot":false,"src":"2040:4:19","valueSize":1}],"id":2135,"nodeType":"InlineAssembly","src":"2007:47:19"}]},"documentation":{"id":2127,"nodeType":"StructuredDocumentation","src":"1778:87:19","text":" @dev Returns an `AddressSlot` with member `value` located at `slot`."},"id":2137,"implemented":true,"kind":"function","modifiers":[],"name":"getAddressSlot","nameLocation":"1879:14:19","nodeType":"FunctionDefinition","parameters":{"id":2130,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2129,"mutability":"mutable","name":"slot","nameLocation":"1902:4:19","nodeType":"VariableDeclaration","scope":2137,"src":"1894:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2128,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1894:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1893:14:19"},"returnParameters":{"id":2134,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2133,"mutability":"mutable","name":"r","nameLocation":"1951:1:19","nodeType":"VariableDeclaration","scope":2137,"src":"1931:21:19","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$2111_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot"},"typeName":{"id":2132,"nodeType":"UserDefinedTypeName","pathNode":{"id":2131,"name":"AddressSlot","nameLocations":["1931:11:19"],"nodeType":"IdentifierPath","referencedDeclaration":2111,"src":"1931:11:19"},"referencedDeclaration":2111,"src":"1931:11:19","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$2111_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot"}},"visibility":"internal"}],"src":"1930:23:19"},"scope":2215,"src":"1870:190:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2147,"nodeType":"Block","src":"2242:106:19","statements":[{"AST":{"nodeType":"YulBlock","src":"2304:38:19","statements":[{"nodeType":"YulAssignment","src":"2318:14:19","value":{"name":"slot","nodeType":"YulIdentifier","src":"2328:4:19"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"2318:6:19"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":2144,"isOffset":false,"isSlot":true,"src":"2318:6:19","suffix":"slot","valueSize":1},{"declaration":2140,"isOffset":false,"isSlot":false,"src":"2328:4:19","valueSize":1}],"id":2146,"nodeType":"InlineAssembly","src":"2295:47:19"}]},"documentation":{"id":2138,"nodeType":"StructuredDocumentation","src":"2066:87:19","text":" @dev Returns an `BooleanSlot` with member `value` located at `slot`."},"id":2148,"implemented":true,"kind":"function","modifiers":[],"name":"getBooleanSlot","nameLocation":"2167:14:19","nodeType":"FunctionDefinition","parameters":{"id":2141,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2140,"mutability":"mutable","name":"slot","nameLocation":"2190:4:19","nodeType":"VariableDeclaration","scope":2148,"src":"2182:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2139,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2182:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2181:14:19"},"returnParameters":{"id":2145,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2144,"mutability":"mutable","name":"r","nameLocation":"2239:1:19","nodeType":"VariableDeclaration","scope":2148,"src":"2219:21:19","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$2114_storage_ptr","typeString":"struct StorageSlotUpgradeable.BooleanSlot"},"typeName":{"id":2143,"nodeType":"UserDefinedTypeName","pathNode":{"id":2142,"name":"BooleanSlot","nameLocations":["2219:11:19"],"nodeType":"IdentifierPath","referencedDeclaration":2114,"src":"2219:11:19"},"referencedDeclaration":2114,"src":"2219:11:19","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$2114_storage_ptr","typeString":"struct StorageSlotUpgradeable.BooleanSlot"}},"visibility":"internal"}],"src":"2218:23:19"},"scope":2215,"src":"2158:190:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2158,"nodeType":"Block","src":"2530:106:19","statements":[{"AST":{"nodeType":"YulBlock","src":"2592:38:19","statements":[{"nodeType":"YulAssignment","src":"2606:14:19","value":{"name":"slot","nodeType":"YulIdentifier","src":"2616:4:19"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"2606:6:19"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":2155,"isOffset":false,"isSlot":true,"src":"2606:6:19","suffix":"slot","valueSize":1},{"declaration":2151,"isOffset":false,"isSlot":false,"src":"2616:4:19","valueSize":1}],"id":2157,"nodeType":"InlineAssembly","src":"2583:47:19"}]},"documentation":{"id":2149,"nodeType":"StructuredDocumentation","src":"2354:87:19","text":" @dev Returns an `Bytes32Slot` with member `value` located at `slot`."},"id":2159,"implemented":true,"kind":"function","modifiers":[],"name":"getBytes32Slot","nameLocation":"2455:14:19","nodeType":"FunctionDefinition","parameters":{"id":2152,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2151,"mutability":"mutable","name":"slot","nameLocation":"2478:4:19","nodeType":"VariableDeclaration","scope":2159,"src":"2470:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2150,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2470:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2469:14:19"},"returnParameters":{"id":2156,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2155,"mutability":"mutable","name":"r","nameLocation":"2527:1:19","nodeType":"VariableDeclaration","scope":2159,"src":"2507:21:19","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$2117_storage_ptr","typeString":"struct StorageSlotUpgradeable.Bytes32Slot"},"typeName":{"id":2154,"nodeType":"UserDefinedTypeName","pathNode":{"id":2153,"name":"Bytes32Slot","nameLocations":["2507:11:19"],"nodeType":"IdentifierPath","referencedDeclaration":2117,"src":"2507:11:19"},"referencedDeclaration":2117,"src":"2507:11:19","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$2117_storage_ptr","typeString":"struct StorageSlotUpgradeable.Bytes32Slot"}},"visibility":"internal"}],"src":"2506:23:19"},"scope":2215,"src":"2446:190:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2169,"nodeType":"Block","src":"2818:106:19","statements":[{"AST":{"nodeType":"YulBlock","src":"2880:38:19","statements":[{"nodeType":"YulAssignment","src":"2894:14:19","value":{"name":"slot","nodeType":"YulIdentifier","src":"2904:4:19"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"2894:6:19"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":2166,"isOffset":false,"isSlot":true,"src":"2894:6:19","suffix":"slot","valueSize":1},{"declaration":2162,"isOffset":false,"isSlot":false,"src":"2904:4:19","valueSize":1}],"id":2168,"nodeType":"InlineAssembly","src":"2871:47:19"}]},"documentation":{"id":2160,"nodeType":"StructuredDocumentation","src":"2642:87:19","text":" @dev Returns an `Uint256Slot` with member `value` located at `slot`."},"id":2170,"implemented":true,"kind":"function","modifiers":[],"name":"getUint256Slot","nameLocation":"2743:14:19","nodeType":"FunctionDefinition","parameters":{"id":2163,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2162,"mutability":"mutable","name":"slot","nameLocation":"2766:4:19","nodeType":"VariableDeclaration","scope":2170,"src":"2758:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2161,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2758:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2757:14:19"},"returnParameters":{"id":2167,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2166,"mutability":"mutable","name":"r","nameLocation":"2815:1:19","nodeType":"VariableDeclaration","scope":2170,"src":"2795:21:19","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$2120_storage_ptr","typeString":"struct StorageSlotUpgradeable.Uint256Slot"},"typeName":{"id":2165,"nodeType":"UserDefinedTypeName","pathNode":{"id":2164,"name":"Uint256Slot","nameLocations":["2795:11:19"],"nodeType":"IdentifierPath","referencedDeclaration":2120,"src":"2795:11:19"},"referencedDeclaration":2120,"src":"2795:11:19","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$2120_storage_ptr","typeString":"struct StorageSlotUpgradeable.Uint256Slot"}},"visibility":"internal"}],"src":"2794:23:19"},"scope":2215,"src":"2734:190:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2180,"nodeType":"Block","src":"3103:106:19","statements":[{"AST":{"nodeType":"YulBlock","src":"3165:38:19","statements":[{"nodeType":"YulAssignment","src":"3179:14:19","value":{"name":"slot","nodeType":"YulIdentifier","src":"3189:4:19"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"3179:6:19"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":2177,"isOffset":false,"isSlot":true,"src":"3179:6:19","suffix":"slot","valueSize":1},{"declaration":2173,"isOffset":false,"isSlot":false,"src":"3189:4:19","valueSize":1}],"id":2179,"nodeType":"InlineAssembly","src":"3156:47:19"}]},"documentation":{"id":2171,"nodeType":"StructuredDocumentation","src":"2930:86:19","text":" @dev Returns an `StringSlot` with member `value` located at `slot`."},"id":2181,"implemented":true,"kind":"function","modifiers":[],"name":"getStringSlot","nameLocation":"3030:13:19","nodeType":"FunctionDefinition","parameters":{"id":2174,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2173,"mutability":"mutable","name":"slot","nameLocation":"3052:4:19","nodeType":"VariableDeclaration","scope":2181,"src":"3044:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2172,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3044:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3043:14:19"},"returnParameters":{"id":2178,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2177,"mutability":"mutable","name":"r","nameLocation":"3100:1:19","nodeType":"VariableDeclaration","scope":2181,"src":"3081:20:19","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$2123_storage_ptr","typeString":"struct StorageSlotUpgradeable.StringSlot"},"typeName":{"id":2176,"nodeType":"UserDefinedTypeName","pathNode":{"id":2175,"name":"StringSlot","nameLocations":["3081:10:19"],"nodeType":"IdentifierPath","referencedDeclaration":2123,"src":"3081:10:19"},"referencedDeclaration":2123,"src":"3081:10:19","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$2123_storage_ptr","typeString":"struct StorageSlotUpgradeable.StringSlot"}},"visibility":"internal"}],"src":"3080:22:19"},"scope":2215,"src":"3021:188:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2191,"nodeType":"Block","src":"3411:112:19","statements":[{"AST":{"nodeType":"YulBlock","src":"3473:44:19","statements":[{"nodeType":"YulAssignment","src":"3487:20:19","value":{"name":"store.slot","nodeType":"YulIdentifier","src":"3497:10:19"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"3487:6:19"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":2188,"isOffset":false,"isSlot":true,"src":"3487:6:19","suffix":"slot","valueSize":1},{"declaration":2184,"isOffset":false,"isSlot":true,"src":"3497:10:19","suffix":"slot","valueSize":1}],"id":2190,"nodeType":"InlineAssembly","src":"3464:53:19"}]},"documentation":{"id":2182,"nodeType":"StructuredDocumentation","src":"3215:101:19","text":" @dev Returns an `StringSlot` representation of the string storage pointer `store`."},"id":2192,"implemented":true,"kind":"function","modifiers":[],"name":"getStringSlot","nameLocation":"3330:13:19","nodeType":"FunctionDefinition","parameters":{"id":2185,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2184,"mutability":"mutable","name":"store","nameLocation":"3359:5:19","nodeType":"VariableDeclaration","scope":2192,"src":"3344:20:19","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":2183,"name":"string","nodeType":"ElementaryTypeName","src":"3344:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3343:22:19"},"returnParameters":{"id":2189,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2188,"mutability":"mutable","name":"r","nameLocation":"3408:1:19","nodeType":"VariableDeclaration","scope":2192,"src":"3389:20:19","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$2123_storage_ptr","typeString":"struct StorageSlotUpgradeable.StringSlot"},"typeName":{"id":2187,"nodeType":"UserDefinedTypeName","pathNode":{"id":2186,"name":"StringSlot","nameLocations":["3389:10:19"],"nodeType":"IdentifierPath","referencedDeclaration":2123,"src":"3389:10:19"},"referencedDeclaration":2123,"src":"3389:10:19","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$2123_storage_ptr","typeString":"struct StorageSlotUpgradeable.StringSlot"}},"visibility":"internal"}],"src":"3388:22:19"},"scope":2215,"src":"3321:202:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2202,"nodeType":"Block","src":"3699:106:19","statements":[{"AST":{"nodeType":"YulBlock","src":"3761:38:19","statements":[{"nodeType":"YulAssignment","src":"3775:14:19","value":{"name":"slot","nodeType":"YulIdentifier","src":"3785:4:19"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"3775:6:19"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":2199,"isOffset":false,"isSlot":true,"src":"3775:6:19","suffix":"slot","valueSize":1},{"declaration":2195,"isOffset":false,"isSlot":false,"src":"3785:4:19","valueSize":1}],"id":2201,"nodeType":"InlineAssembly","src":"3752:47:19"}]},"documentation":{"id":2193,"nodeType":"StructuredDocumentation","src":"3529:85:19","text":" @dev Returns an `BytesSlot` with member `value` located at `slot`."},"id":2203,"implemented":true,"kind":"function","modifiers":[],"name":"getBytesSlot","nameLocation":"3628:12:19","nodeType":"FunctionDefinition","parameters":{"id":2196,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2195,"mutability":"mutable","name":"slot","nameLocation":"3649:4:19","nodeType":"VariableDeclaration","scope":2203,"src":"3641:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2194,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3641:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3640:14:19"},"returnParameters":{"id":2200,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2199,"mutability":"mutable","name":"r","nameLocation":"3696:1:19","nodeType":"VariableDeclaration","scope":2203,"src":"3678:19:19","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$2126_storage_ptr","typeString":"struct StorageSlotUpgradeable.BytesSlot"},"typeName":{"id":2198,"nodeType":"UserDefinedTypeName","pathNode":{"id":2197,"name":"BytesSlot","nameLocations":["3678:9:19"],"nodeType":"IdentifierPath","referencedDeclaration":2126,"src":"3678:9:19"},"referencedDeclaration":2126,"src":"3678:9:19","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$2126_storage_ptr","typeString":"struct StorageSlotUpgradeable.BytesSlot"}},"visibility":"internal"}],"src":"3677:21:19"},"scope":2215,"src":"3619:186:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2213,"nodeType":"Block","src":"4002:112:19","statements":[{"AST":{"nodeType":"YulBlock","src":"4064:44:19","statements":[{"nodeType":"YulAssignment","src":"4078:20:19","value":{"name":"store.slot","nodeType":"YulIdentifier","src":"4088:10:19"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"4078:6:19"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":2210,"isOffset":false,"isSlot":true,"src":"4078:6:19","suffix":"slot","valueSize":1},{"declaration":2206,"isOffset":false,"isSlot":true,"src":"4088:10:19","suffix":"slot","valueSize":1}],"id":2212,"nodeType":"InlineAssembly","src":"4055:53:19"}]},"documentation":{"id":2204,"nodeType":"StructuredDocumentation","src":"3811:99:19","text":" @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`."},"id":2214,"implemented":true,"kind":"function","modifiers":[],"name":"getBytesSlot","nameLocation":"3924:12:19","nodeType":"FunctionDefinition","parameters":{"id":2207,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2206,"mutability":"mutable","name":"store","nameLocation":"3951:5:19","nodeType":"VariableDeclaration","scope":2214,"src":"3937:19:19","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":2205,"name":"bytes","nodeType":"ElementaryTypeName","src":"3937:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3936:21:19"},"returnParameters":{"id":2211,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2210,"mutability":"mutable","name":"r","nameLocation":"3999:1:19","nodeType":"VariableDeclaration","scope":2214,"src":"3981:19:19","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$2126_storage_ptr","typeString":"struct StorageSlotUpgradeable.BytesSlot"},"typeName":{"id":2209,"nodeType":"UserDefinedTypeName","pathNode":{"id":2208,"name":"BytesSlot","nameLocations":["3981:9:19"],"nodeType":"IdentifierPath","referencedDeclaration":2126,"src":"3981:9:19"},"referencedDeclaration":2126,"src":"3981:9:19","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$2126_storage_ptr","typeString":"struct StorageSlotUpgradeable.BytesSlot"}},"visibility":"internal"}],"src":"3980:21:19"},"scope":2215,"src":"3915:199:19","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2216,"src":"1420:2696:19","usedErrors":[]}],"src":"193:3924:19"},"id":19},"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol","exportedSymbols":{"MathUpgradeable":[4016],"SignedMathUpgradeable":[4121],"StringsUpgradeable":[2444]},"id":2445,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2217,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"101:23:20"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol","file":"./math/MathUpgradeable.sol","id":2218,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2445,"sourceUnit":4017,"src":"126:36:20","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol","file":"./math/SignedMathUpgradeable.sol","id":2219,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2445,"sourceUnit":4122,"src":"163:42:20","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"StringsUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":2220,"nodeType":"StructuredDocumentation","src":"207:34:20","text":" @dev String operations."},"fullyImplemented":true,"id":2444,"linearizedBaseContracts":[2444],"name":"StringsUpgradeable","nameLocation":"250:18:20","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":2223,"mutability":"constant","name":"_SYMBOLS","nameLocation":"300:8:20","nodeType":"VariableDeclaration","scope":2444,"src":"275:54:20","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"},"typeName":{"id":2221,"name":"bytes16","nodeType":"ElementaryTypeName","src":"275:7:20","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"value":{"hexValue":"30313233343536373839616263646566","id":2222,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"311:18:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f","typeString":"literal_string \"0123456789abcdef\""},"value":"0123456789abcdef"},"visibility":"private"},{"constant":true,"id":2226,"mutability":"constant","name":"_ADDRESS_LENGTH","nameLocation":"358:15:20","nodeType":"VariableDeclaration","scope":2444,"src":"335:43:20","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2224,"name":"uint8","nodeType":"ElementaryTypeName","src":"335:5:20","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3230","id":2225,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"376:2:20","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"visibility":"private"},{"body":{"id":2273,"nodeType":"Block","src":"551:636:20","statements":[{"id":2272,"nodeType":"UncheckedBlock","src":"561:620:20","statements":[{"assignments":[2235],"declarations":[{"constant":false,"id":2235,"mutability":"mutable","name":"length","nameLocation":"593:6:20","nodeType":"VariableDeclaration","scope":2272,"src":"585:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2234,"name":"uint256","nodeType":"ElementaryTypeName","src":"585:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2242,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2241,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2238,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2229,"src":"624:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2236,"name":"MathUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4016,"src":"602:15:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_MathUpgradeable_$4016_$","typeString":"type(library MathUpgradeable)"}},"id":2237,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"618:5:20","memberName":"log10","nodeType":"MemberAccess","referencedDeclaration":3853,"src":"602:21:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2239,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"602:28:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2240,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"633:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"602:32:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"585:49:20"},{"assignments":[2244],"declarations":[{"constant":false,"id":2244,"mutability":"mutable","name":"buffer","nameLocation":"662:6:20","nodeType":"VariableDeclaration","scope":2272,"src":"648:20:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2243,"name":"string","nodeType":"ElementaryTypeName","src":"648:6:20","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":2249,"initialValue":{"arguments":[{"id":2247,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2235,"src":"682:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2246,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"671:10:20","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":2245,"name":"string","nodeType":"ElementaryTypeName","src":"675:6:20","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":2248,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"671:18:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"648:41:20"},{"assignments":[2251],"declarations":[{"constant":false,"id":2251,"mutability":"mutable","name":"ptr","nameLocation":"711:3:20","nodeType":"VariableDeclaration","scope":2272,"src":"703:11:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2250,"name":"uint256","nodeType":"ElementaryTypeName","src":"703:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2252,"nodeType":"VariableDeclarationStatement","src":"703:11:20"},{"AST":{"nodeType":"YulBlock","src":"784:67:20","statements":[{"nodeType":"YulAssignment","src":"802:35:20","value":{"arguments":[{"name":"buffer","nodeType":"YulIdentifier","src":"813:6:20"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"825:2:20","type":"","value":"32"},{"name":"length","nodeType":"YulIdentifier","src":"829:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"821:3:20"},"nodeType":"YulFunctionCall","src":"821:15:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"809:3:20"},"nodeType":"YulFunctionCall","src":"809:28:20"},"variableNames":[{"name":"ptr","nodeType":"YulIdentifier","src":"802:3:20"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":2244,"isOffset":false,"isSlot":false,"src":"813:6:20","valueSize":1},{"declaration":2235,"isOffset":false,"isSlot":false,"src":"829:6:20","valueSize":1},{"declaration":2251,"isOffset":false,"isSlot":false,"src":"802:3:20","valueSize":1}],"id":2253,"nodeType":"InlineAssembly","src":"775:76:20"},{"body":{"id":2268,"nodeType":"Block","src":"877:267:20","statements":[{"expression":{"id":2256,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"895:5:20","subExpression":{"id":2255,"name":"ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2251,"src":"895:3:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2257,"nodeType":"ExpressionStatement","src":"895:5:20"},{"AST":{"nodeType":"YulBlock","src":"978:84:20","statements":[{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"1008:3:20"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1022:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"1029:2:20","type":"","value":"10"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"1018:3:20"},"nodeType":"YulFunctionCall","src":"1018:14:20"},{"name":"_SYMBOLS","nodeType":"YulIdentifier","src":"1034:8:20"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"1013:4:20"},"nodeType":"YulFunctionCall","src":"1013:30:20"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"1000:7:20"},"nodeType":"YulFunctionCall","src":"1000:44:20"},"nodeType":"YulExpressionStatement","src":"1000:44:20"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":2223,"isOffset":false,"isSlot":false,"src":"1034:8:20","valueSize":1},{"declaration":2251,"isOffset":false,"isSlot":false,"src":"1008:3:20","valueSize":1},{"declaration":2229,"isOffset":false,"isSlot":false,"src":"1022:5:20","valueSize":1}],"id":2258,"nodeType":"InlineAssembly","src":"969:93:20"},{"expression":{"id":2261,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2259,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2229,"src":"1079:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":2260,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1088:2:20","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"1079:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2262,"nodeType":"ExpressionStatement","src":"1079:11:20"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2265,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2263,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2229,"src":"1112:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2264,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1121:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1112:10:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2267,"nodeType":"IfStatement","src":"1108:21:20","trueBody":{"id":2266,"nodeType":"Break","src":"1124:5:20"}}]},"condition":{"hexValue":"74727565","id":2254,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"871:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"id":2269,"nodeType":"WhileStatement","src":"864:280:20"},{"expression":{"id":2270,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2244,"src":"1164:6:20","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2233,"id":2271,"nodeType":"Return","src":"1157:13:20"}]}]},"documentation":{"id":2227,"nodeType":"StructuredDocumentation","src":"385:90:20","text":" @dev Converts a `uint256` to its ASCII `string` decimal representation."},"id":2274,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"489:8:20","nodeType":"FunctionDefinition","parameters":{"id":2230,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2229,"mutability":"mutable","name":"value","nameLocation":"506:5:20","nodeType":"VariableDeclaration","scope":2274,"src":"498:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2228,"name":"uint256","nodeType":"ElementaryTypeName","src":"498:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"497:15:20"},"returnParameters":{"id":2233,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2232,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2274,"src":"536:13:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2231,"name":"string","nodeType":"ElementaryTypeName","src":"536:6:20","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"535:15:20"},"scope":2444,"src":"480:707:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2301,"nodeType":"Block","src":"1357:114:20","statements":[{"expression":{"arguments":[{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2288,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2286,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2277,"src":"1398:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30","id":2287,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1406:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1398:9:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"","id":2290,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1416:2:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"id":2291,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1398:20:20","trueExpression":{"hexValue":"2d","id":2289,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1410:3:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_d3b8281179950f98149eefdb158d0e1acb56f56e8e343aa9fefafa7e36959561","typeString":"literal_string \"-\""},"value":"-"},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[{"arguments":[{"id":2295,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2277,"src":"1455:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"expression":{"id":2293,"name":"SignedMathUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4121,"src":"1429:21:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SignedMathUpgradeable_$4121_$","typeString":"type(library SignedMathUpgradeable)"}},"id":2294,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1451:3:20","memberName":"abs","nodeType":"MemberAccess","referencedDeclaration":4120,"src":"1429:25:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$returns$_t_uint256_$","typeString":"function (int256) pure returns (uint256)"}},"id":2296,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1429:32:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2292,"name":"toString","nodeType":"Identifier","overloadedDeclarations":[2274,2302],"referencedDeclaration":2274,"src":"1420:8:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":2297,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1420:42:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":2284,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1381:3:20","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2285,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1385:12:20","memberName":"encodePacked","nodeType":"MemberAccess","src":"1381:16:20","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2298,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1381:82:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2283,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1374:6:20","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":2282,"name":"string","nodeType":"ElementaryTypeName","src":"1374:6:20","typeDescriptions":{}}},"id":2299,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1374:90:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2281,"id":2300,"nodeType":"Return","src":"1367:97:20"}]},"documentation":{"id":2275,"nodeType":"StructuredDocumentation","src":"1193:89:20","text":" @dev Converts a `int256` to its ASCII `string` decimal representation."},"id":2302,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"1296:8:20","nodeType":"FunctionDefinition","parameters":{"id":2278,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2277,"mutability":"mutable","name":"value","nameLocation":"1312:5:20","nodeType":"VariableDeclaration","scope":2302,"src":"1305:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2276,"name":"int256","nodeType":"ElementaryTypeName","src":"1305:6:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1304:14:20"},"returnParameters":{"id":2281,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2280,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2302,"src":"1342:13:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2279,"name":"string","nodeType":"ElementaryTypeName","src":"1342:6:20","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1341:15:20"},"scope":2444,"src":"1287:184:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2321,"nodeType":"Block","src":"1650:111:20","statements":[{"id":2320,"nodeType":"UncheckedBlock","src":"1660:95:20","statements":[{"expression":{"arguments":[{"id":2311,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2305,"src":"1703:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2317,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2314,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2305,"src":"1733:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2312,"name":"MathUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4016,"src":"1710:15:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_MathUpgradeable_$4016_$","typeString":"type(library MathUpgradeable)"}},"id":2313,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1726:6:20","memberName":"log256","nodeType":"MemberAccess","referencedDeclaration":3976,"src":"1710:22:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2315,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1710:29:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2316,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1742:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1710:33:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2310,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[2322,2398,2418],"referencedDeclaration":2398,"src":"1691:11:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":2318,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1691:53:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2309,"id":2319,"nodeType":"Return","src":"1684:60:20"}]}]},"documentation":{"id":2303,"nodeType":"StructuredDocumentation","src":"1477:94:20","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."},"id":2322,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1585:11:20","nodeType":"FunctionDefinition","parameters":{"id":2306,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2305,"mutability":"mutable","name":"value","nameLocation":"1605:5:20","nodeType":"VariableDeclaration","scope":2322,"src":"1597:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2304,"name":"uint256","nodeType":"ElementaryTypeName","src":"1597:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1596:15:20"},"returnParameters":{"id":2309,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2308,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2322,"src":"1635:13:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2307,"name":"string","nodeType":"ElementaryTypeName","src":"1635:6:20","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1634:15:20"},"scope":2444,"src":"1576:185:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2397,"nodeType":"Block","src":"1974:347:20","statements":[{"assignments":[2333],"declarations":[{"constant":false,"id":2333,"mutability":"mutable","name":"buffer","nameLocation":"1997:6:20","nodeType":"VariableDeclaration","scope":2397,"src":"1984:19:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2332,"name":"bytes","nodeType":"ElementaryTypeName","src":"1984:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2342,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2340,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2338,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2336,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2016:1:20","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2337,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2327,"src":"2020:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2016:10:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":2339,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2029:1:20","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"2016:14:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2335,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"2006:9:20","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":2334,"name":"bytes","nodeType":"ElementaryTypeName","src":"2010:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":2341,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2006:25:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1984:47:20"},{"expression":{"id":2347,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2343,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2333,"src":"2041:6:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2345,"indexExpression":{"hexValue":"30","id":2344,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2048:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2041:9:20","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":2346,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2053:3:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"src":"2041:15:20","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":2348,"nodeType":"ExpressionStatement","src":"2041:15:20"},{"expression":{"id":2353,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2349,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2333,"src":"2066:6:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2351,"indexExpression":{"hexValue":"31","id":2350,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2073:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2066:9:20","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"78","id":2352,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2078:3:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83","typeString":"literal_string \"x\""},"value":"x"},"src":"2066:15:20","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":2354,"nodeType":"ExpressionStatement","src":"2066:15:20"},{"body":{"id":2383,"nodeType":"Block","src":"2136:83:20","statements":[{"expression":{"id":2377,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2369,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2333,"src":"2150:6:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2371,"indexExpression":{"id":2370,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2356,"src":"2157:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2150:9:20","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":2372,"name":"_SYMBOLS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2223,"src":"2162:8:20","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"id":2376,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2375,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2373,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2325,"src":"2171:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":2374,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2179:3:20","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"2171:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2162:21:20","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"2150:33:20","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":2378,"nodeType":"ExpressionStatement","src":"2150:33:20"},{"expression":{"id":2381,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2379,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2325,"src":"2197:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":2380,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2207:1:20","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"2197:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2382,"nodeType":"ExpressionStatement","src":"2197:11:20"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2365,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2363,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2356,"src":"2124:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":2364,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2128:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2124:5:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2384,"initializationExpression":{"assignments":[2356],"declarations":[{"constant":false,"id":2356,"mutability":"mutable","name":"i","nameLocation":"2104:1:20","nodeType":"VariableDeclaration","scope":2384,"src":"2096:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2355,"name":"uint256","nodeType":"ElementaryTypeName","src":"2096:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2362,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2361,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2359,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2357,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2108:1:20","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2358,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2327,"src":"2112:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2108:10:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2360,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2121:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2108:14:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2096:26:20"},"loopExpression":{"expression":{"id":2367,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"2131:3:20","subExpression":{"id":2366,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2356,"src":"2133:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2368,"nodeType":"ExpressionStatement","src":"2131:3:20"},"nodeType":"ForStatement","src":"2091:128:20"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2388,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2386,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2325,"src":"2236:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2387,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2245:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2236:10:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","id":2389,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2248:34:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""},"value":"Strings: hex length insufficient"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""}],"id":2385,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2228:7:20","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2390,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2228:55:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2391,"nodeType":"ExpressionStatement","src":"2228:55:20"},{"expression":{"arguments":[{"id":2394,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2333,"src":"2307:6:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2393,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2300:6:20","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":2392,"name":"string","nodeType":"ElementaryTypeName","src":"2300:6:20","typeDescriptions":{}}},"id":2395,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2300:14:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2331,"id":2396,"nodeType":"Return","src":"2293:21:20"}]},"documentation":{"id":2323,"nodeType":"StructuredDocumentation","src":"1767:112:20","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."},"id":2398,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1893:11:20","nodeType":"FunctionDefinition","parameters":{"id":2328,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2325,"mutability":"mutable","name":"value","nameLocation":"1913:5:20","nodeType":"VariableDeclaration","scope":2398,"src":"1905:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2324,"name":"uint256","nodeType":"ElementaryTypeName","src":"1905:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2327,"mutability":"mutable","name":"length","nameLocation":"1928:6:20","nodeType":"VariableDeclaration","scope":2398,"src":"1920:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2326,"name":"uint256","nodeType":"ElementaryTypeName","src":"1920:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1904:31:20"},"returnParameters":{"id":2331,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2330,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2398,"src":"1959:13:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2329,"name":"string","nodeType":"ElementaryTypeName","src":"1959:6:20","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1958:15:20"},"scope":2444,"src":"1884:437:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2417,"nodeType":"Block","src":"2546:76:20","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":2411,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2401,"src":"2591:4:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2410,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2583:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":2409,"name":"uint160","nodeType":"ElementaryTypeName","src":"2583:7:20","typeDescriptions":{}}},"id":2412,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2583:13:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":2408,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2575:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2407,"name":"uint256","nodeType":"ElementaryTypeName","src":"2575:7:20","typeDescriptions":{}}},"id":2413,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2575:22:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2414,"name":"_ADDRESS_LENGTH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2226,"src":"2599:15:20","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":2406,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[2322,2398,2418],"referencedDeclaration":2398,"src":"2563:11:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":2415,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2563:52:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2405,"id":2416,"nodeType":"Return","src":"2556:59:20"}]},"documentation":{"id":2399,"nodeType":"StructuredDocumentation","src":"2327:141:20","text":" @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation."},"id":2418,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2482:11:20","nodeType":"FunctionDefinition","parameters":{"id":2402,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2401,"mutability":"mutable","name":"addr","nameLocation":"2502:4:20","nodeType":"VariableDeclaration","scope":2418,"src":"2494:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2400,"name":"address","nodeType":"ElementaryTypeName","src":"2494:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2493:14:20"},"returnParameters":{"id":2405,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2404,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2418,"src":"2531:13:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2403,"name":"string","nodeType":"ElementaryTypeName","src":"2531:6:20","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2530:15:20"},"scope":2444,"src":"2473:149:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2442,"nodeType":"Block","src":"2777:66:20","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":2440,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":2431,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2421,"src":"2810:1:20","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2430,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2804:5:20","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2429,"name":"bytes","nodeType":"ElementaryTypeName","src":"2804:5:20","typeDescriptions":{}}},"id":2432,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2804:8:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2428,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2794:9:20","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2433,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2794:19:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"arguments":[{"id":2437,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2423,"src":"2833:1:20","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2436,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2827:5:20","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2435,"name":"bytes","nodeType":"ElementaryTypeName","src":"2827:5:20","typeDescriptions":{}}},"id":2438,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2827:8:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2434,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2817:9:20","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2439,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2817:19:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2794:42:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2427,"id":2441,"nodeType":"Return","src":"2787:49:20"}]},"documentation":{"id":2419,"nodeType":"StructuredDocumentation","src":"2628:66:20","text":" @dev Returns true if the two strings are equal."},"id":2443,"implemented":true,"kind":"function","modifiers":[],"name":"equal","nameLocation":"2708:5:20","nodeType":"FunctionDefinition","parameters":{"id":2424,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2421,"mutability":"mutable","name":"a","nameLocation":"2728:1:20","nodeType":"VariableDeclaration","scope":2443,"src":"2714:15:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2420,"name":"string","nodeType":"ElementaryTypeName","src":"2714:6:20","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2423,"mutability":"mutable","name":"b","nameLocation":"2745:1:20","nodeType":"VariableDeclaration","scope":2443,"src":"2731:15:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2422,"name":"string","nodeType":"ElementaryTypeName","src":"2731:6:20","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2713:34:20"},"returnParameters":{"id":2427,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2426,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2443,"src":"2771:4:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2425,"name":"bool","nodeType":"ElementaryTypeName","src":"2771:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2770:6:20"},"scope":2444,"src":"2699:144:20","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2445,"src":"242:2603:20","usedErrors":[]}],"src":"101:2745:20"},"id":20},"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol","exportedSymbols":{"ECDSAUpgradeable":[2810],"MathUpgradeable":[4016],"SignedMathUpgradeable":[4121],"StringsUpgradeable":[2444]},"id":2811,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2446,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"112:23:21"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol","file":"../StringsUpgradeable.sol","id":2447,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2811,"sourceUnit":2445,"src":"137:35:21","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ECDSAUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":2448,"nodeType":"StructuredDocumentation","src":"174:205:21","text":" @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n These functions can be used to verify that a message was signed by the holder\n of the private keys of a given address."},"fullyImplemented":true,"id":2810,"linearizedBaseContracts":[2810],"name":"ECDSAUpgradeable","nameLocation":"388:16:21","nodeType":"ContractDefinition","nodes":[{"canonicalName":"ECDSAUpgradeable.RecoverError","id":2454,"members":[{"id":2449,"name":"NoError","nameLocation":"439:7:21","nodeType":"EnumValue","src":"439:7:21"},{"id":2450,"name":"InvalidSignature","nameLocation":"456:16:21","nodeType":"EnumValue","src":"456:16:21"},{"id":2451,"name":"InvalidSignatureLength","nameLocation":"482:22:21","nodeType":"EnumValue","src":"482:22:21"},{"id":2452,"name":"InvalidSignatureS","nameLocation":"514:17:21","nodeType":"EnumValue","src":"514:17:21"},{"id":2453,"name":"InvalidSignatureV","nameLocation":"541:17:21","nodeType":"EnumValue","src":"541:17:21"}],"name":"RecoverError","nameLocation":"416:12:21","nodeType":"EnumDefinition","src":"411:175:21"},{"body":{"id":2497,"nodeType":"Block","src":"646:457:21","statements":[{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$2454","typeString":"enum ECDSAUpgradeable.RecoverError"},"id":2463,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2460,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2457,"src":"660:5:21","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2454","typeString":"enum ECDSAUpgradeable.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2461,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2454,"src":"669:12:21","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$2454_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":2462,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"682:7:21","memberName":"NoError","nodeType":"MemberAccess","referencedDeclaration":2449,"src":"669:20:21","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2454","typeString":"enum ECDSAUpgradeable.RecoverError"}},"src":"660:29:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$2454","typeString":"enum ECDSAUpgradeable.RecoverError"},"id":2469,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2466,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2457,"src":"756:5:21","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2454","typeString":"enum ECDSAUpgradeable.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2467,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2454,"src":"765:12:21","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$2454_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":2468,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"778:16:21","memberName":"InvalidSignature","nodeType":"MemberAccess","referencedDeclaration":2450,"src":"765:29:21","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2454","typeString":"enum ECDSAUpgradeable.RecoverError"}},"src":"756:38:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$2454","typeString":"enum ECDSAUpgradeable.RecoverError"},"id":2478,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2475,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2457,"src":"865:5:21","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2454","typeString":"enum ECDSAUpgradeable.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2476,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2454,"src":"874:12:21","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$2454_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":2477,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"887:22:21","memberName":"InvalidSignatureLength","nodeType":"MemberAccess","referencedDeclaration":2451,"src":"874:35:21","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2454","typeString":"enum ECDSAUpgradeable.RecoverError"}},"src":"865:44:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$2454","typeString":"enum ECDSAUpgradeable.RecoverError"},"id":2487,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2484,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2457,"src":"987:5:21","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2454","typeString":"enum ECDSAUpgradeable.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2485,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2454,"src":"996:12:21","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$2454_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":2486,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1009:17:21","memberName":"InvalidSignatureS","nodeType":"MemberAccess","referencedDeclaration":2452,"src":"996:30:21","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2454","typeString":"enum ECDSAUpgradeable.RecoverError"}},"src":"987:39:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2493,"nodeType":"IfStatement","src":"983:114:21","trueBody":{"id":2492,"nodeType":"Block","src":"1028:69:21","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265202773272076616c7565","id":2489,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1049:36:21","typeDescriptions":{"typeIdentifier":"t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd","typeString":"literal_string \"ECDSA: invalid signature 's' value\""},"value":"ECDSA: invalid signature 's' value"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd","typeString":"literal_string \"ECDSA: invalid signature 's' value\""}],"id":2488,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"1042:6:21","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":2490,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1042:44:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2491,"nodeType":"ExpressionStatement","src":"1042:44:21"}]}},"id":2494,"nodeType":"IfStatement","src":"861:236:21","trueBody":{"id":2483,"nodeType":"Block","src":"911:66:21","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265206c656e677468","id":2480,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"932:33:21","typeDescriptions":{"typeIdentifier":"t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77","typeString":"literal_string \"ECDSA: invalid signature length\""},"value":"ECDSA: invalid signature length"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77","typeString":"literal_string \"ECDSA: invalid signature length\""}],"id":2479,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"925:6:21","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":2481,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"925:41:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2482,"nodeType":"ExpressionStatement","src":"925:41:21"}]}},"id":2495,"nodeType":"IfStatement","src":"752:345:21","trueBody":{"id":2474,"nodeType":"Block","src":"796:59:21","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265","id":2471,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"817:26:21","typeDescriptions":{"typeIdentifier":"t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be","typeString":"literal_string \"ECDSA: invalid signature\""},"value":"ECDSA: invalid signature"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be","typeString":"literal_string \"ECDSA: invalid signature\""}],"id":2470,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"810:6:21","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":2472,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"810:34:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2473,"nodeType":"ExpressionStatement","src":"810:34:21"}]}},"id":2496,"nodeType":"IfStatement","src":"656:441:21","trueBody":{"id":2465,"nodeType":"Block","src":"691:55:21","statements":[{"functionReturnParameters":2459,"id":2464,"nodeType":"Return","src":"705:7:21"}]}}]},"id":2498,"implemented":true,"kind":"function","modifiers":[],"name":"_throwError","nameLocation":"601:11:21","nodeType":"FunctionDefinition","parameters":{"id":2458,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2457,"mutability":"mutable","name":"error","nameLocation":"626:5:21","nodeType":"VariableDeclaration","scope":2498,"src":"613:18:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2454","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":2456,"nodeType":"UserDefinedTypeName","pathNode":{"id":2455,"name":"RecoverError","nameLocations":["613:12:21"],"nodeType":"IdentifierPath","referencedDeclaration":2454,"src":"613:12:21"},"referencedDeclaration":2454,"src":"613:12:21","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2454","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"src":"612:20:21"},"returnParameters":{"id":2459,"nodeType":"ParameterList","parameters":[],"src":"646:0:21"},"scope":2810,"src":"592:511:21","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":2543,"nodeType":"Block","src":"2271:626:21","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2514,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2511,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2503,"src":"2285:9:21","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2512,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2295:6:21","memberName":"length","nodeType":"MemberAccess","src":"2285:16:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"3635","id":2513,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2305:2:21","typeDescriptions":{"typeIdentifier":"t_rational_65_by_1","typeString":"int_const 65"},"value":"65"},"src":"2285:22:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2541,"nodeType":"Block","src":"2810:81:21","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":2535,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2840:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2534,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2832:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2533,"name":"address","nodeType":"ElementaryTypeName","src":"2832:7:21","typeDescriptions":{}}},"id":2536,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2832:10:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":2537,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2454,"src":"2844:12:21","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$2454_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":2538,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2857:22:21","memberName":"InvalidSignatureLength","nodeType":"MemberAccess","referencedDeclaration":2451,"src":"2844:35:21","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2454","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"id":2539,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2831:49:21","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$2454_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"functionReturnParameters":2510,"id":2540,"nodeType":"Return","src":"2824:56:21"}]},"id":2542,"nodeType":"IfStatement","src":"2281:610:21","trueBody":{"id":2532,"nodeType":"Block","src":"2309:495:21","statements":[{"assignments":[2516],"declarations":[{"constant":false,"id":2516,"mutability":"mutable","name":"r","nameLocation":"2331:1:21","nodeType":"VariableDeclaration","scope":2532,"src":"2323:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2515,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2323:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2517,"nodeType":"VariableDeclarationStatement","src":"2323:9:21"},{"assignments":[2519],"declarations":[{"constant":false,"id":2519,"mutability":"mutable","name":"s","nameLocation":"2354:1:21","nodeType":"VariableDeclaration","scope":2532,"src":"2346:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2518,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2346:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2520,"nodeType":"VariableDeclarationStatement","src":"2346:9:21"},{"assignments":[2522],"declarations":[{"constant":false,"id":2522,"mutability":"mutable","name":"v","nameLocation":"2375:1:21","nodeType":"VariableDeclaration","scope":2532,"src":"2369:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2521,"name":"uint8","nodeType":"ElementaryTypeName","src":"2369:5:21","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":2523,"nodeType":"VariableDeclarationStatement","src":"2369:7:21"},{"AST":{"nodeType":"YulBlock","src":"2577:171:21","statements":[{"nodeType":"YulAssignment","src":"2595:32:21","value":{"arguments":[{"arguments":[{"name":"signature","nodeType":"YulIdentifier","src":"2610:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"2621:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2606:3:21"},"nodeType":"YulFunctionCall","src":"2606:20:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2600:5:21"},"nodeType":"YulFunctionCall","src":"2600:27:21"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"2595:1:21"}]},{"nodeType":"YulAssignment","src":"2644:32:21","value":{"arguments":[{"arguments":[{"name":"signature","nodeType":"YulIdentifier","src":"2659:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"2670:4:21","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2655:3:21"},"nodeType":"YulFunctionCall","src":"2655:20:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2649:5:21"},"nodeType":"YulFunctionCall","src":"2649:27:21"},"variableNames":[{"name":"s","nodeType":"YulIdentifier","src":"2644:1:21"}]},{"nodeType":"YulAssignment","src":"2693:41:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2703:1:21","type":"","value":"0"},{"arguments":[{"arguments":[{"name":"signature","nodeType":"YulIdentifier","src":"2716:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"2727:4:21","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2712:3:21"},"nodeType":"YulFunctionCall","src":"2712:20:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2706:5:21"},"nodeType":"YulFunctionCall","src":"2706:27:21"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"2698:4:21"},"nodeType":"YulFunctionCall","src":"2698:36:21"},"variableNames":[{"name":"v","nodeType":"YulIdentifier","src":"2693:1:21"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":2516,"isOffset":false,"isSlot":false,"src":"2595:1:21","valueSize":1},{"declaration":2519,"isOffset":false,"isSlot":false,"src":"2644:1:21","valueSize":1},{"declaration":2503,"isOffset":false,"isSlot":false,"src":"2610:9:21","valueSize":1},{"declaration":2503,"isOffset":false,"isSlot":false,"src":"2659:9:21","valueSize":1},{"declaration":2503,"isOffset":false,"isSlot":false,"src":"2716:9:21","valueSize":1},{"declaration":2522,"isOffset":false,"isSlot":false,"src":"2693:1:21","valueSize":1}],"id":2524,"nodeType":"InlineAssembly","src":"2568:180:21"},{"expression":{"arguments":[{"id":2526,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2501,"src":"2779:4:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2527,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2522,"src":"2785:1:21","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":2528,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2516,"src":"2788:1:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2529,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2519,"src":"2791:1:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2525,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[2544,2618,2712],"referencedDeclaration":2712,"src":"2768:10:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$2454_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSAUpgradeable.RecoverError)"}},"id":2530,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2768:25:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$2454_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"functionReturnParameters":2510,"id":2531,"nodeType":"Return","src":"2761:32:21"}]}}]},"documentation":{"id":2499,"nodeType":"StructuredDocumentation","src":"1109:1053:21","text":" @dev Returns the address that signed a hashed message (`hash`) with\n `signature` or error string. This address can then be used for verification purposes.\n The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {toEthSignedMessageHash} on it.\n Documentation for signature generation:\n - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n _Available since v4.3._"},"id":2544,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"2176:10:21","nodeType":"FunctionDefinition","parameters":{"id":2504,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2501,"mutability":"mutable","name":"hash","nameLocation":"2195:4:21","nodeType":"VariableDeclaration","scope":2544,"src":"2187:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2500,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2187:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2503,"mutability":"mutable","name":"signature","nameLocation":"2214:9:21","nodeType":"VariableDeclaration","scope":2544,"src":"2201:22:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2502,"name":"bytes","nodeType":"ElementaryTypeName","src":"2201:5:21","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2186:38:21"},"returnParameters":{"id":2510,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2506,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2544,"src":"2248:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2505,"name":"address","nodeType":"ElementaryTypeName","src":"2248:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2509,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2544,"src":"2257:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2454","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":2508,"nodeType":"UserDefinedTypeName","pathNode":{"id":2507,"name":"RecoverError","nameLocations":["2257:12:21"],"nodeType":"IdentifierPath","referencedDeclaration":2454,"src":"2257:12:21"},"referencedDeclaration":2454,"src":"2257:12:21","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2454","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"src":"2247:23:21"},"scope":2810,"src":"2167:730:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2570,"nodeType":"Block","src":"3770:140:21","statements":[{"assignments":[2555,2558],"declarations":[{"constant":false,"id":2555,"mutability":"mutable","name":"recovered","nameLocation":"3789:9:21","nodeType":"VariableDeclaration","scope":2570,"src":"3781:17:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2554,"name":"address","nodeType":"ElementaryTypeName","src":"3781:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2558,"mutability":"mutable","name":"error","nameLocation":"3813:5:21","nodeType":"VariableDeclaration","scope":2570,"src":"3800:18:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2454","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":2557,"nodeType":"UserDefinedTypeName","pathNode":{"id":2556,"name":"RecoverError","nameLocations":["3800:12:21"],"nodeType":"IdentifierPath","referencedDeclaration":2454,"src":"3800:12:21"},"referencedDeclaration":2454,"src":"3800:12:21","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2454","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"id":2563,"initialValue":{"arguments":[{"id":2560,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2547,"src":"3833:4:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2561,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2549,"src":"3839:9:21","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2559,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[2544,2618,2712],"referencedDeclaration":2544,"src":"3822:10:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$_t_enum$_RecoverError_$2454_$","typeString":"function (bytes32,bytes memory) pure returns (address,enum ECDSAUpgradeable.RecoverError)"}},"id":2562,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3822:27:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$2454_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"3780:69:21"},{"expression":{"arguments":[{"id":2565,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2558,"src":"3871:5:21","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2454","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$2454","typeString":"enum ECDSAUpgradeable.RecoverError"}],"id":2564,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2498,"src":"3859:11:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$2454_$returns$__$","typeString":"function (enum ECDSAUpgradeable.RecoverError) pure"}},"id":2566,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3859:18:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2567,"nodeType":"ExpressionStatement","src":"3859:18:21"},{"expression":{"id":2568,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2555,"src":"3894:9:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2553,"id":2569,"nodeType":"Return","src":"3887:16:21"}]},"documentation":{"id":2545,"nodeType":"StructuredDocumentation","src":"2903:775:21","text":" @dev Returns the address that signed a hashed message (`hash`) with\n `signature`. This address can then be used for verification purposes.\n The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {toEthSignedMessageHash} on it."},"id":2571,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"3692:7:21","nodeType":"FunctionDefinition","parameters":{"id":2550,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2547,"mutability":"mutable","name":"hash","nameLocation":"3708:4:21","nodeType":"VariableDeclaration","scope":2571,"src":"3700:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2546,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3700:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2549,"mutability":"mutable","name":"signature","nameLocation":"3727:9:21","nodeType":"VariableDeclaration","scope":2571,"src":"3714:22:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2548,"name":"bytes","nodeType":"ElementaryTypeName","src":"3714:5:21","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3699:38:21"},"returnParameters":{"id":2553,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2552,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2571,"src":"3761:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2551,"name":"address","nodeType":"ElementaryTypeName","src":"3761:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3760:9:21"},"scope":2810,"src":"3683:227:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2617,"nodeType":"Block","src":"4267:203:21","statements":[{"assignments":[2587],"declarations":[{"constant":false,"id":2587,"mutability":"mutable","name":"s","nameLocation":"4285:1:21","nodeType":"VariableDeclaration","scope":2617,"src":"4277:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2586,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4277:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2594,"initialValue":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":2593,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2588,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2578,"src":"4289:2:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"arguments":[{"hexValue":"307837666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666","id":2591,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4302:66:21","typeDescriptions":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1","typeString":"int_const 5789...(69 digits omitted)...9967"},"value":"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1","typeString":"int_const 5789...(69 digits omitted)...9967"}],"id":2590,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4294:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":2589,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4294:7:21","typeDescriptions":{}}},"id":2592,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4294:75:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"4289:80:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"4277:92:21"},{"assignments":[2596],"declarations":[{"constant":false,"id":2596,"mutability":"mutable","name":"v","nameLocation":"4385:1:21","nodeType":"VariableDeclaration","scope":2617,"src":"4379:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2595,"name":"uint8","nodeType":"ElementaryTypeName","src":"4379:5:21","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":2609,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2607,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2604,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2601,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2578,"src":"4404:2:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2600,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4396:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2599,"name":"uint256","nodeType":"ElementaryTypeName","src":"4396:7:21","typeDescriptions":{}}},"id":2602,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4396:11:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":2603,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4411:3:21","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"4396:18:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2605,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4395:20:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3237","id":2606,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4418:2:21","typeDescriptions":{"typeIdentifier":"t_rational_27_by_1","typeString":"int_const 27"},"value":"27"},"src":"4395:25:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2598,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4389:5:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":2597,"name":"uint8","nodeType":"ElementaryTypeName","src":"4389:5:21","typeDescriptions":{}}},"id":2608,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4389:32:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"VariableDeclarationStatement","src":"4379:42:21"},{"expression":{"arguments":[{"id":2611,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2574,"src":"4449:4:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2612,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2596,"src":"4455:1:21","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":2613,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2576,"src":"4458:1:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2614,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2587,"src":"4461:1:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2610,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[2544,2618,2712],"referencedDeclaration":2712,"src":"4438:10:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$2454_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSAUpgradeable.RecoverError)"}},"id":2615,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4438:25:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$2454_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"functionReturnParameters":2585,"id":2616,"nodeType":"Return","src":"4431:32:21"}]},"documentation":{"id":2572,"nodeType":"StructuredDocumentation","src":"3916:243:21","text":" @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n _Available since v4.3._"},"id":2618,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"4173:10:21","nodeType":"FunctionDefinition","parameters":{"id":2579,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2574,"mutability":"mutable","name":"hash","nameLocation":"4192:4:21","nodeType":"VariableDeclaration","scope":2618,"src":"4184:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2573,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4184:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2576,"mutability":"mutable","name":"r","nameLocation":"4206:1:21","nodeType":"VariableDeclaration","scope":2618,"src":"4198:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2575,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4198:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2578,"mutability":"mutable","name":"vs","nameLocation":"4217:2:21","nodeType":"VariableDeclaration","scope":2618,"src":"4209:10:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2577,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4209:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4183:37:21"},"returnParameters":{"id":2585,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2581,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2618,"src":"4244:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2580,"name":"address","nodeType":"ElementaryTypeName","src":"4244:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2584,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2618,"src":"4253:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2454","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":2583,"nodeType":"UserDefinedTypeName","pathNode":{"id":2582,"name":"RecoverError","nameLocations":["4253:12:21"],"nodeType":"IdentifierPath","referencedDeclaration":2454,"src":"4253:12:21"},"referencedDeclaration":2454,"src":"4253:12:21","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2454","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"src":"4243:23:21"},"scope":2810,"src":"4164:306:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2647,"nodeType":"Block","src":"4721:136:21","statements":[{"assignments":[2631,2634],"declarations":[{"constant":false,"id":2631,"mutability":"mutable","name":"recovered","nameLocation":"4740:9:21","nodeType":"VariableDeclaration","scope":2647,"src":"4732:17:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2630,"name":"address","nodeType":"ElementaryTypeName","src":"4732:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2634,"mutability":"mutable","name":"error","nameLocation":"4764:5:21","nodeType":"VariableDeclaration","scope":2647,"src":"4751:18:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2454","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":2633,"nodeType":"UserDefinedTypeName","pathNode":{"id":2632,"name":"RecoverError","nameLocations":["4751:12:21"],"nodeType":"IdentifierPath","referencedDeclaration":2454,"src":"4751:12:21"},"referencedDeclaration":2454,"src":"4751:12:21","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2454","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"id":2640,"initialValue":{"arguments":[{"id":2636,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2621,"src":"4784:4:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2637,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2623,"src":"4790:1:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2638,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2625,"src":"4793:2:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2635,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[2544,2618,2712],"referencedDeclaration":2618,"src":"4773:10:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$2454_$","typeString":"function (bytes32,bytes32,bytes32) pure returns (address,enum ECDSAUpgradeable.RecoverError)"}},"id":2639,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4773:23:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$2454_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"4731:65:21"},{"expression":{"arguments":[{"id":2642,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2634,"src":"4818:5:21","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2454","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$2454","typeString":"enum ECDSAUpgradeable.RecoverError"}],"id":2641,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2498,"src":"4806:11:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$2454_$returns$__$","typeString":"function (enum ECDSAUpgradeable.RecoverError) pure"}},"id":2643,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4806:18:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2644,"nodeType":"ExpressionStatement","src":"4806:18:21"},{"expression":{"id":2645,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2631,"src":"4841:9:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2629,"id":2646,"nodeType":"Return","src":"4834:16:21"}]},"documentation":{"id":2619,"nodeType":"StructuredDocumentation","src":"4476:154:21","text":" @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n _Available since v4.2._"},"id":2648,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"4644:7:21","nodeType":"FunctionDefinition","parameters":{"id":2626,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2621,"mutability":"mutable","name":"hash","nameLocation":"4660:4:21","nodeType":"VariableDeclaration","scope":2648,"src":"4652:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2620,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4652:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2623,"mutability":"mutable","name":"r","nameLocation":"4674:1:21","nodeType":"VariableDeclaration","scope":2648,"src":"4666:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2622,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4666:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2625,"mutability":"mutable","name":"vs","nameLocation":"4685:2:21","nodeType":"VariableDeclaration","scope":2648,"src":"4677:10:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2624,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4677:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4651:37:21"},"returnParameters":{"id":2629,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2628,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2648,"src":"4712:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2627,"name":"address","nodeType":"ElementaryTypeName","src":"4712:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4711:9:21"},"scope":2810,"src":"4635:222:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2711,"nodeType":"Block","src":"5142:1345:21","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2670,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2667,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2657,"src":"6038:1:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2666,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6030:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2665,"name":"uint256","nodeType":"ElementaryTypeName","src":"6030:7:21","typeDescriptions":{}}},"id":2668,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6030:10:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"307837464646464646464646464646464646464646464646464646464646464646463544353736453733353741343530314444464539324634363638314232304130","id":2669,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6043:66:21","typeDescriptions":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926418782139537452191302581570759080747168_by_1","typeString":"int_const 5789...(69 digits omitted)...7168"},"value":"0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0"},"src":"6030:79:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2680,"nodeType":"IfStatement","src":"6026:161:21","trueBody":{"id":2679,"nodeType":"Block","src":"6111:76:21","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":2673,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6141:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2672,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6133:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2671,"name":"address","nodeType":"ElementaryTypeName","src":"6133:7:21","typeDescriptions":{}}},"id":2674,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6133:10:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":2675,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2454,"src":"6145:12:21","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$2454_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":2676,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6158:17:21","memberName":"InvalidSignatureS","nodeType":"MemberAccess","referencedDeclaration":2452,"src":"6145:30:21","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2454","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"id":2677,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6132:44:21","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$2454_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"functionReturnParameters":2664,"id":2678,"nodeType":"Return","src":"6125:51:21"}]}},{"assignments":[2682],"declarations":[{"constant":false,"id":2682,"mutability":"mutable","name":"signer","nameLocation":"6289:6:21","nodeType":"VariableDeclaration","scope":2711,"src":"6281:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2681,"name":"address","nodeType":"ElementaryTypeName","src":"6281:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2689,"initialValue":{"arguments":[{"id":2684,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2651,"src":"6308:4:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2685,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2653,"src":"6314:1:21","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":2686,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2655,"src":"6317:1:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2687,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2657,"src":"6320:1:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2683,"name":"ecrecover","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-6,"src":"6298:9:21","typeDescriptions":{"typeIdentifier":"t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address)"}},"id":2688,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6298:24:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"6281:41:21"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2695,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2690,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2682,"src":"6336:6:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2693,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6354:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2692,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6346:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2691,"name":"address","nodeType":"ElementaryTypeName","src":"6346:7:21","typeDescriptions":{}}},"id":2694,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6346:10:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6336:20:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2705,"nodeType":"IfStatement","src":"6332:101:21","trueBody":{"id":2704,"nodeType":"Block","src":"6358:75:21","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":2698,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6388:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2697,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6380:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2696,"name":"address","nodeType":"ElementaryTypeName","src":"6380:7:21","typeDescriptions":{}}},"id":2699,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6380:10:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":2700,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2454,"src":"6392:12:21","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$2454_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":2701,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6405:16:21","memberName":"InvalidSignature","nodeType":"MemberAccess","referencedDeclaration":2450,"src":"6392:29:21","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2454","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"id":2702,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6379:43:21","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$2454_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"functionReturnParameters":2664,"id":2703,"nodeType":"Return","src":"6372:50:21"}]}},{"expression":{"components":[{"id":2706,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2682,"src":"6451:6:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":2707,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2454,"src":"6459:12:21","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$2454_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":2708,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6472:7:21","memberName":"NoError","nodeType":"MemberAccess","referencedDeclaration":2449,"src":"6459:20:21","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2454","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"id":2709,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6450:30:21","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$2454_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"functionReturnParameters":2664,"id":2710,"nodeType":"Return","src":"6443:37:21"}]},"documentation":{"id":2649,"nodeType":"StructuredDocumentation","src":"4863:163:21","text":" @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n `r` and `s` signature fields separately.\n _Available since v4.3._"},"id":2712,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"5040:10:21","nodeType":"FunctionDefinition","parameters":{"id":2658,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2651,"mutability":"mutable","name":"hash","nameLocation":"5059:4:21","nodeType":"VariableDeclaration","scope":2712,"src":"5051:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2650,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5051:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2653,"mutability":"mutable","name":"v","nameLocation":"5071:1:21","nodeType":"VariableDeclaration","scope":2712,"src":"5065:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2652,"name":"uint8","nodeType":"ElementaryTypeName","src":"5065:5:21","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":2655,"mutability":"mutable","name":"r","nameLocation":"5082:1:21","nodeType":"VariableDeclaration","scope":2712,"src":"5074:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2654,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5074:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2657,"mutability":"mutable","name":"s","nameLocation":"5093:1:21","nodeType":"VariableDeclaration","scope":2712,"src":"5085:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2656,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5085:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5050:45:21"},"returnParameters":{"id":2664,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2660,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2712,"src":"5119:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2659,"name":"address","nodeType":"ElementaryTypeName","src":"5119:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2663,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2712,"src":"5128:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2454","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":2662,"nodeType":"UserDefinedTypeName","pathNode":{"id":2661,"name":"RecoverError","nameLocations":["5128:12:21"],"nodeType":"IdentifierPath","referencedDeclaration":2454,"src":"5128:12:21"},"referencedDeclaration":2454,"src":"5128:12:21","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2454","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"src":"5118:23:21"},"scope":2810,"src":"5031:1456:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2744,"nodeType":"Block","src":"6714:138:21","statements":[{"assignments":[2727,2730],"declarations":[{"constant":false,"id":2727,"mutability":"mutable","name":"recovered","nameLocation":"6733:9:21","nodeType":"VariableDeclaration","scope":2744,"src":"6725:17:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2726,"name":"address","nodeType":"ElementaryTypeName","src":"6725:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2730,"mutability":"mutable","name":"error","nameLocation":"6757:5:21","nodeType":"VariableDeclaration","scope":2744,"src":"6744:18:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2454","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":2729,"nodeType":"UserDefinedTypeName","pathNode":{"id":2728,"name":"RecoverError","nameLocations":["6744:12:21"],"nodeType":"IdentifierPath","referencedDeclaration":2454,"src":"6744:12:21"},"referencedDeclaration":2454,"src":"6744:12:21","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2454","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"id":2737,"initialValue":{"arguments":[{"id":2732,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2715,"src":"6777:4:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2733,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2717,"src":"6783:1:21","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":2734,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2719,"src":"6786:1:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2735,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2721,"src":"6789:1:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2731,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[2544,2618,2712],"referencedDeclaration":2712,"src":"6766:10:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$2454_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSAUpgradeable.RecoverError)"}},"id":2736,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6766:25:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$2454_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"6724:67:21"},{"expression":{"arguments":[{"id":2739,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2730,"src":"6813:5:21","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2454","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$2454","typeString":"enum ECDSAUpgradeable.RecoverError"}],"id":2738,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2498,"src":"6801:11:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$2454_$returns$__$","typeString":"function (enum ECDSAUpgradeable.RecoverError) pure"}},"id":2740,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6801:18:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2741,"nodeType":"ExpressionStatement","src":"6801:18:21"},{"expression":{"id":2742,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2727,"src":"6836:9:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2725,"id":2743,"nodeType":"Return","src":"6829:16:21"}]},"documentation":{"id":2713,"nodeType":"StructuredDocumentation","src":"6493:122:21","text":" @dev Overload of {ECDSA-recover} that receives the `v`,\n `r` and `s` signature fields separately."},"id":2745,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"6629:7:21","nodeType":"FunctionDefinition","parameters":{"id":2722,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2715,"mutability":"mutable","name":"hash","nameLocation":"6645:4:21","nodeType":"VariableDeclaration","scope":2745,"src":"6637:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2714,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6637:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2717,"mutability":"mutable","name":"v","nameLocation":"6657:1:21","nodeType":"VariableDeclaration","scope":2745,"src":"6651:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2716,"name":"uint8","nodeType":"ElementaryTypeName","src":"6651:5:21","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":2719,"mutability":"mutable","name":"r","nameLocation":"6668:1:21","nodeType":"VariableDeclaration","scope":2745,"src":"6660:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2718,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6660:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2721,"mutability":"mutable","name":"s","nameLocation":"6679:1:21","nodeType":"VariableDeclaration","scope":2745,"src":"6671:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2720,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6671:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6636:45:21"},"returnParameters":{"id":2725,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2724,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2745,"src":"6705:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2723,"name":"address","nodeType":"ElementaryTypeName","src":"6705:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6704:9:21"},"scope":2810,"src":"6620:232:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2754,"nodeType":"Block","src":"7228:310:21","statements":[{"AST":{"nodeType":"YulBlock","src":"7384:148:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7405:4:21","type":"","value":"0x00"},{"hexValue":"19457468657265756d205369676e6564204d6573736167653a0a3332","kind":"string","nodeType":"YulLiteral","src":"7411:34:21","type":"","value":"\u0019Ethereum Signed Message:\n32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7398:6:21"},"nodeType":"YulFunctionCall","src":"7398:48:21"},"nodeType":"YulExpressionStatement","src":"7398:48:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7466:4:21","type":"","value":"0x1c"},{"name":"hash","nodeType":"YulIdentifier","src":"7472:4:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7459:6:21"},"nodeType":"YulFunctionCall","src":"7459:18:21"},"nodeType":"YulExpressionStatement","src":"7459:18:21"},{"nodeType":"YulAssignment","src":"7490:32:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7511:4:21","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"7517:4:21","type":"","value":"0x3c"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"7501:9:21"},"nodeType":"YulFunctionCall","src":"7501:21:21"},"variableNames":[{"name":"message","nodeType":"YulIdentifier","src":"7490:7:21"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":2748,"isOffset":false,"isSlot":false,"src":"7472:4:21","valueSize":1},{"declaration":2751,"isOffset":false,"isSlot":false,"src":"7490:7:21","valueSize":1}],"id":2753,"nodeType":"InlineAssembly","src":"7375:157:21"}]},"documentation":{"id":2746,"nodeType":"StructuredDocumentation","src":"6858:279:21","text":" @dev Returns an Ethereum Signed Message, created from a `hash`. This\n produces hash corresponding to the one signed with the\n https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n JSON-RPC method as part of EIP-191.\n See {recover}."},"id":2755,"implemented":true,"kind":"function","modifiers":[],"name":"toEthSignedMessageHash","nameLocation":"7151:22:21","nodeType":"FunctionDefinition","parameters":{"id":2749,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2748,"mutability":"mutable","name":"hash","nameLocation":"7182:4:21","nodeType":"VariableDeclaration","scope":2755,"src":"7174:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2747,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7174:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7173:14:21"},"returnParameters":{"id":2752,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2751,"mutability":"mutable","name":"message","nameLocation":"7219:7:21","nodeType":"VariableDeclaration","scope":2755,"src":"7211:15:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2750,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7211:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7210:17:21"},"scope":2810,"src":"7142:396:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2776,"nodeType":"Block","src":"7903:127:21","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"19457468657265756d205369676e6564204d6573736167653a0a","id":2766,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7947:32:21","typeDescriptions":{"typeIdentifier":"t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""},"value":"\u0019Ethereum Signed Message:\n"},{"arguments":[{"expression":{"id":2769,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2758,"src":"8009:1:21","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2770,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8011:6:21","memberName":"length","nodeType":"MemberAccess","src":"8009:8:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2767,"name":"StringsUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2444,"src":"7981:18:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StringsUpgradeable_$2444_$","typeString":"type(library StringsUpgradeable)"}},"id":2768,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8000:8:21","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":2274,"src":"7981:27:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":2771,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7981:37:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":2772,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2758,"src":"8020:1:21","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2764,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"7930:3:21","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2765,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7934:12:21","memberName":"encodePacked","nodeType":"MemberAccess","src":"7930:16:21","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2773,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7930:92:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2763,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"7920:9:21","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2774,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7920:103:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2762,"id":2775,"nodeType":"Return","src":"7913:110:21"}]},"documentation":{"id":2756,"nodeType":"StructuredDocumentation","src":"7544:274:21","text":" @dev Returns an Ethereum Signed Message, created from `s`. This\n produces hash corresponding to the one signed with the\n https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n JSON-RPC method as part of EIP-191.\n See {recover}."},"id":2777,"implemented":true,"kind":"function","modifiers":[],"name":"toEthSignedMessageHash","nameLocation":"7832:22:21","nodeType":"FunctionDefinition","parameters":{"id":2759,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2758,"mutability":"mutable","name":"s","nameLocation":"7868:1:21","nodeType":"VariableDeclaration","scope":2777,"src":"7855:14:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2757,"name":"bytes","nodeType":"ElementaryTypeName","src":"7855:5:21","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7854:16:21"},"returnParameters":{"id":2762,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2761,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2777,"src":"7894:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2760,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7894:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7893:9:21"},"scope":2810,"src":"7823:207:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2788,"nodeType":"Block","src":"8476:290:21","statements":[{"AST":{"nodeType":"YulBlock","src":"8538:222:21","statements":[{"nodeType":"YulVariableDeclaration","src":"8552:22:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8569:4:21","type":"","value":"0x40"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8563:5:21"},"nodeType":"YulFunctionCall","src":"8563:11:21"},"variables":[{"name":"ptr","nodeType":"YulTypedName","src":"8556:3:21","type":""}]},{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"8594:3:21"},{"hexValue":"1901","kind":"string","nodeType":"YulLiteral","src":"8599:10:21","type":"","value":"\u0019\u0001"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8587:6:21"},"nodeType":"YulFunctionCall","src":"8587:23:21"},"nodeType":"YulExpressionStatement","src":"8587:23:21"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"8634:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"8639:4:21","type":"","value":"0x02"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8630:3:21"},"nodeType":"YulFunctionCall","src":"8630:14:21"},{"name":"domainSeparator","nodeType":"YulIdentifier","src":"8646:15:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8623:6:21"},"nodeType":"YulFunctionCall","src":"8623:39:21"},"nodeType":"YulExpressionStatement","src":"8623:39:21"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"8686:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"8691:4:21","type":"","value":"0x22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8682:3:21"},"nodeType":"YulFunctionCall","src":"8682:14:21"},{"name":"structHash","nodeType":"YulIdentifier","src":"8698:10:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8675:6:21"},"nodeType":"YulFunctionCall","src":"8675:34:21"},"nodeType":"YulExpressionStatement","src":"8675:34:21"},{"nodeType":"YulAssignment","src":"8722:28:21","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"8740:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"8745:4:21","type":"","value":"0x42"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"8730:9:21"},"nodeType":"YulFunctionCall","src":"8730:20:21"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"8722:4:21"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":2785,"isOffset":false,"isSlot":false,"src":"8722:4:21","valueSize":1},{"declaration":2780,"isOffset":false,"isSlot":false,"src":"8646:15:21","valueSize":1},{"declaration":2782,"isOffset":false,"isSlot":false,"src":"8698:10:21","valueSize":1}],"id":2787,"nodeType":"InlineAssembly","src":"8529:231:21"}]},"documentation":{"id":2778,"nodeType":"StructuredDocumentation","src":"8036:328:21","text":" @dev Returns an Ethereum Signed Typed Data, created from a\n `domainSeparator` and a `structHash`. This produces hash corresponding\n to the one signed with the\n https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n JSON-RPC method as part of EIP-712.\n See {recover}."},"id":2789,"implemented":true,"kind":"function","modifiers":[],"name":"toTypedDataHash","nameLocation":"8378:15:21","nodeType":"FunctionDefinition","parameters":{"id":2783,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2780,"mutability":"mutable","name":"domainSeparator","nameLocation":"8402:15:21","nodeType":"VariableDeclaration","scope":2789,"src":"8394:23:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2779,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8394:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2782,"mutability":"mutable","name":"structHash","nameLocation":"8427:10:21","nodeType":"VariableDeclaration","scope":2789,"src":"8419:18:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2781,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8419:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8393:45:21"},"returnParameters":{"id":2786,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2785,"mutability":"mutable","name":"data","nameLocation":"8470:4:21","nodeType":"VariableDeclaration","scope":2789,"src":"8462:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2784,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8462:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8461:14:21"},"scope":2810,"src":"8369:397:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2808,"nodeType":"Block","src":"9081:80:21","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"1900","id":2802,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9125:10:21","typeDescriptions":{"typeIdentifier":"t_stringliteral_73fd5d154550a4a103564cb191928cd38898034de1b952dc21b290898b4b697a","typeString":"literal_string hex\"1900\""},"value":"\u0019\u0000"},{"id":2803,"name":"validator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2792,"src":"9137:9:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2804,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2794,"src":"9148:4:21","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_73fd5d154550a4a103564cb191928cd38898034de1b952dc21b290898b4b697a","typeString":"literal_string hex\"1900\""},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2800,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"9108:3:21","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2801,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9112:12:21","memberName":"encodePacked","nodeType":"MemberAccess","src":"9108:16:21","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2805,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9108:45:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2799,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"9098:9:21","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2806,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9098:56:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2798,"id":2807,"nodeType":"Return","src":"9091:63:21"}]},"documentation":{"id":2790,"nodeType":"StructuredDocumentation","src":"8772:193:21","text":" @dev Returns an Ethereum Signed Data with intended validator, created from a\n `validator` and `data` according to the version 0 of EIP-191.\n See {recover}."},"id":2809,"implemented":true,"kind":"function","modifiers":[],"name":"toDataWithIntendedValidatorHash","nameLocation":"8979:31:21","nodeType":"FunctionDefinition","parameters":{"id":2795,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2792,"mutability":"mutable","name":"validator","nameLocation":"9019:9:21","nodeType":"VariableDeclaration","scope":2809,"src":"9011:17:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2791,"name":"address","nodeType":"ElementaryTypeName","src":"9011:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2794,"mutability":"mutable","name":"data","nameLocation":"9043:4:21","nodeType":"VariableDeclaration","scope":2809,"src":"9030:17:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2793,"name":"bytes","nodeType":"ElementaryTypeName","src":"9030:5:21","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"9010:38:21"},"returnParameters":{"id":2798,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2797,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2809,"src":"9072:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2796,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9072:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"9071:9:21"},"scope":2810,"src":"8970:191:21","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2811,"src":"380:8783:21","usedErrors":[]}],"src":"112:9052:21"},"id":21},"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol","exportedSymbols":{"AddressUpgradeable":[2063],"ECDSAUpgradeable":[2810],"EIP712Upgradeable":[3094],"IERC5267Upgradeable":[756],"Initializable":[1269],"MathUpgradeable":[4016],"SignedMathUpgradeable":[4121],"StringsUpgradeable":[2444]},"id":3095,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2812,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"113:23:22"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol","file":"./ECDSAUpgradeable.sol","id":2813,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3095,"sourceUnit":2811,"src":"138:32:22","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/interfaces/IERC5267Upgradeable.sol","file":"../../interfaces/IERC5267Upgradeable.sol","id":2814,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3095,"sourceUnit":757,"src":"171:50:22","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../../proxy/utils/Initializable.sol","id":2815,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3095,"sourceUnit":1270,"src":"222:45:22","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":2817,"name":"Initializable","nameLocations":["1826:13:22"],"nodeType":"IdentifierPath","referencedDeclaration":1269,"src":"1826:13:22"},"id":2818,"nodeType":"InheritanceSpecifier","src":"1826:13:22"},{"baseName":{"id":2819,"name":"IERC5267Upgradeable","nameLocations":["1841:19:22"],"nodeType":"IdentifierPath","referencedDeclaration":756,"src":"1841:19:22"},"id":2820,"nodeType":"InheritanceSpecifier","src":"1841:19:22"}],"canonicalName":"EIP712Upgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":2816,"nodeType":"StructuredDocumentation","src":"269:1517:22","text":" @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n they need in their contracts using a combination of `abi.encode` and `keccak256`.\n This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n ({_hashTypedDataV4}).\n The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n the chain id to protect against replay attacks on an eventual fork of the chain.\n NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\n separator of the implementation contract. This will cause the `_domainSeparatorV4` function to always rebuild the\n separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\n _Available since v3.4._\n @custom:storage-size 52"},"fullyImplemented":true,"id":3094,"linearizedBaseContracts":[3094,756,1269],"name":"EIP712Upgradeable","nameLocation":"1805:17:22","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":2825,"mutability":"constant","name":"_TYPE_HASH","nameLocation":"1892:10:22","nodeType":"VariableDeclaration","scope":3094,"src":"1867:141:22","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2821,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1867:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429","id":2823,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1923:84:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f","typeString":"literal_string \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\""},"value":"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f","typeString":"literal_string \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\""}],"id":2822,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1913:9:22","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2824,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1913:95:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"constant":false,"documentation":{"id":2826,"nodeType":"StructuredDocumentation","src":"2015:40:22","text":"@custom:oz-renamed-from _HASHED_NAME"},"id":2828,"mutability":"mutable","name":"_hashedName","nameLocation":"2076:11:22","nodeType":"VariableDeclaration","scope":3094,"src":"2060:27:22","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2827,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2060:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"constant":false,"documentation":{"id":2829,"nodeType":"StructuredDocumentation","src":"2093:43:22","text":"@custom:oz-renamed-from _HASHED_VERSION"},"id":2831,"mutability":"mutable","name":"_hashedVersion","nameLocation":"2157:14:22","nodeType":"VariableDeclaration","scope":3094,"src":"2141:30:22","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2830,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2141:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"constant":false,"id":2833,"mutability":"mutable","name":"_name","nameLocation":"2193:5:22","nodeType":"VariableDeclaration","scope":3094,"src":"2178:20:22","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":2832,"name":"string","nodeType":"ElementaryTypeName","src":"2178:6:22","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":2835,"mutability":"mutable","name":"_version","nameLocation":"2219:8:22","nodeType":"VariableDeclaration","scope":3094,"src":"2204:23:22","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":2834,"name":"string","nodeType":"ElementaryTypeName","src":"2204:6:22","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"body":{"id":2850,"nodeType":"Block","src":"2890:55:22","statements":[{"expression":{"arguments":[{"id":2846,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"2924:4:22","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":2847,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2840,"src":"2930:7:22","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2845,"name":"__EIP712_init_unchained","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2877,"src":"2900:23:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory,string memory)"}},"id":2848,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2900:38:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2849,"nodeType":"ExpressionStatement","src":"2900:38:22"}]},"documentation":{"id":2836,"nodeType":"StructuredDocumentation","src":"2234:559:22","text":" @dev Initializes the domain separator and parameter caches.\n The meaning of `name` and `version` is specified in\n https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n - `version`: the current major version of the signing domain.\n NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n contract upgrade]."},"id":2851,"implemented":true,"kind":"function","modifiers":[{"id":2843,"kind":"modifierInvocation","modifierName":{"id":2842,"name":"onlyInitializing","nameLocations":["2873:16:22"],"nodeType":"IdentifierPath","referencedDeclaration":1214,"src":"2873:16:22"},"nodeType":"ModifierInvocation","src":"2873:16:22"}],"name":"__EIP712_init","nameLocation":"2807:13:22","nodeType":"FunctionDefinition","parameters":{"id":2841,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2838,"mutability":"mutable","name":"name","nameLocation":"2835:4:22","nodeType":"VariableDeclaration","scope":2851,"src":"2821:18:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2837,"name":"string","nodeType":"ElementaryTypeName","src":"2821:6:22","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2840,"mutability":"mutable","name":"version","nameLocation":"2855:7:22","nodeType":"VariableDeclaration","scope":2851,"src":"2841:21:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2839,"name":"string","nodeType":"ElementaryTypeName","src":"2841:6:22","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2820:43:22"},"returnParameters":{"id":2844,"nodeType":"ParameterList","parameters":[],"src":"2890:0:22"},"scope":3094,"src":"2798:147:22","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2876,"nodeType":"Block","src":"3053:165:22","statements":[{"expression":{"id":2862,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2860,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2833,"src":"3063:5:22","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2861,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2853,"src":"3071:4:22","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"3063:12:22","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":2863,"nodeType":"ExpressionStatement","src":"3063:12:22"},{"expression":{"id":2866,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2864,"name":"_version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2835,"src":"3085:8:22","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2865,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2855,"src":"3096:7:22","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"3085:18:22","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":2867,"nodeType":"ExpressionStatement","src":"3085:18:22"},{"expression":{"id":2870,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2868,"name":"_hashedName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2828,"src":"3168:11:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":2869,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3182:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3168:15:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2871,"nodeType":"ExpressionStatement","src":"3168:15:22"},{"expression":{"id":2874,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2872,"name":"_hashedVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2831,"src":"3193:14:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":2873,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3210:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3193:18:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2875,"nodeType":"ExpressionStatement","src":"3193:18:22"}]},"id":2877,"implemented":true,"kind":"function","modifiers":[{"id":2858,"kind":"modifierInvocation","modifierName":{"id":2857,"name":"onlyInitializing","nameLocations":["3036:16:22"],"nodeType":"IdentifierPath","referencedDeclaration":1214,"src":"3036:16:22"},"nodeType":"ModifierInvocation","src":"3036:16:22"}],"name":"__EIP712_init_unchained","nameLocation":"2960:23:22","nodeType":"FunctionDefinition","parameters":{"id":2856,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2853,"mutability":"mutable","name":"name","nameLocation":"2998:4:22","nodeType":"VariableDeclaration","scope":2877,"src":"2984:18:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2852,"name":"string","nodeType":"ElementaryTypeName","src":"2984:6:22","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2855,"mutability":"mutable","name":"version","nameLocation":"3018:7:22","nodeType":"VariableDeclaration","scope":2877,"src":"3004:21:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2854,"name":"string","nodeType":"ElementaryTypeName","src":"3004:6:22","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2983:43:22"},"returnParameters":{"id":2859,"nodeType":"ParameterList","parameters":[],"src":"3053:0:22"},"scope":3094,"src":"2951:267:22","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2886,"nodeType":"Block","src":"3366:47:22","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":2883,"name":"_buildDomainSeparator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2910,"src":"3383:21:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes32_$","typeString":"function () view returns (bytes32)"}},"id":2884,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3383:23:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2882,"id":2885,"nodeType":"Return","src":"3376:30:22"}]},"documentation":{"id":2878,"nodeType":"StructuredDocumentation","src":"3224:75:22","text":" @dev Returns the domain separator for the current chain."},"id":2887,"implemented":true,"kind":"function","modifiers":[],"name":"_domainSeparatorV4","nameLocation":"3313:18:22","nodeType":"FunctionDefinition","parameters":{"id":2879,"nodeType":"ParameterList","parameters":[],"src":"3331:2:22"},"returnParameters":{"id":2882,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2881,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2887,"src":"3357:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2880,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3357:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3356:9:22"},"scope":3094,"src":"3304:109:22","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2909,"nodeType":"Block","src":"3483:128:22","statements":[{"expression":{"arguments":[{"arguments":[{"id":2895,"name":"_TYPE_HASH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2825,"src":"3521:10:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"id":2896,"name":"_EIP712NameHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3043,"src":"3533:15:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes32_$","typeString":"function () view returns (bytes32)"}},"id":2897,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3533:17:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"id":2898,"name":"_EIP712VersionHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3088,"src":"3552:18:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes32_$","typeString":"function () view returns (bytes32)"}},"id":2899,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3552:20:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":2900,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"3574:5:22","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2901,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3580:7:22","memberName":"chainid","nodeType":"MemberAccess","src":"3574:13:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":2904,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3597:4:22","typeDescriptions":{"typeIdentifier":"t_contract$_EIP712Upgradeable_$3094","typeString":"contract EIP712Upgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_EIP712Upgradeable_$3094","typeString":"contract EIP712Upgradeable"}],"id":2903,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3589:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2902,"name":"address","nodeType":"ElementaryTypeName","src":"3589:7:22","typeDescriptions":{}}},"id":2905,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3589:13:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":2893,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3510:3:22","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2894,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3514:6:22","memberName":"encode","nodeType":"MemberAccess","src":"3510:10:22","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2906,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3510:93:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2892,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"3500:9:22","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2907,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3500:104:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2891,"id":2908,"nodeType":"Return","src":"3493:111:22"}]},"id":2910,"implemented":true,"kind":"function","modifiers":[],"name":"_buildDomainSeparator","nameLocation":"3428:21:22","nodeType":"FunctionDefinition","parameters":{"id":2888,"nodeType":"ParameterList","parameters":[],"src":"3449:2:22"},"returnParameters":{"id":2891,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2890,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2910,"src":"3474:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2889,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3474:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3473:9:22"},"scope":3094,"src":"3419:192:22","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":2925,"nodeType":"Block","src":"4322:90:22","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":2920,"name":"_domainSeparatorV4","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2887,"src":"4372:18:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes32_$","typeString":"function () view returns (bytes32)"}},"id":2921,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4372:20:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2922,"name":"structHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2913,"src":"4394:10:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":2918,"name":"ECDSAUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2810,"src":"4339:16:22","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ECDSAUpgradeable_$2810_$","typeString":"type(library ECDSAUpgradeable)"}},"id":2919,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4356:15:22","memberName":"toTypedDataHash","nodeType":"MemberAccess","referencedDeclaration":2789,"src":"4339:32:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":2923,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4339:66:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2917,"id":2924,"nodeType":"Return","src":"4332:73:22"}]},"documentation":{"id":2911,"nodeType":"StructuredDocumentation","src":"3617:614:22","text":" @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n function returns the hash of the fully encoded EIP712 message for this domain.\n This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n ```solidity\n bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     keccak256(\"Mail(address to,string contents)\"),\n     mailTo,\n     keccak256(bytes(mailContents))\n )));\n address signer = ECDSA.recover(digest, signature);\n ```"},"id":2926,"implemented":true,"kind":"function","modifiers":[],"name":"_hashTypedDataV4","nameLocation":"4245:16:22","nodeType":"FunctionDefinition","parameters":{"id":2914,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2913,"mutability":"mutable","name":"structHash","nameLocation":"4270:10:22","nodeType":"VariableDeclaration","scope":2926,"src":"4262:18:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2912,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4262:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4261:20:22"},"returnParameters":{"id":2917,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2916,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2926,"src":"4313:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2915,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4313:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4312:9:22"},"scope":3094,"src":"4236:176:22","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[755],"body":{"id":2979,"nodeType":"Block","src":"4845:516:22","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2953,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":2949,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2947,"name":"_hashedName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2828,"src":"5066:11:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2948,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5081:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5066:16:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":2952,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2950,"name":"_hashedVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2831,"src":"5086:14:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2951,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5104:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5086:19:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5066:39:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4549503731323a20556e696e697469616c697a6564","id":2954,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5107:23:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_2e5045ff73280aa8e8acd8c82710f23812497f87f7f576e2220a2ddd0d45eade","typeString":"literal_string \"EIP712: Uninitialized\""},"value":"EIP712: Uninitialized"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2e5045ff73280aa8e8acd8c82710f23812497f87f7f576e2220a2ddd0d45eade","typeString":"literal_string \"EIP712: Uninitialized\""}],"id":2946,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5058:7:22","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2955,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5058:73:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2956,"nodeType":"ExpressionStatement","src":"5058:73:22"},{"expression":{"components":[{"hexValue":"0f","id":2957,"isConstant":false,"isLValue":false,"isPure":true,"kind":"hexString","lValueRequested":false,"nodeType":"Literal","src":"5163:7:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_3d725c5ee53025f027da36bea8d3af3b6a3e9d2d1542d47c162631de48e66c1c","typeString":"literal_string hex\"0f\""},"value":"\u000f"},{"arguments":[],"expression":{"argumentTypes":[],"id":2958,"name":"_EIP712Name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2989,"src":"5193:11:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_string_memory_ptr_$","typeString":"function () view returns (string memory)"}},"id":2959,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5193:13:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[],"expression":{"argumentTypes":[],"id":2960,"name":"_EIP712Version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2998,"src":"5220:14:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_string_memory_ptr_$","typeString":"function () view returns (string memory)"}},"id":2961,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5220:16:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"expression":{"id":2962,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"5250:5:22","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2963,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5256:7:22","memberName":"chainid","nodeType":"MemberAccess","src":"5250:13:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":2966,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5285:4:22","typeDescriptions":{"typeIdentifier":"t_contract$_EIP712Upgradeable_$3094","typeString":"contract EIP712Upgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_EIP712Upgradeable_$3094","typeString":"contract EIP712Upgradeable"}],"id":2965,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5277:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2964,"name":"address","nodeType":"ElementaryTypeName","src":"5277:7:22","typeDescriptions":{}}},"id":2967,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5277:13:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":2970,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5312:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2969,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5304:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":2968,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5304:7:22","typeDescriptions":{}}},"id":2971,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5304:10:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[{"hexValue":"30","id":2975,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5342:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2974,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"5328:13:22","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"},"typeName":{"baseType":{"id":2972,"name":"uint256","nodeType":"ElementaryTypeName","src":"5332:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2973,"nodeType":"ArrayTypeName","src":"5332:9:22","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}}},"id":2976,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5328:16:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}}],"id":2977,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5149:205:22","typeDescriptions":{"typeIdentifier":"t_tuple$_t_stringliteral_3d725c5ee53025f027da36bea8d3af3b6a3e9d2d1542d47c162631de48e66c1c_$_t_string_memory_ptr_$_t_string_memory_ptr_$_t_uint256_$_t_address_$_t_bytes32_$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"tuple(literal_string hex\"0f\",string memory,string memory,uint256,address,bytes32,uint256[] memory)"}},"functionReturnParameters":2945,"id":2978,"nodeType":"Return","src":"5142:212:22"}]},"documentation":{"id":2927,"nodeType":"StructuredDocumentation","src":"4418:77:22","text":" @dev See {EIP-5267}.\n _Available since v4.9._"},"functionSelector":"84b0196e","id":2980,"implemented":true,"kind":"function","modifiers":[],"name":"eip712Domain","nameLocation":"4509:12:22","nodeType":"FunctionDefinition","overrides":{"id":2929,"nodeType":"OverrideSpecifier","overrides":[],"src":"4576:8:22"},"parameters":{"id":2928,"nodeType":"ParameterList","parameters":[],"src":"4521:2:22"},"returnParameters":{"id":2945,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2931,"mutability":"mutable","name":"fields","nameLocation":"4622:6:22","nodeType":"VariableDeclaration","scope":2980,"src":"4615:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"typeName":{"id":2930,"name":"bytes1","nodeType":"ElementaryTypeName","src":"4615:6:22","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"visibility":"internal"},{"constant":false,"id":2933,"mutability":"mutable","name":"name","nameLocation":"4656:4:22","nodeType":"VariableDeclaration","scope":2980,"src":"4642:18:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2932,"name":"string","nodeType":"ElementaryTypeName","src":"4642:6:22","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2935,"mutability":"mutable","name":"version","nameLocation":"4688:7:22","nodeType":"VariableDeclaration","scope":2980,"src":"4674:21:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2934,"name":"string","nodeType":"ElementaryTypeName","src":"4674:6:22","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2937,"mutability":"mutable","name":"chainId","nameLocation":"4717:7:22","nodeType":"VariableDeclaration","scope":2980,"src":"4709:15:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2936,"name":"uint256","nodeType":"ElementaryTypeName","src":"4709:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2939,"mutability":"mutable","name":"verifyingContract","nameLocation":"4746:17:22","nodeType":"VariableDeclaration","scope":2980,"src":"4738:25:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2938,"name":"address","nodeType":"ElementaryTypeName","src":"4738:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2941,"mutability":"mutable","name":"salt","nameLocation":"4785:4:22","nodeType":"VariableDeclaration","scope":2980,"src":"4777:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2940,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4777:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2944,"mutability":"mutable","name":"extensions","nameLocation":"4820:10:22","nodeType":"VariableDeclaration","scope":2980,"src":"4803:27:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2942,"name":"uint256","nodeType":"ElementaryTypeName","src":"4803:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2943,"nodeType":"ArrayTypeName","src":"4803:9:22","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"4601:239:22"},"scope":3094,"src":"4500:861:22","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":2988,"nodeType":"Block","src":"5654:29:22","statements":[{"expression":{"id":2986,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2833,"src":"5671:5:22","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":2985,"id":2987,"nodeType":"Return","src":"5664:12:22"}]},"documentation":{"id":2981,"nodeType":"StructuredDocumentation","src":"5367:213:22","text":" @dev The name parameter for the EIP712 domain.\n NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n are a concern."},"id":2989,"implemented":true,"kind":"function","modifiers":[],"name":"_EIP712Name","nameLocation":"5594:11:22","nodeType":"FunctionDefinition","parameters":{"id":2982,"nodeType":"ParameterList","parameters":[],"src":"5605:2:22"},"returnParameters":{"id":2985,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2984,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2989,"src":"5639:13:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2983,"name":"string","nodeType":"ElementaryTypeName","src":"5639:6:22","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5638:15:22"},"scope":3094,"src":"5585:98:22","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":2997,"nodeType":"Block","src":"5982:32:22","statements":[{"expression":{"id":2995,"name":"_version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2835,"src":"5999:8:22","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":2994,"id":2996,"nodeType":"Return","src":"5992:15:22"}]},"documentation":{"id":2990,"nodeType":"StructuredDocumentation","src":"5689:216:22","text":" @dev The version parameter for the EIP712 domain.\n NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n are a concern."},"id":2998,"implemented":true,"kind":"function","modifiers":[],"name":"_EIP712Version","nameLocation":"5919:14:22","nodeType":"FunctionDefinition","parameters":{"id":2991,"nodeType":"ParameterList","parameters":[],"src":"5933:2:22"},"returnParameters":{"id":2994,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2993,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2998,"src":"5967:13:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2992,"name":"string","nodeType":"ElementaryTypeName","src":"5967:6:22","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5966:15:22"},"scope":3094,"src":"5910:104:22","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":3042,"nodeType":"Block","src":"6288:571:22","statements":[{"assignments":[3005],"declarations":[{"constant":false,"id":3005,"mutability":"mutable","name":"name","nameLocation":"6312:4:22","nodeType":"VariableDeclaration","scope":3042,"src":"6298:18:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3004,"name":"string","nodeType":"ElementaryTypeName","src":"6298:6:22","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":3008,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":3006,"name":"_EIP712Name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2989,"src":"6319:11:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_string_memory_ptr_$","typeString":"function () view returns (string memory)"}},"id":3007,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6319:13:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"6298:34:22"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3015,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":3011,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3005,"src":"6352:4:22","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3010,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6346:5:22","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":3009,"name":"bytes","nodeType":"ElementaryTypeName","src":"6346:5:22","typeDescriptions":{}}},"id":3012,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6346:11:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3013,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6358:6:22","memberName":"length","nodeType":"MemberAccess","src":"6346:18:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3014,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6367:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6346:22:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3040,"nodeType":"Block","src":"6430:423:22","statements":[{"assignments":[3025],"declarations":[{"constant":false,"id":3025,"mutability":"mutable","name":"hashedName","nameLocation":"6675:10:22","nodeType":"VariableDeclaration","scope":3040,"src":"6667:18:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3024,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6667:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3027,"initialValue":{"id":3026,"name":"_hashedName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2828,"src":"6688:11:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"6667:32:22"},{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":3030,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3028,"name":"hashedName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3025,"src":"6717:10:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":3029,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6731:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6717:15:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3038,"nodeType":"Block","src":"6790:53:22","statements":[{"expression":{"arguments":[{"hexValue":"","id":3035,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6825:2:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":3034,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"6815:9:22","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3036,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6815:13:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":3003,"id":3037,"nodeType":"Return","src":"6808:20:22"}]},"id":3039,"nodeType":"IfStatement","src":"6713:130:22","trueBody":{"id":3033,"nodeType":"Block","src":"6734:50:22","statements":[{"expression":{"id":3031,"name":"hashedName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3025,"src":"6759:10:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":3003,"id":3032,"nodeType":"Return","src":"6752:17:22"}]}}]},"id":3041,"nodeType":"IfStatement","src":"6342:511:22","trueBody":{"id":3023,"nodeType":"Block","src":"6370:54:22","statements":[{"expression":{"arguments":[{"arguments":[{"id":3019,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3005,"src":"6407:4:22","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3018,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6401:5:22","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":3017,"name":"bytes","nodeType":"ElementaryTypeName","src":"6401:5:22","typeDescriptions":{}}},"id":3020,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6401:11:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3016,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"6391:9:22","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3021,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6391:22:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":3003,"id":3022,"nodeType":"Return","src":"6384:29:22"}]}}]},"documentation":{"id":2999,"nodeType":"StructuredDocumentation","src":"6020:204:22","text":" @dev The hash of the name parameter for the EIP712 domain.\n NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Name` instead."},"id":3043,"implemented":true,"kind":"function","modifiers":[],"name":"_EIP712NameHash","nameLocation":"6238:15:22","nodeType":"FunctionDefinition","parameters":{"id":3000,"nodeType":"ParameterList","parameters":[],"src":"6253:2:22"},"returnParameters":{"id":3003,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3002,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3043,"src":"6279:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3001,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6279:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6278:9:22"},"scope":3094,"src":"6229:630:22","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3087,"nodeType":"Block","src":"7142:604:22","statements":[{"assignments":[3050],"declarations":[{"constant":false,"id":3050,"mutability":"mutable","name":"version","nameLocation":"7166:7:22","nodeType":"VariableDeclaration","scope":3087,"src":"7152:21:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3049,"name":"string","nodeType":"ElementaryTypeName","src":"7152:6:22","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":3053,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":3051,"name":"_EIP712Version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2998,"src":"7176:14:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_string_memory_ptr_$","typeString":"function () view returns (string memory)"}},"id":3052,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7176:16:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"7152:40:22"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3060,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":3056,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3050,"src":"7212:7:22","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3055,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7206:5:22","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":3054,"name":"bytes","nodeType":"ElementaryTypeName","src":"7206:5:22","typeDescriptions":{}}},"id":3057,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7206:14:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3058,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7221:6:22","memberName":"length","nodeType":"MemberAccess","src":"7206:21:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3059,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7230:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7206:25:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3085,"nodeType":"Block","src":"7296:444:22","statements":[{"assignments":[3070],"declarations":[{"constant":false,"id":3070,"mutability":"mutable","name":"hashedVersion","nameLocation":"7550:13:22","nodeType":"VariableDeclaration","scope":3085,"src":"7542:21:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3069,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7542:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3072,"initialValue":{"id":3071,"name":"_hashedVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2831,"src":"7566:14:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"7542:38:22"},{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":3075,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3073,"name":"hashedVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3070,"src":"7598:13:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":3074,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7615:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7598:18:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3083,"nodeType":"Block","src":"7677:53:22","statements":[{"expression":{"arguments":[{"hexValue":"","id":3080,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7712:2:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":3079,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"7702:9:22","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3081,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7702:13:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":3048,"id":3082,"nodeType":"Return","src":"7695:20:22"}]},"id":3084,"nodeType":"IfStatement","src":"7594:136:22","trueBody":{"id":3078,"nodeType":"Block","src":"7618:53:22","statements":[{"expression":{"id":3076,"name":"hashedVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3070,"src":"7643:13:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":3048,"id":3077,"nodeType":"Return","src":"7636:20:22"}]}}]},"id":3086,"nodeType":"IfStatement","src":"7202:538:22","trueBody":{"id":3068,"nodeType":"Block","src":"7233:57:22","statements":[{"expression":{"arguments":[{"arguments":[{"id":3064,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3050,"src":"7270:7:22","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3063,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7264:5:22","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":3062,"name":"bytes","nodeType":"ElementaryTypeName","src":"7264:5:22","typeDescriptions":{}}},"id":3065,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7264:14:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3061,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"7254:9:22","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3066,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7254:25:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":3048,"id":3067,"nodeType":"Return","src":"7247:32:22"}]}}]},"documentation":{"id":3044,"nodeType":"StructuredDocumentation","src":"6865:210:22","text":" @dev The hash of the version parameter for the EIP712 domain.\n NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Version` instead."},"id":3088,"implemented":true,"kind":"function","modifiers":[],"name":"_EIP712VersionHash","nameLocation":"7089:18:22","nodeType":"FunctionDefinition","parameters":{"id":3045,"nodeType":"ParameterList","parameters":[],"src":"7107:2:22"},"returnParameters":{"id":3048,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3047,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3088,"src":"7133:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3046,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7133:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7132:9:22"},"scope":3094,"src":"7080:666:22","stateMutability":"view","virtual":false,"visibility":"internal"},{"constant":false,"documentation":{"id":3089,"nodeType":"StructuredDocumentation","src":"7752:254:22","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":3093,"mutability":"mutable","name":"__gap","nameLocation":"8031:5:22","nodeType":"VariableDeclaration","scope":3094,"src":"8011:25:22","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$48_storage","typeString":"uint256[48]"},"typeName":{"baseType":{"id":3090,"name":"uint256","nodeType":"ElementaryTypeName","src":"8011:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3092,"length":{"hexValue":"3438","id":3091,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8019:2:22","typeDescriptions":{"typeIdentifier":"t_rational_48_by_1","typeString":"int_const 48"},"value":"48"},"nodeType":"ArrayTypeName","src":"8011:11:22","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$48_storage_ptr","typeString":"uint256[48]"}},"visibility":"private"}],"scope":3095,"src":"1787:6252:22","usedErrors":[]}],"src":"113:7927:22"},"id":22},"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol","exportedSymbols":{"AddressUpgradeable":[2063],"ERC165Upgradeable":[3138],"IERC165Upgradeable":[3150],"Initializable":[1269]},"id":3139,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3096,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"99:23:23"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol","file":"./IERC165Upgradeable.sol","id":3097,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3139,"sourceUnit":3151,"src":"124:34:23","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../../proxy/utils/Initializable.sol","id":3098,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3139,"sourceUnit":1270,"src":"159:45:23","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":3100,"name":"Initializable","nameLocations":["822:13:23"],"nodeType":"IdentifierPath","referencedDeclaration":1269,"src":"822:13:23"},"id":3101,"nodeType":"InheritanceSpecifier","src":"822:13:23"},{"baseName":{"id":3102,"name":"IERC165Upgradeable","nameLocations":["837:18:23"],"nodeType":"IdentifierPath","referencedDeclaration":3150,"src":"837:18:23"},"id":3103,"nodeType":"InheritanceSpecifier","src":"837:18:23"}],"canonicalName":"ERC165Upgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":3099,"nodeType":"StructuredDocumentation","src":"206:576:23","text":" @dev Implementation of the {IERC165} interface.\n Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n for the additional interface id that will be supported. For example:\n ```solidity\n function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n }\n ```\n Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation."},"fullyImplemented":true,"id":3138,"linearizedBaseContracts":[3138,3150,1269],"name":"ERC165Upgradeable","nameLocation":"801:17:23","nodeType":"ContractDefinition","nodes":[{"body":{"id":3108,"nodeType":"Block","src":"913:7:23","statements":[]},"id":3109,"implemented":true,"kind":"function","modifiers":[{"id":3106,"kind":"modifierInvocation","modifierName":{"id":3105,"name":"onlyInitializing","nameLocations":["896:16:23"],"nodeType":"IdentifierPath","referencedDeclaration":1214,"src":"896:16:23"},"nodeType":"ModifierInvocation","src":"896:16:23"}],"name":"__ERC165_init","nameLocation":"871:13:23","nodeType":"FunctionDefinition","parameters":{"id":3104,"nodeType":"ParameterList","parameters":[],"src":"884:2:23"},"returnParameters":{"id":3107,"nodeType":"ParameterList","parameters":[],"src":"913:0:23"},"scope":3138,"src":"862:58:23","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3114,"nodeType":"Block","src":"987:7:23","statements":[]},"id":3115,"implemented":true,"kind":"function","modifiers":[{"id":3112,"kind":"modifierInvocation","modifierName":{"id":3111,"name":"onlyInitializing","nameLocations":["970:16:23"],"nodeType":"IdentifierPath","referencedDeclaration":1214,"src":"970:16:23"},"nodeType":"ModifierInvocation","src":"970:16:23"}],"name":"__ERC165_init_unchained","nameLocation":"935:23:23","nodeType":"FunctionDefinition","parameters":{"id":3110,"nodeType":"ParameterList","parameters":[],"src":"958:2:23"},"returnParameters":{"id":3113,"nodeType":"ParameterList","parameters":[],"src":"987:0:23"},"scope":3138,"src":"926:68:23","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[3149],"body":{"id":3131,"nodeType":"Block","src":"1151:75:23","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":3129,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3124,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3118,"src":"1168:11:23","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":3126,"name":"IERC165Upgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3150,"src":"1188:18:23","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165Upgradeable_$3150_$","typeString":"type(contract IERC165Upgradeable)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165Upgradeable_$3150_$","typeString":"type(contract IERC165Upgradeable)"}],"id":3125,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1183:4:23","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3127,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1183:24:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165Upgradeable_$3150","typeString":"type(contract IERC165Upgradeable)"}},"id":3128,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1208:11:23","memberName":"interfaceId","nodeType":"MemberAccess","src":"1183:36:23","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1168:51:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3123,"id":3130,"nodeType":"Return","src":"1161:58:23"}]},"documentation":{"id":3116,"nodeType":"StructuredDocumentation","src":"999:56:23","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":3132,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1069:17:23","nodeType":"FunctionDefinition","overrides":{"id":3120,"nodeType":"OverrideSpecifier","overrides":[],"src":"1127:8:23"},"parameters":{"id":3119,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3118,"mutability":"mutable","name":"interfaceId","nameLocation":"1094:11:23","nodeType":"VariableDeclaration","scope":3132,"src":"1087:18:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3117,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1087:6:23","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1086:20:23"},"returnParameters":{"id":3123,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3122,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3132,"src":"1145:4:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3121,"name":"bool","nodeType":"ElementaryTypeName","src":"1145:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1144:6:23"},"scope":3138,"src":"1060:166:23","stateMutability":"view","virtual":true,"visibility":"public"},{"constant":false,"documentation":{"id":3133,"nodeType":"StructuredDocumentation","src":"1232:254:23","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":3137,"mutability":"mutable","name":"__gap","nameLocation":"1511:5:23","nodeType":"VariableDeclaration","scope":3138,"src":"1491:25:23","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":3134,"name":"uint256","nodeType":"ElementaryTypeName","src":"1491:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3136,"length":{"hexValue":"3530","id":3135,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1499:2:23","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"1491:11:23","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"}],"scope":3139,"src":"783:736:23","usedErrors":[]}],"src":"99:1421:23"},"id":23},"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol","exportedSymbols":{"IERC165Upgradeable":[3150]},"id":3151,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3140,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"100:23:24"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165Upgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":3141,"nodeType":"StructuredDocumentation","src":"125:279:24","text":" @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."},"fullyImplemented":false,"id":3150,"linearizedBaseContracts":[3150],"name":"IERC165Upgradeable","nameLocation":"415:18:24","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":3142,"nodeType":"StructuredDocumentation","src":"440:340:24","text":" @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."},"functionSelector":"01ffc9a7","id":3149,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"794:17:24","nodeType":"FunctionDefinition","parameters":{"id":3145,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3144,"mutability":"mutable","name":"interfaceId","nameLocation":"819:11:24","nodeType":"VariableDeclaration","scope":3149,"src":"812:18:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3143,"name":"bytes4","nodeType":"ElementaryTypeName","src":"812:6:24","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"811:20:24"},"returnParameters":{"id":3148,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3147,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3149,"src":"855:4:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3146,"name":"bool","nodeType":"ElementaryTypeName","src":"855:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"854:6:24"},"scope":3150,"src":"785:76:24","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":3151,"src":"405:458:24","usedErrors":[]}],"src":"100:764:24"},"id":24},"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol","exportedSymbols":{"MathUpgradeable":[4016]},"id":4017,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3152,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"103:23:25"},{"abstract":false,"baseContracts":[],"canonicalName":"MathUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":3153,"nodeType":"StructuredDocumentation","src":"128:73:25","text":" @dev Standard math utilities missing in the Solidity language."},"fullyImplemented":true,"id":4016,"linearizedBaseContracts":[4016],"name":"MathUpgradeable","nameLocation":"210:15:25","nodeType":"ContractDefinition","nodes":[{"canonicalName":"MathUpgradeable.Rounding","id":3157,"members":[{"id":3154,"name":"Down","nameLocation":"256:4:25","nodeType":"EnumValue","src":"256:4:25"},{"id":3155,"name":"Up","nameLocation":"298:2:25","nodeType":"EnumValue","src":"298:2:25"},{"id":3156,"name":"Zero","nameLocation":"329:4:25","nodeType":"EnumValue","src":"329:4:25"}],"name":"Rounding","nameLocation":"237:8:25","nodeType":"EnumDefinition","src":"232:122:25"},{"body":{"id":3174,"nodeType":"Block","src":"491:37:25","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3169,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3167,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3160,"src":"508:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":3168,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3162,"src":"512:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"508:5:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":3171,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3162,"src":"520:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3172,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"508:13:25","trueExpression":{"id":3170,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3160,"src":"516:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3166,"id":3173,"nodeType":"Return","src":"501:20:25"}]},"documentation":{"id":3158,"nodeType":"StructuredDocumentation","src":"360:59:25","text":" @dev Returns the largest of two numbers."},"id":3175,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"433:3:25","nodeType":"FunctionDefinition","parameters":{"id":3163,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3160,"mutability":"mutable","name":"a","nameLocation":"445:1:25","nodeType":"VariableDeclaration","scope":3175,"src":"437:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3159,"name":"uint256","nodeType":"ElementaryTypeName","src":"437:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3162,"mutability":"mutable","name":"b","nameLocation":"456:1:25","nodeType":"VariableDeclaration","scope":3175,"src":"448:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3161,"name":"uint256","nodeType":"ElementaryTypeName","src":"448:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"436:22:25"},"returnParameters":{"id":3166,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3165,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3175,"src":"482:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3164,"name":"uint256","nodeType":"ElementaryTypeName","src":"482:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"481:9:25"},"scope":4016,"src":"424:104:25","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3192,"nodeType":"Block","src":"666:37:25","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3187,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3185,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3178,"src":"683:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3186,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3180,"src":"687:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"683:5:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":3189,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3180,"src":"695:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3190,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"683:13:25","trueExpression":{"id":3188,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3178,"src":"691:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3184,"id":3191,"nodeType":"Return","src":"676:20:25"}]},"documentation":{"id":3176,"nodeType":"StructuredDocumentation","src":"534:60:25","text":" @dev Returns the smallest of two numbers."},"id":3193,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"608:3:25","nodeType":"FunctionDefinition","parameters":{"id":3181,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3178,"mutability":"mutable","name":"a","nameLocation":"620:1:25","nodeType":"VariableDeclaration","scope":3193,"src":"612:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3177,"name":"uint256","nodeType":"ElementaryTypeName","src":"612:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3180,"mutability":"mutable","name":"b","nameLocation":"631:1:25","nodeType":"VariableDeclaration","scope":3193,"src":"623:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3179,"name":"uint256","nodeType":"ElementaryTypeName","src":"623:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"611:22:25"},"returnParameters":{"id":3184,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3183,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3193,"src":"657:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3182,"name":"uint256","nodeType":"ElementaryTypeName","src":"657:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"656:9:25"},"scope":4016,"src":"599:104:25","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3215,"nodeType":"Block","src":"887:82:25","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3213,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3205,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3203,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3196,"src":"942:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":3204,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3198,"src":"946:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"942:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3206,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"941:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3212,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3209,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3207,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3196,"src":"952:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":3208,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3198,"src":"956:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"952:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3210,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"951:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":3211,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"961:1:25","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"951:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"941:21:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3202,"id":3214,"nodeType":"Return","src":"934:28:25"}]},"documentation":{"id":3194,"nodeType":"StructuredDocumentation","src":"709:102:25","text":" @dev Returns the average of two numbers. The result is rounded towards\n zero."},"id":3216,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"825:7:25","nodeType":"FunctionDefinition","parameters":{"id":3199,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3196,"mutability":"mutable","name":"a","nameLocation":"841:1:25","nodeType":"VariableDeclaration","scope":3216,"src":"833:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3195,"name":"uint256","nodeType":"ElementaryTypeName","src":"833:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3198,"mutability":"mutable","name":"b","nameLocation":"852:1:25","nodeType":"VariableDeclaration","scope":3216,"src":"844:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3197,"name":"uint256","nodeType":"ElementaryTypeName","src":"844:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"832:22:25"},"returnParameters":{"id":3202,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3201,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3216,"src":"878:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3200,"name":"uint256","nodeType":"ElementaryTypeName","src":"878:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"877:9:25"},"scope":4016,"src":"816:153:25","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3240,"nodeType":"Block","src":"1239:123:25","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3228,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3226,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3219,"src":"1327:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3227,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1332:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1327:6:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3237,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3235,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3232,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3230,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3219,"src":"1341:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":3231,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1345:1:25","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1341:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3233,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1340:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3234,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3221,"src":"1350:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1340:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3236,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1354:1:25","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1340:15:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3238,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1327:28:25","trueExpression":{"hexValue":"30","id":3229,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1336:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3225,"id":3239,"nodeType":"Return","src":"1320:35:25"}]},"documentation":{"id":3217,"nodeType":"StructuredDocumentation","src":"975:188:25","text":" @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds up instead\n of rounding down."},"id":3241,"implemented":true,"kind":"function","modifiers":[],"name":"ceilDiv","nameLocation":"1177:7:25","nodeType":"FunctionDefinition","parameters":{"id":3222,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3219,"mutability":"mutable","name":"a","nameLocation":"1193:1:25","nodeType":"VariableDeclaration","scope":3241,"src":"1185:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3218,"name":"uint256","nodeType":"ElementaryTypeName","src":"1185:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3221,"mutability":"mutable","name":"b","nameLocation":"1204:1:25","nodeType":"VariableDeclaration","scope":3241,"src":"1196:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3220,"name":"uint256","nodeType":"ElementaryTypeName","src":"1196:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1184:22:25"},"returnParameters":{"id":3225,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3224,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3241,"src":"1230:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3223,"name":"uint256","nodeType":"ElementaryTypeName","src":"1230:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1229:9:25"},"scope":4016,"src":"1168:194:25","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3363,"nodeType":"Block","src":"1776:4115:25","statements":[{"id":3362,"nodeType":"UncheckedBlock","src":"1786:4099:25","statements":[{"assignments":[3254],"declarations":[{"constant":false,"id":3254,"mutability":"mutable","name":"prod0","nameLocation":"2115:5:25","nodeType":"VariableDeclaration","scope":3362,"src":"2107:13:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3253,"name":"uint256","nodeType":"ElementaryTypeName","src":"2107:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3255,"nodeType":"VariableDeclarationStatement","src":"2107:13:25"},{"assignments":[3257],"declarations":[{"constant":false,"id":3257,"mutability":"mutable","name":"prod1","nameLocation":"2187:5:25","nodeType":"VariableDeclaration","scope":3362,"src":"2179:13:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3256,"name":"uint256","nodeType":"ElementaryTypeName","src":"2179:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3258,"nodeType":"VariableDeclarationStatement","src":"2179:13:25"},{"AST":{"nodeType":"YulBlock","src":"2259:157:25","statements":[{"nodeType":"YulVariableDeclaration","src":"2277:30:25","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2294:1:25"},{"name":"y","nodeType":"YulIdentifier","src":"2297:1:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2304:1:25","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2300:3:25"},"nodeType":"YulFunctionCall","src":"2300:6:25"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"2287:6:25"},"nodeType":"YulFunctionCall","src":"2287:20:25"},"variables":[{"name":"mm","nodeType":"YulTypedName","src":"2281:2:25","type":""}]},{"nodeType":"YulAssignment","src":"2324:18:25","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2337:1:25"},{"name":"y","nodeType":"YulIdentifier","src":"2340:1:25"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"2333:3:25"},"nodeType":"YulFunctionCall","src":"2333:9:25"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"2324:5:25"}]},{"nodeType":"YulAssignment","src":"2359:43:25","value":{"arguments":[{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2376:2:25"},{"name":"prod0","nodeType":"YulIdentifier","src":"2380:5:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2372:3:25"},"nodeType":"YulFunctionCall","src":"2372:14:25"},{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2391:2:25"},{"name":"prod0","nodeType":"YulIdentifier","src":"2395:5:25"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2388:2:25"},"nodeType":"YulFunctionCall","src":"2388:13:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2368:3:25"},"nodeType":"YulFunctionCall","src":"2368:34:25"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"2359:5:25"}]}]},"evmVersion":"london","externalReferences":[{"declaration":3254,"isOffset":false,"isSlot":false,"src":"2324:5:25","valueSize":1},{"declaration":3254,"isOffset":false,"isSlot":false,"src":"2380:5:25","valueSize":1},{"declaration":3254,"isOffset":false,"isSlot":false,"src":"2395:5:25","valueSize":1},{"declaration":3257,"isOffset":false,"isSlot":false,"src":"2359:5:25","valueSize":1},{"declaration":3244,"isOffset":false,"isSlot":false,"src":"2294:1:25","valueSize":1},{"declaration":3244,"isOffset":false,"isSlot":false,"src":"2337:1:25","valueSize":1},{"declaration":3246,"isOffset":false,"isSlot":false,"src":"2297:1:25","valueSize":1},{"declaration":3246,"isOffset":false,"isSlot":false,"src":"2340:1:25","valueSize":1}],"id":3259,"nodeType":"InlineAssembly","src":"2250:166:25"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3262,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3260,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3257,"src":"2497:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3261,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2506:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2497:10:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3268,"nodeType":"IfStatement","src":"2493:368:25","trueBody":{"id":3267,"nodeType":"Block","src":"2509:352:25","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3265,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3263,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3254,"src":"2827:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3264,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3248,"src":"2835:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2827:19:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3252,"id":3266,"nodeType":"Return","src":"2820:26:25"}]}},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3272,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3270,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3248,"src":"2971:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":3271,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3257,"src":"2985:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2971:19:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d6174683a206d756c446976206f766572666c6f77","id":3273,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2992:23:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_d87093691d63b122ac2c14d1b11554b287e2431cf2b03550b3be7cffb0f86851","typeString":"literal_string \"Math: mulDiv overflow\""},"value":"Math: mulDiv overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d87093691d63b122ac2c14d1b11554b287e2431cf2b03550b3be7cffb0f86851","typeString":"literal_string \"Math: mulDiv overflow\""}],"id":3269,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2963:7:25","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3274,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2963:53:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3275,"nodeType":"ExpressionStatement","src":"2963:53:25"},{"assignments":[3277],"declarations":[{"constant":false,"id":3277,"mutability":"mutable","name":"remainder","nameLocation":"3280:9:25","nodeType":"VariableDeclaration","scope":3362,"src":"3272:17:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3276,"name":"uint256","nodeType":"ElementaryTypeName","src":"3272:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3278,"nodeType":"VariableDeclarationStatement","src":"3272:17:25"},{"AST":{"nodeType":"YulBlock","src":"3312:291:25","statements":[{"nodeType":"YulAssignment","src":"3381:38:25","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"3401:1:25"},{"name":"y","nodeType":"YulIdentifier","src":"3404:1:25"},{"name":"denominator","nodeType":"YulIdentifier","src":"3407:11:25"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"3394:6:25"},"nodeType":"YulFunctionCall","src":"3394:25:25"},"variableNames":[{"name":"remainder","nodeType":"YulIdentifier","src":"3381:9:25"}]},{"nodeType":"YulAssignment","src":"3501:41:25","value":{"arguments":[{"name":"prod1","nodeType":"YulIdentifier","src":"3514:5:25"},{"arguments":[{"name":"remainder","nodeType":"YulIdentifier","src":"3524:9:25"},{"name":"prod0","nodeType":"YulIdentifier","src":"3535:5:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3521:2:25"},"nodeType":"YulFunctionCall","src":"3521:20:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3510:3:25"},"nodeType":"YulFunctionCall","src":"3510:32:25"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"3501:5:25"}]},{"nodeType":"YulAssignment","src":"3559:30:25","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"3572:5:25"},{"name":"remainder","nodeType":"YulIdentifier","src":"3579:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3568:3:25"},"nodeType":"YulFunctionCall","src":"3568:21:25"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"3559:5:25"}]}]},"evmVersion":"london","externalReferences":[{"declaration":3248,"isOffset":false,"isSlot":false,"src":"3407:11:25","valueSize":1},{"declaration":3254,"isOffset":false,"isSlot":false,"src":"3535:5:25","valueSize":1},{"declaration":3254,"isOffset":false,"isSlot":false,"src":"3559:5:25","valueSize":1},{"declaration":3254,"isOffset":false,"isSlot":false,"src":"3572:5:25","valueSize":1},{"declaration":3257,"isOffset":false,"isSlot":false,"src":"3501:5:25","valueSize":1},{"declaration":3257,"isOffset":false,"isSlot":false,"src":"3514:5:25","valueSize":1},{"declaration":3277,"isOffset":false,"isSlot":false,"src":"3381:9:25","valueSize":1},{"declaration":3277,"isOffset":false,"isSlot":false,"src":"3524:9:25","valueSize":1},{"declaration":3277,"isOffset":false,"isSlot":false,"src":"3579:9:25","valueSize":1},{"declaration":3244,"isOffset":false,"isSlot":false,"src":"3401:1:25","valueSize":1},{"declaration":3246,"isOffset":false,"isSlot":false,"src":"3404:1:25","valueSize":1}],"id":3279,"nodeType":"InlineAssembly","src":"3303:300:25"},{"assignments":[3281],"declarations":[{"constant":false,"id":3281,"mutability":"mutable","name":"twos","nameLocation":"3918:4:25","nodeType":"VariableDeclaration","scope":3362,"src":"3910:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3280,"name":"uint256","nodeType":"ElementaryTypeName","src":"3910:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3289,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3288,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3282,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3248,"src":"3925:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3286,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3284,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"~","prefix":true,"src":"3940:12:25","subExpression":{"id":3283,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3248,"src":"3941:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3285,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3955:1:25","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3940:16:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3287,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3939:18:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3925:32:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3910:47:25"},{"AST":{"nodeType":"YulBlock","src":"3980:362:25","statements":[{"nodeType":"YulAssignment","src":"4045:37:25","value":{"arguments":[{"name":"denominator","nodeType":"YulIdentifier","src":"4064:11:25"},{"name":"twos","nodeType":"YulIdentifier","src":"4077:4:25"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4060:3:25"},"nodeType":"YulFunctionCall","src":"4060:22:25"},"variableNames":[{"name":"denominator","nodeType":"YulIdentifier","src":"4045:11:25"}]},{"nodeType":"YulAssignment","src":"4149:25:25","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"4162:5:25"},{"name":"twos","nodeType":"YulIdentifier","src":"4169:4:25"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4158:3:25"},"nodeType":"YulFunctionCall","src":"4158:16:25"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"4149:5:25"}]},{"nodeType":"YulAssignment","src":"4289:39:25","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4309:1:25","type":"","value":"0"},{"name":"twos","nodeType":"YulIdentifier","src":"4312:4:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4305:3:25"},"nodeType":"YulFunctionCall","src":"4305:12:25"},{"name":"twos","nodeType":"YulIdentifier","src":"4319:4:25"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4301:3:25"},"nodeType":"YulFunctionCall","src":"4301:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"4326:1:25","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4297:3:25"},"nodeType":"YulFunctionCall","src":"4297:31:25"},"variableNames":[{"name":"twos","nodeType":"YulIdentifier","src":"4289:4:25"}]}]},"evmVersion":"london","externalReferences":[{"declaration":3248,"isOffset":false,"isSlot":false,"src":"4045:11:25","valueSize":1},{"declaration":3248,"isOffset":false,"isSlot":false,"src":"4064:11:25","valueSize":1},{"declaration":3254,"isOffset":false,"isSlot":false,"src":"4149:5:25","valueSize":1},{"declaration":3254,"isOffset":false,"isSlot":false,"src":"4162:5:25","valueSize":1},{"declaration":3281,"isOffset":false,"isSlot":false,"src":"4077:4:25","valueSize":1},{"declaration":3281,"isOffset":false,"isSlot":false,"src":"4169:4:25","valueSize":1},{"declaration":3281,"isOffset":false,"isSlot":false,"src":"4289:4:25","valueSize":1},{"declaration":3281,"isOffset":false,"isSlot":false,"src":"4312:4:25","valueSize":1},{"declaration":3281,"isOffset":false,"isSlot":false,"src":"4319:4:25","valueSize":1}],"id":3290,"nodeType":"InlineAssembly","src":"3971:371:25"},{"expression":{"id":3295,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3291,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3254,"src":"4408:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3294,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3292,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3257,"src":"4417:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3293,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3281,"src":"4425:4:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4417:12:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4408:21:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3296,"nodeType":"ExpressionStatement","src":"4408:21:25"},{"assignments":[3298],"declarations":[{"constant":false,"id":3298,"mutability":"mutable","name":"inverse","nameLocation":"4755:7:25","nodeType":"VariableDeclaration","scope":3362,"src":"4747:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3297,"name":"uint256","nodeType":"ElementaryTypeName","src":"4747:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3305,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3304,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3301,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":3299,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4766:1:25","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3300,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3248,"src":"4770:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4766:15:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3302,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4765:17:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":3303,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4785:1:25","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"4765:21:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4747:39:25"},{"expression":{"id":3312,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3306,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3298,"src":"5003:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3311,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3307,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5014:1:25","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3310,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3308,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3248,"src":"5018:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3309,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3298,"src":"5032:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5018:21:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5014:25:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5003:36:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3313,"nodeType":"ExpressionStatement","src":"5003:36:25"},{"expression":{"id":3320,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3314,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3298,"src":"5072:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3319,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3315,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5083:1:25","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3318,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3316,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3248,"src":"5087:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3317,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3298,"src":"5101:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5087:21:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5083:25:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5072:36:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3321,"nodeType":"ExpressionStatement","src":"5072:36:25"},{"expression":{"id":3328,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3322,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3298,"src":"5142:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3327,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3323,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5153:1:25","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3326,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3324,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3248,"src":"5157:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3325,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3298,"src":"5171:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5157:21:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5153:25:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5142:36:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3329,"nodeType":"ExpressionStatement","src":"5142:36:25"},{"expression":{"id":3336,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3330,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3298,"src":"5212:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3335,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3331,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5223:1:25","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3334,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3332,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3248,"src":"5227:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3333,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3298,"src":"5241:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5227:21:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5223:25:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5212:36:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3337,"nodeType":"ExpressionStatement","src":"5212:36:25"},{"expression":{"id":3344,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3338,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3298,"src":"5282:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3343,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3339,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5293:1:25","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3342,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3340,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3248,"src":"5297:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3341,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3298,"src":"5311:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5297:21:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5293:25:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5282:36:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3345,"nodeType":"ExpressionStatement","src":"5282:36:25"},{"expression":{"id":3352,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3346,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3298,"src":"5353:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3351,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3347,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5364:1:25","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3350,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3348,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3248,"src":"5368:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3349,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3298,"src":"5382:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5368:21:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5364:25:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5353:36:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3353,"nodeType":"ExpressionStatement","src":"5353:36:25"},{"expression":{"id":3358,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3354,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3251,"src":"5823:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3357,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3355,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3254,"src":"5832:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3356,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3298,"src":"5840:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5832:15:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5823:24:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3359,"nodeType":"ExpressionStatement","src":"5823:24:25"},{"expression":{"id":3360,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3251,"src":"5868:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3252,"id":3361,"nodeType":"Return","src":"5861:13:25"}]}]},"documentation":{"id":3242,"nodeType":"StructuredDocumentation","src":"1368:305:25","text":" @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n with further edits by Uniswap Labs also under MIT license."},"id":3364,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"1687:6:25","nodeType":"FunctionDefinition","parameters":{"id":3249,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3244,"mutability":"mutable","name":"x","nameLocation":"1702:1:25","nodeType":"VariableDeclaration","scope":3364,"src":"1694:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3243,"name":"uint256","nodeType":"ElementaryTypeName","src":"1694:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3246,"mutability":"mutable","name":"y","nameLocation":"1713:1:25","nodeType":"VariableDeclaration","scope":3364,"src":"1705:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3245,"name":"uint256","nodeType":"ElementaryTypeName","src":"1705:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3248,"mutability":"mutable","name":"denominator","nameLocation":"1724:11:25","nodeType":"VariableDeclaration","scope":3364,"src":"1716:19:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3247,"name":"uint256","nodeType":"ElementaryTypeName","src":"1716:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1693:43:25"},"returnParameters":{"id":3252,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3251,"mutability":"mutable","name":"result","nameLocation":"1768:6:25","nodeType":"VariableDeclaration","scope":3364,"src":"1760:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3250,"name":"uint256","nodeType":"ElementaryTypeName","src":"1760:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1759:16:25"},"scope":4016,"src":"1678:4213:25","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3407,"nodeType":"Block","src":"6133:189:25","statements":[{"assignments":[3380],"declarations":[{"constant":false,"id":3380,"mutability":"mutable","name":"result","nameLocation":"6151:6:25","nodeType":"VariableDeclaration","scope":3407,"src":"6143:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3379,"name":"uint256","nodeType":"ElementaryTypeName","src":"6143:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3386,"initialValue":{"arguments":[{"id":3382,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3367,"src":"6167:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3383,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3369,"src":"6170:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3384,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3371,"src":"6173:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3381,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[3364,3408],"referencedDeclaration":3364,"src":"6160:6:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":3385,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6160:25:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6143:42:25"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3398,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$3157","typeString":"enum MathUpgradeable.Rounding"},"id":3390,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3387,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3374,"src":"6199:8:25","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3157","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3388,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3157,"src":"6211:8:25","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$3157_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":3389,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6220:2:25","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":3155,"src":"6211:11:25","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3157","typeString":"enum MathUpgradeable.Rounding"}},"src":"6199:23:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3397,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3392,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3367,"src":"6233:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3393,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3369,"src":"6236:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3394,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3371,"src":"6239:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3391,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"6226:6:25","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":3395,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6226:25:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3396,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6254:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6226:29:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6199:56:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3404,"nodeType":"IfStatement","src":"6195:98:25","trueBody":{"id":3403,"nodeType":"Block","src":"6257:36:25","statements":[{"expression":{"id":3401,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3399,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3380,"src":"6271:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3400,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6281:1:25","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6271:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3402,"nodeType":"ExpressionStatement","src":"6271:11:25"}]}},{"expression":{"id":3405,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3380,"src":"6309:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3378,"id":3406,"nodeType":"Return","src":"6302:13:25"}]},"documentation":{"id":3365,"nodeType":"StructuredDocumentation","src":"5897:121:25","text":" @notice Calculates x * y / denominator with full precision, following the selected rounding direction."},"id":3408,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"6032:6:25","nodeType":"FunctionDefinition","parameters":{"id":3375,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3367,"mutability":"mutable","name":"x","nameLocation":"6047:1:25","nodeType":"VariableDeclaration","scope":3408,"src":"6039:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3366,"name":"uint256","nodeType":"ElementaryTypeName","src":"6039:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3369,"mutability":"mutable","name":"y","nameLocation":"6058:1:25","nodeType":"VariableDeclaration","scope":3408,"src":"6050:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3368,"name":"uint256","nodeType":"ElementaryTypeName","src":"6050:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3371,"mutability":"mutable","name":"denominator","nameLocation":"6069:11:25","nodeType":"VariableDeclaration","scope":3408,"src":"6061:19:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3370,"name":"uint256","nodeType":"ElementaryTypeName","src":"6061:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3374,"mutability":"mutable","name":"rounding","nameLocation":"6091:8:25","nodeType":"VariableDeclaration","scope":3408,"src":"6082:17:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3157","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":3373,"nodeType":"UserDefinedTypeName","pathNode":{"id":3372,"name":"Rounding","nameLocations":["6082:8:25"],"nodeType":"IdentifierPath","referencedDeclaration":3157,"src":"6082:8:25"},"referencedDeclaration":3157,"src":"6082:8:25","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3157","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"6038:62:25"},"returnParameters":{"id":3378,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3377,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3408,"src":"6124:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3376,"name":"uint256","nodeType":"ElementaryTypeName","src":"6124:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6123:9:25"},"scope":4016,"src":"6023:299:25","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3519,"nodeType":"Block","src":"6598:1585:25","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3418,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3416,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3411,"src":"6612:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3417,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6617:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6612:6:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3422,"nodeType":"IfStatement","src":"6608:45:25","trueBody":{"id":3421,"nodeType":"Block","src":"6620:33:25","statements":[{"expression":{"hexValue":"30","id":3419,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6641:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":3415,"id":3420,"nodeType":"Return","src":"6634:8:25"}]}},{"assignments":[3424],"declarations":[{"constant":false,"id":3424,"mutability":"mutable","name":"result","nameLocation":"7340:6:25","nodeType":"VariableDeclaration","scope":3519,"src":"7332:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3423,"name":"uint256","nodeType":"ElementaryTypeName","src":"7332:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3433,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3432,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":3425,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7349:1:25","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3430,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3427,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3411,"src":"7360:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3426,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[3688,3724],"referencedDeclaration":3688,"src":"7355:4:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3428,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7355:7:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3429,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7366:1:25","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7355:12:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3431,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7354:14:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7349:19:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7332:36:25"},{"id":3518,"nodeType":"UncheckedBlock","src":"7769:408:25","statements":[{"expression":{"id":3443,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3434,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3424,"src":"7793:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3442,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3439,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3435,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3424,"src":"7803:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3438,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3436,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3411,"src":"7812:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3437,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3424,"src":"7816:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7812:10:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7803:19:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3440,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7802:21:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3441,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7827:1:25","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7802:26:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7793:35:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3444,"nodeType":"ExpressionStatement","src":"7793:35:25"},{"expression":{"id":3454,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3445,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3424,"src":"7842:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3453,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3450,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3446,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3424,"src":"7852:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3449,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3447,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3411,"src":"7861:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3448,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3424,"src":"7865:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7861:10:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7852:19:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3451,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7851:21:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3452,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7876:1:25","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7851:26:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7842:35:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3455,"nodeType":"ExpressionStatement","src":"7842:35:25"},{"expression":{"id":3465,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3456,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3424,"src":"7891:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3464,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3461,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3457,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3424,"src":"7901:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3460,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3458,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3411,"src":"7910:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3459,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3424,"src":"7914:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7910:10:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7901:19:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3462,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7900:21:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3463,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7925:1:25","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7900:26:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7891:35:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3466,"nodeType":"ExpressionStatement","src":"7891:35:25"},{"expression":{"id":3476,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3467,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3424,"src":"7940:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3475,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3472,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3468,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3424,"src":"7950:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3471,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3469,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3411,"src":"7959:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3470,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3424,"src":"7963:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7959:10:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7950:19:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3473,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7949:21:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3474,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7974:1:25","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7949:26:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7940:35:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3477,"nodeType":"ExpressionStatement","src":"7940:35:25"},{"expression":{"id":3487,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3478,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3424,"src":"7989:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3486,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3483,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3479,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3424,"src":"7999:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3482,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3480,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3411,"src":"8008:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3481,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3424,"src":"8012:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8008:10:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7999:19:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3484,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7998:21:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3485,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8023:1:25","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7998:26:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7989:35:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3488,"nodeType":"ExpressionStatement","src":"7989:35:25"},{"expression":{"id":3498,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3489,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3424,"src":"8038:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3497,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3494,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3490,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3424,"src":"8048:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3493,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3491,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3411,"src":"8057:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3492,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3424,"src":"8061:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8057:10:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8048:19:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3495,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8047:21:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3496,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8072:1:25","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8047:26:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8038:35:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3499,"nodeType":"ExpressionStatement","src":"8038:35:25"},{"expression":{"id":3509,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3500,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3424,"src":"8087:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3508,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3505,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3501,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3424,"src":"8097:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3504,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3502,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3411,"src":"8106:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3503,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3424,"src":"8110:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8106:10:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8097:19:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3506,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8096:21:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3507,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8121:1:25","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8096:26:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8087:35:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3510,"nodeType":"ExpressionStatement","src":"8087:35:25"},{"expression":{"arguments":[{"id":3512,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3424,"src":"8147:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3515,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3513,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3411,"src":"8155:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3514,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3424,"src":"8159:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8155:10:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3511,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3193,"src":"8143:3:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":3516,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8143:23:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3415,"id":3517,"nodeType":"Return","src":"8136:30:25"}]}]},"documentation":{"id":3409,"nodeType":"StructuredDocumentation","src":"6328:208:25","text":" @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."},"id":3520,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"6550:4:25","nodeType":"FunctionDefinition","parameters":{"id":3412,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3411,"mutability":"mutable","name":"a","nameLocation":"6563:1:25","nodeType":"VariableDeclaration","scope":3520,"src":"6555:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3410,"name":"uint256","nodeType":"ElementaryTypeName","src":"6555:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6554:11:25"},"returnParameters":{"id":3415,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3414,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3520,"src":"6589:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3413,"name":"uint256","nodeType":"ElementaryTypeName","src":"6589:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6588:9:25"},"scope":4016,"src":"6541:1642:25","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3555,"nodeType":"Block","src":"8359:161:25","statements":[{"id":3554,"nodeType":"UncheckedBlock","src":"8369:145:25","statements":[{"assignments":[3532],"declarations":[{"constant":false,"id":3532,"mutability":"mutable","name":"result","nameLocation":"8401:6:25","nodeType":"VariableDeclaration","scope":3554,"src":"8393:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3531,"name":"uint256","nodeType":"ElementaryTypeName","src":"8393:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3536,"initialValue":{"arguments":[{"id":3534,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3523,"src":"8415:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3533,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[3520,3556],"referencedDeclaration":3520,"src":"8410:4:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3535,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8410:7:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8393:24:25"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3552,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3537,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3532,"src":"8438:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3547,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$3157","typeString":"enum MathUpgradeable.Rounding"},"id":3541,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3538,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"8448:8:25","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3157","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3539,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3157,"src":"8460:8:25","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$3157_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":3540,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8469:2:25","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":3155,"src":"8460:11:25","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3157","typeString":"enum MathUpgradeable.Rounding"}},"src":"8448:23:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3546,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3544,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3542,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3532,"src":"8475:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3543,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3532,"src":"8484:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8475:15:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3545,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3523,"src":"8493:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8475:19:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8448:46:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":3549,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8501:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":3550,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8448:54:25","trueExpression":{"hexValue":"31","id":3548,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8497:1:25","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":3551,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8447:56:25","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"8438:65:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3530,"id":3553,"nodeType":"Return","src":"8431:72:25"}]}]},"documentation":{"id":3521,"nodeType":"StructuredDocumentation","src":"8189:89:25","text":" @notice Calculates sqrt(a), following the selected rounding direction."},"id":3556,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"8292:4:25","nodeType":"FunctionDefinition","parameters":{"id":3527,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3523,"mutability":"mutable","name":"a","nameLocation":"8305:1:25","nodeType":"VariableDeclaration","scope":3556,"src":"8297:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3522,"name":"uint256","nodeType":"ElementaryTypeName","src":"8297:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3526,"mutability":"mutable","name":"rounding","nameLocation":"8317:8:25","nodeType":"VariableDeclaration","scope":3556,"src":"8308:17:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3157","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":3525,"nodeType":"UserDefinedTypeName","pathNode":{"id":3524,"name":"Rounding","nameLocations":["8308:8:25"],"nodeType":"IdentifierPath","referencedDeclaration":3157,"src":"8308:8:25"},"referencedDeclaration":3157,"src":"8308:8:25","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3157","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"8296:30:25"},"returnParameters":{"id":3530,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3529,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3556,"src":"8350:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3528,"name":"uint256","nodeType":"ElementaryTypeName","src":"8350:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8349:9:25"},"scope":4016,"src":"8283:237:25","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3687,"nodeType":"Block","src":"8705:922:25","statements":[{"assignments":[3565],"declarations":[{"constant":false,"id":3565,"mutability":"mutable","name":"result","nameLocation":"8723:6:25","nodeType":"VariableDeclaration","scope":3687,"src":"8715:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3564,"name":"uint256","nodeType":"ElementaryTypeName","src":"8715:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3567,"initialValue":{"hexValue":"30","id":3566,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8732:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8715:18:25"},{"id":3684,"nodeType":"UncheckedBlock","src":"8743:855:25","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3572,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3570,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3568,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3559,"src":"8771:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":3569,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8780:3:25","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8771:12:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3571,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8786:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8771:16:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3582,"nodeType":"IfStatement","src":"8767:99:25","trueBody":{"id":3581,"nodeType":"Block","src":"8789:77:25","statements":[{"expression":{"id":3575,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3573,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3559,"src":"8807:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":3574,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8817:3:25","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8807:13:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3576,"nodeType":"ExpressionStatement","src":"8807:13:25"},{"expression":{"id":3579,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3577,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3565,"src":"8838:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"313238","id":3578,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8848:3:25","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8838:13:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3580,"nodeType":"ExpressionStatement","src":"8838:13:25"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3587,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3585,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3583,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3559,"src":"8883:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":3584,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8892:2:25","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8883:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3586,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8897:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8883:15:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3597,"nodeType":"IfStatement","src":"8879:96:25","trueBody":{"id":3596,"nodeType":"Block","src":"8900:75:25","statements":[{"expression":{"id":3590,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3588,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3559,"src":"8918:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":3589,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8928:2:25","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8918:12:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3591,"nodeType":"ExpressionStatement","src":"8918:12:25"},{"expression":{"id":3594,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3592,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3565,"src":"8948:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":3593,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8958:2:25","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8948:12:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3595,"nodeType":"ExpressionStatement","src":"8948:12:25"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3602,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3600,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3598,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3559,"src":"8992:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":3599,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9001:2:25","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8992:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3601,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9006:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8992:15:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3612,"nodeType":"IfStatement","src":"8988:96:25","trueBody":{"id":3611,"nodeType":"Block","src":"9009:75:25","statements":[{"expression":{"id":3605,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3603,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3559,"src":"9027:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":3604,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9037:2:25","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"9027:12:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3606,"nodeType":"ExpressionStatement","src":"9027:12:25"},{"expression":{"id":3609,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3607,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3565,"src":"9057:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":3608,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9067:2:25","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"9057:12:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3610,"nodeType":"ExpressionStatement","src":"9057:12:25"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3617,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3615,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3613,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3559,"src":"9101:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":3614,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9110:2:25","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9101:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3616,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9115:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9101:15:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3627,"nodeType":"IfStatement","src":"9097:96:25","trueBody":{"id":3626,"nodeType":"Block","src":"9118:75:25","statements":[{"expression":{"id":3620,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3618,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3559,"src":"9136:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":3619,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9146:2:25","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9136:12:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3621,"nodeType":"ExpressionStatement","src":"9136:12:25"},{"expression":{"id":3624,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3622,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3565,"src":"9166:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":3623,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9176:2:25","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9166:12:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3625,"nodeType":"ExpressionStatement","src":"9166:12:25"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3632,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3630,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3628,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3559,"src":"9210:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":3629,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9219:1:25","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9210:10:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3631,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9223:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9210:14:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3642,"nodeType":"IfStatement","src":"9206:93:25","trueBody":{"id":3641,"nodeType":"Block","src":"9226:73:25","statements":[{"expression":{"id":3635,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3633,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3559,"src":"9244:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":3634,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9254:1:25","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9244:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3636,"nodeType":"ExpressionStatement","src":"9244:11:25"},{"expression":{"id":3639,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3637,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3565,"src":"9273:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":3638,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9283:1:25","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9273:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3640,"nodeType":"ExpressionStatement","src":"9273:11:25"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3647,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3645,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3643,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3559,"src":"9316:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"34","id":3644,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9325:1:25","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9316:10:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3646,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9329:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9316:14:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3657,"nodeType":"IfStatement","src":"9312:93:25","trueBody":{"id":3656,"nodeType":"Block","src":"9332:73:25","statements":[{"expression":{"id":3650,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3648,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3559,"src":"9350:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":3649,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9360:1:25","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9350:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3651,"nodeType":"ExpressionStatement","src":"9350:11:25"},{"expression":{"id":3654,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3652,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3565,"src":"9379:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":3653,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9389:1:25","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9379:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3655,"nodeType":"ExpressionStatement","src":"9379:11:25"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3662,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3660,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3658,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3559,"src":"9422:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"32","id":3659,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9431:1:25","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9422:10:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3661,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9435:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9422:14:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3672,"nodeType":"IfStatement","src":"9418:93:25","trueBody":{"id":3671,"nodeType":"Block","src":"9438:73:25","statements":[{"expression":{"id":3665,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3663,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3559,"src":"9456:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"32","id":3664,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9466:1:25","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9456:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3666,"nodeType":"ExpressionStatement","src":"9456:11:25"},{"expression":{"id":3669,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3667,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3565,"src":"9485:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":3668,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9495:1:25","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9485:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3670,"nodeType":"ExpressionStatement","src":"9485:11:25"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3677,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3675,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3673,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3559,"src":"9528:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3674,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9537:1:25","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9528:10:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3676,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9541:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9528:14:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3683,"nodeType":"IfStatement","src":"9524:64:25","trueBody":{"id":3682,"nodeType":"Block","src":"9544:44:25","statements":[{"expression":{"id":3680,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3678,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3565,"src":"9562:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3679,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9572:1:25","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9562:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3681,"nodeType":"ExpressionStatement","src":"9562:11:25"}]}}]},{"expression":{"id":3685,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3565,"src":"9614:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3563,"id":3686,"nodeType":"Return","src":"9607:13:25"}]},"documentation":{"id":3557,"nodeType":"StructuredDocumentation","src":"8526:113:25","text":" @dev Return the log in base 2, rounded down, of a positive value.\n Returns 0 if given 0."},"id":3688,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"8653:4:25","nodeType":"FunctionDefinition","parameters":{"id":3560,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3559,"mutability":"mutable","name":"value","nameLocation":"8666:5:25","nodeType":"VariableDeclaration","scope":3688,"src":"8658:13:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3558,"name":"uint256","nodeType":"ElementaryTypeName","src":"8658:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8657:15:25"},"returnParameters":{"id":3563,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3562,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3688,"src":"8696:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3561,"name":"uint256","nodeType":"ElementaryTypeName","src":"8696:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8695:9:25"},"scope":4016,"src":"8644:983:25","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3723,"nodeType":"Block","src":"9860:165:25","statements":[{"id":3722,"nodeType":"UncheckedBlock","src":"9870:149:25","statements":[{"assignments":[3700],"declarations":[{"constant":false,"id":3700,"mutability":"mutable","name":"result","nameLocation":"9902:6:25","nodeType":"VariableDeclaration","scope":3722,"src":"9894:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3699,"name":"uint256","nodeType":"ElementaryTypeName","src":"9894:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3704,"initialValue":{"arguments":[{"id":3702,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3691,"src":"9916:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3701,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[3688,3724],"referencedDeclaration":3688,"src":"9911:4:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3703,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9911:11:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9894:28:25"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3720,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3705,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3700,"src":"9943:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3715,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$3157","typeString":"enum MathUpgradeable.Rounding"},"id":3709,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3706,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3694,"src":"9953:8:25","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3157","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3707,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3157,"src":"9965:8:25","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$3157_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":3708,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9974:2:25","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":3155,"src":"9965:11:25","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3157","typeString":"enum MathUpgradeable.Rounding"}},"src":"9953:23:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3714,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3712,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":3710,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9980:1:25","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":3711,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3700,"src":"9985:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9980:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3713,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3691,"src":"9994:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9980:19:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9953:46:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":3717,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10006:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":3718,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9953:54:25","trueExpression":{"hexValue":"31","id":3716,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10002:1:25","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":3719,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9952:56:25","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"9943:65:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3698,"id":3721,"nodeType":"Return","src":"9936:72:25"}]}]},"documentation":{"id":3689,"nodeType":"StructuredDocumentation","src":"9633:142:25","text":" @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":3724,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"9789:4:25","nodeType":"FunctionDefinition","parameters":{"id":3695,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3691,"mutability":"mutable","name":"value","nameLocation":"9802:5:25","nodeType":"VariableDeclaration","scope":3724,"src":"9794:13:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3690,"name":"uint256","nodeType":"ElementaryTypeName","src":"9794:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3694,"mutability":"mutable","name":"rounding","nameLocation":"9818:8:25","nodeType":"VariableDeclaration","scope":3724,"src":"9809:17:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3157","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":3693,"nodeType":"UserDefinedTypeName","pathNode":{"id":3692,"name":"Rounding","nameLocations":["9809:8:25"],"nodeType":"IdentifierPath","referencedDeclaration":3157,"src":"9809:8:25"},"referencedDeclaration":3157,"src":"9809:8:25","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3157","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"9793:34:25"},"returnParameters":{"id":3698,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3697,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3724,"src":"9851:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3696,"name":"uint256","nodeType":"ElementaryTypeName","src":"9851:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9850:9:25"},"scope":4016,"src":"9780:245:25","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3852,"nodeType":"Block","src":"10212:854:25","statements":[{"assignments":[3733],"declarations":[{"constant":false,"id":3733,"mutability":"mutable","name":"result","nameLocation":"10230:6:25","nodeType":"VariableDeclaration","scope":3852,"src":"10222:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3732,"name":"uint256","nodeType":"ElementaryTypeName","src":"10222:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3735,"initialValue":{"hexValue":"30","id":3734,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10239:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10222:18:25"},{"id":3849,"nodeType":"UncheckedBlock","src":"10250:787:25","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3740,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3736,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3727,"src":"10278:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":3739,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3737,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10287:2:25","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":3738,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10293:2:25","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10287:8:25","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10278:17:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3752,"nodeType":"IfStatement","src":"10274:103:25","trueBody":{"id":3751,"nodeType":"Block","src":"10297:80:25","statements":[{"expression":{"id":3745,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3741,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3727,"src":"10315:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":3744,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3742,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10324:2:25","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":3743,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10330:2:25","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10324:8:25","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10315:17:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3746,"nodeType":"ExpressionStatement","src":"10315:17:25"},{"expression":{"id":3749,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3747,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3733,"src":"10350:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":3748,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10360:2:25","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10350:12:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3750,"nodeType":"ExpressionStatement","src":"10350:12:25"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3757,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3753,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3727,"src":"10394:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":3756,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3754,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10403:2:25","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":3755,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10409:2:25","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10403:8:25","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10394:17:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3769,"nodeType":"IfStatement","src":"10390:103:25","trueBody":{"id":3768,"nodeType":"Block","src":"10413:80:25","statements":[{"expression":{"id":3762,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3758,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3727,"src":"10431:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":3761,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3759,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10440:2:25","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":3760,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10446:2:25","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10440:8:25","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10431:17:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3763,"nodeType":"ExpressionStatement","src":"10431:17:25"},{"expression":{"id":3766,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3764,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3733,"src":"10466:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":3765,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10476:2:25","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10466:12:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3767,"nodeType":"ExpressionStatement","src":"10466:12:25"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3774,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3770,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3727,"src":"10510:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":3773,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3771,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10519:2:25","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":3772,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10525:2:25","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10519:8:25","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10510:17:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3786,"nodeType":"IfStatement","src":"10506:103:25","trueBody":{"id":3785,"nodeType":"Block","src":"10529:80:25","statements":[{"expression":{"id":3779,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3775,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3727,"src":"10547:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":3778,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3776,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10556:2:25","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":3777,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10562:2:25","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10556:8:25","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10547:17:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3780,"nodeType":"ExpressionStatement","src":"10547:17:25"},{"expression":{"id":3783,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3781,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3733,"src":"10582:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":3782,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10592:2:25","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10582:12:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3784,"nodeType":"ExpressionStatement","src":"10582:12:25"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3791,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3787,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3727,"src":"10626:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":3790,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3788,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10635:2:25","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":3789,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10641:1:25","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10635:7:25","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10626:16:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3803,"nodeType":"IfStatement","src":"10622:100:25","trueBody":{"id":3802,"nodeType":"Block","src":"10644:78:25","statements":[{"expression":{"id":3796,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3792,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3727,"src":"10662:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":3795,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3793,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10671:2:25","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":3794,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10677:1:25","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10671:7:25","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10662:16:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3797,"nodeType":"ExpressionStatement","src":"10662:16:25"},{"expression":{"id":3800,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3798,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3733,"src":"10696:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":3799,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10706:1:25","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10696:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3801,"nodeType":"ExpressionStatement","src":"10696:11:25"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3808,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3804,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3727,"src":"10739:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":3807,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3805,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10748:2:25","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":3806,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10754:1:25","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10748:7:25","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10739:16:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3820,"nodeType":"IfStatement","src":"10735:100:25","trueBody":{"id":3819,"nodeType":"Block","src":"10757:78:25","statements":[{"expression":{"id":3813,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3809,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3727,"src":"10775:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":3812,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3810,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10784:2:25","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":3811,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10790:1:25","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10784:7:25","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10775:16:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3814,"nodeType":"ExpressionStatement","src":"10775:16:25"},{"expression":{"id":3817,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3815,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3733,"src":"10809:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":3816,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10819:1:25","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10809:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3818,"nodeType":"ExpressionStatement","src":"10809:11:25"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3825,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3821,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3727,"src":"10852:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":3824,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3822,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10861:2:25","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":3823,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10867:1:25","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10861:7:25","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10852:16:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3837,"nodeType":"IfStatement","src":"10848:100:25","trueBody":{"id":3836,"nodeType":"Block","src":"10870:78:25","statements":[{"expression":{"id":3830,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3826,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3727,"src":"10888:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":3829,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3827,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10897:2:25","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":3828,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10903:1:25","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10897:7:25","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10888:16:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3831,"nodeType":"ExpressionStatement","src":"10888:16:25"},{"expression":{"id":3834,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3832,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3733,"src":"10922:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":3833,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10932:1:25","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10922:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3835,"nodeType":"ExpressionStatement","src":"10922:11:25"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3842,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3838,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3727,"src":"10965:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"id":3841,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3839,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10974:2:25","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"31","id":3840,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10980:1:25","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10974:7:25","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}},"src":"10965:16:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3848,"nodeType":"IfStatement","src":"10961:66:25","trueBody":{"id":3847,"nodeType":"Block","src":"10983:44:25","statements":[{"expression":{"id":3845,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3843,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3733,"src":"11001:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3844,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11011:1:25","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"11001:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3846,"nodeType":"ExpressionStatement","src":"11001:11:25"}]}}]},{"expression":{"id":3850,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3733,"src":"11053:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3731,"id":3851,"nodeType":"Return","src":"11046:13:25"}]},"documentation":{"id":3725,"nodeType":"StructuredDocumentation","src":"10031:114:25","text":" @dev Return the log in base 10, rounded down, of a positive value.\n Returns 0 if given 0."},"id":3853,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"10159:5:25","nodeType":"FunctionDefinition","parameters":{"id":3728,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3727,"mutability":"mutable","name":"value","nameLocation":"10173:5:25","nodeType":"VariableDeclaration","scope":3853,"src":"10165:13:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3726,"name":"uint256","nodeType":"ElementaryTypeName","src":"10165:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10164:15:25"},"returnParameters":{"id":3731,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3730,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3853,"src":"10203:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3729,"name":"uint256","nodeType":"ElementaryTypeName","src":"10203:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10202:9:25"},"scope":4016,"src":"10150:916:25","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3888,"nodeType":"Block","src":"11301:167:25","statements":[{"id":3887,"nodeType":"UncheckedBlock","src":"11311:151:25","statements":[{"assignments":[3865],"declarations":[{"constant":false,"id":3865,"mutability":"mutable","name":"result","nameLocation":"11343:6:25","nodeType":"VariableDeclaration","scope":3887,"src":"11335:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3864,"name":"uint256","nodeType":"ElementaryTypeName","src":"11335:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3869,"initialValue":{"arguments":[{"id":3867,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3856,"src":"11358:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3866,"name":"log10","nodeType":"Identifier","overloadedDeclarations":[3853,3889],"referencedDeclaration":3853,"src":"11352:5:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3868,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11352:12:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11335:29:25"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3885,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3870,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3865,"src":"11385:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3880,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$3157","typeString":"enum MathUpgradeable.Rounding"},"id":3874,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3871,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3859,"src":"11395:8:25","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3157","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3872,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3157,"src":"11407:8:25","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$3157_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":3873,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11416:2:25","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":3155,"src":"11407:11:25","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3157","typeString":"enum MathUpgradeable.Rounding"}},"src":"11395:23:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3879,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3877,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3875,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11422:2:25","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":3876,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3865,"src":"11428:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11422:12:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3878,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3856,"src":"11437:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11422:20:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"11395:47:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":3882,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11449:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":3883,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"11395:55:25","trueExpression":{"hexValue":"31","id":3881,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11445:1:25","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":3884,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11394:57:25","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11385:66:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3863,"id":3886,"nodeType":"Return","src":"11378:73:25"}]}]},"documentation":{"id":3854,"nodeType":"StructuredDocumentation","src":"11072:143:25","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":3889,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"11229:5:25","nodeType":"FunctionDefinition","parameters":{"id":3860,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3856,"mutability":"mutable","name":"value","nameLocation":"11243:5:25","nodeType":"VariableDeclaration","scope":3889,"src":"11235:13:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3855,"name":"uint256","nodeType":"ElementaryTypeName","src":"11235:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3859,"mutability":"mutable","name":"rounding","nameLocation":"11259:8:25","nodeType":"VariableDeclaration","scope":3889,"src":"11250:17:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3157","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":3858,"nodeType":"UserDefinedTypeName","pathNode":{"id":3857,"name":"Rounding","nameLocations":["11250:8:25"],"nodeType":"IdentifierPath","referencedDeclaration":3157,"src":"11250:8:25"},"referencedDeclaration":3157,"src":"11250:8:25","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3157","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"11234:34:25"},"returnParameters":{"id":3863,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3862,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3889,"src":"11292:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3861,"name":"uint256","nodeType":"ElementaryTypeName","src":"11292:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11291:9:25"},"scope":4016,"src":"11220:248:25","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3975,"nodeType":"Block","src":"11782:600:25","statements":[{"assignments":[3898],"declarations":[{"constant":false,"id":3898,"mutability":"mutable","name":"result","nameLocation":"11800:6:25","nodeType":"VariableDeclaration","scope":3975,"src":"11792:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3897,"name":"uint256","nodeType":"ElementaryTypeName","src":"11792:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3900,"initialValue":{"hexValue":"30","id":3899,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11809:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"11792:18:25"},{"id":3972,"nodeType":"UncheckedBlock","src":"11820:533:25","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3905,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3903,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3901,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3892,"src":"11848:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":3902,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11857:3:25","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11848:12:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3904,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11863:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11848:16:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3915,"nodeType":"IfStatement","src":"11844:98:25","trueBody":{"id":3914,"nodeType":"Block","src":"11866:76:25","statements":[{"expression":{"id":3908,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3906,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3892,"src":"11884:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":3907,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11894:3:25","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11884:13:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3909,"nodeType":"ExpressionStatement","src":"11884:13:25"},{"expression":{"id":3912,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3910,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3898,"src":"11915:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":3911,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11925:2:25","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11915:12:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3913,"nodeType":"ExpressionStatement","src":"11915:12:25"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3920,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3918,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3916,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3892,"src":"11959:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":3917,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11968:2:25","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11959:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3919,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11973:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11959:15:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3930,"nodeType":"IfStatement","src":"11955:95:25","trueBody":{"id":3929,"nodeType":"Block","src":"11976:74:25","statements":[{"expression":{"id":3923,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3921,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3892,"src":"11994:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":3922,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12004:2:25","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11994:12:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3924,"nodeType":"ExpressionStatement","src":"11994:12:25"},{"expression":{"id":3927,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3925,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3898,"src":"12024:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":3926,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12034:1:25","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12024:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3928,"nodeType":"ExpressionStatement","src":"12024:11:25"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3935,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3933,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3931,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3892,"src":"12067:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":3932,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12076:2:25","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12067:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3934,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12081:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12067:15:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3945,"nodeType":"IfStatement","src":"12063:95:25","trueBody":{"id":3944,"nodeType":"Block","src":"12084:74:25","statements":[{"expression":{"id":3938,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3936,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3892,"src":"12102:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":3937,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12112:2:25","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12102:12:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3939,"nodeType":"ExpressionStatement","src":"12102:12:25"},{"expression":{"id":3942,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3940,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3898,"src":"12132:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":3941,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12142:1:25","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"12132:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3943,"nodeType":"ExpressionStatement","src":"12132:11:25"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3950,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3948,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3946,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3892,"src":"12175:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":3947,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12184:2:25","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12175:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3949,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12189:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12175:15:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3960,"nodeType":"IfStatement","src":"12171:95:25","trueBody":{"id":3959,"nodeType":"Block","src":"12192:74:25","statements":[{"expression":{"id":3953,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3951,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3892,"src":"12210:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":3952,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12220:2:25","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12210:12:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3954,"nodeType":"ExpressionStatement","src":"12210:12:25"},{"expression":{"id":3957,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3955,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3898,"src":"12240:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":3956,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12250:1:25","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12240:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3958,"nodeType":"ExpressionStatement","src":"12240:11:25"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3965,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3963,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3961,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3892,"src":"12283:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":3962,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12292:1:25","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12283:10:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3964,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12296:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12283:14:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3971,"nodeType":"IfStatement","src":"12279:64:25","trueBody":{"id":3970,"nodeType":"Block","src":"12299:44:25","statements":[{"expression":{"id":3968,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3966,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3898,"src":"12317:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3967,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12327:1:25","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12317:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3969,"nodeType":"ExpressionStatement","src":"12317:11:25"}]}}]},{"expression":{"id":3973,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3898,"src":"12369:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3896,"id":3974,"nodeType":"Return","src":"12362:13:25"}]},"documentation":{"id":3890,"nodeType":"StructuredDocumentation","src":"11474:240:25","text":" @dev Return the log in base 256, rounded down, of a positive value.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."},"id":3976,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"11728:6:25","nodeType":"FunctionDefinition","parameters":{"id":3893,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3892,"mutability":"mutable","name":"value","nameLocation":"11743:5:25","nodeType":"VariableDeclaration","scope":3976,"src":"11735:13:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3891,"name":"uint256","nodeType":"ElementaryTypeName","src":"11735:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11734:15:25"},"returnParameters":{"id":3896,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3895,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3976,"src":"11773:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3894,"name":"uint256","nodeType":"ElementaryTypeName","src":"11773:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11772:9:25"},"scope":4016,"src":"11719:663:25","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4014,"nodeType":"Block","src":"12619:174:25","statements":[{"id":4013,"nodeType":"UncheckedBlock","src":"12629:158:25","statements":[{"assignments":[3988],"declarations":[{"constant":false,"id":3988,"mutability":"mutable","name":"result","nameLocation":"12661:6:25","nodeType":"VariableDeclaration","scope":4013,"src":"12653:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3987,"name":"uint256","nodeType":"ElementaryTypeName","src":"12653:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3992,"initialValue":{"arguments":[{"id":3990,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3979,"src":"12677:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3989,"name":"log256","nodeType":"Identifier","overloadedDeclarations":[3976,4015],"referencedDeclaration":3976,"src":"12670:6:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3991,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12670:13:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12653:30:25"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4011,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3993,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3988,"src":"12704:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4006,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$3157","typeString":"enum MathUpgradeable.Rounding"},"id":3997,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3994,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3982,"src":"12714:8:25","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3157","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3995,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3157,"src":"12726:8:25","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$3157_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":3996,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"12735:2:25","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":3155,"src":"12726:11:25","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3157","typeString":"enum MathUpgradeable.Rounding"}},"src":"12714:23:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4005,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4003,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":3998,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12741:1:25","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4001,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3999,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3988,"src":"12747:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"33","id":4000,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12757:1:25","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"12747:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4002,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12746:13:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12741:18:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4004,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3979,"src":"12762:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12741:26:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12714:53:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":4008,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12774:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":4009,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"12714:61:25","trueExpression":{"hexValue":"31","id":4007,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12770:1:25","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":4010,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12713:63:25","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"12704:72:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3986,"id":4012,"nodeType":"Return","src":"12697:79:25"}]}]},"documentation":{"id":3977,"nodeType":"StructuredDocumentation","src":"12388:144:25","text":" @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":4015,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"12546:6:25","nodeType":"FunctionDefinition","parameters":{"id":3983,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3979,"mutability":"mutable","name":"value","nameLocation":"12561:5:25","nodeType":"VariableDeclaration","scope":4015,"src":"12553:13:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3978,"name":"uint256","nodeType":"ElementaryTypeName","src":"12553:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3982,"mutability":"mutable","name":"rounding","nameLocation":"12577:8:25","nodeType":"VariableDeclaration","scope":4015,"src":"12568:17:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3157","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":3981,"nodeType":"UserDefinedTypeName","pathNode":{"id":3980,"name":"Rounding","nameLocations":["12568:8:25"],"nodeType":"IdentifierPath","referencedDeclaration":3157,"src":"12568:8:25"},"referencedDeclaration":3157,"src":"12568:8:25","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3157","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"12552:34:25"},"returnParameters":{"id":3986,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3985,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4015,"src":"12610:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3984,"name":"uint256","nodeType":"ElementaryTypeName","src":"12610:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12609:9:25"},"scope":4016,"src":"12537:256:25","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":4017,"src":"202:12593:25","usedErrors":[]}],"src":"103:12693:25"},"id":25},"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol","exportedSymbols":{"SignedMathUpgradeable":[4121]},"id":4122,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4018,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"109:23:26"},{"abstract":false,"baseContracts":[],"canonicalName":"SignedMathUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":4019,"nodeType":"StructuredDocumentation","src":"134:80:26","text":" @dev Standard signed math utilities missing in the Solidity language."},"fullyImplemented":true,"id":4121,"linearizedBaseContracts":[4121],"name":"SignedMathUpgradeable","nameLocation":"223:21:26","nodeType":"ContractDefinition","nodes":[{"body":{"id":4036,"nodeType":"Block","src":"386:37:26","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4031,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4029,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4022,"src":"403:1:26","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":4030,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4024,"src":"407:1:26","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"403:5:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":4033,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4024,"src":"415:1:26","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4034,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"403:13:26","trueExpression":{"id":4032,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4022,"src":"411:1:26","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":4028,"id":4035,"nodeType":"Return","src":"396:20:26"}]},"documentation":{"id":4020,"nodeType":"StructuredDocumentation","src":"251:66:26","text":" @dev Returns the largest of two signed numbers."},"id":4037,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"331:3:26","nodeType":"FunctionDefinition","parameters":{"id":4025,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4022,"mutability":"mutable","name":"a","nameLocation":"342:1:26","nodeType":"VariableDeclaration","scope":4037,"src":"335:8:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4021,"name":"int256","nodeType":"ElementaryTypeName","src":"335:6:26","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":4024,"mutability":"mutable","name":"b","nameLocation":"352:1:26","nodeType":"VariableDeclaration","scope":4037,"src":"345:8:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4023,"name":"int256","nodeType":"ElementaryTypeName","src":"345:6:26","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"334:20:26"},"returnParameters":{"id":4028,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4027,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4037,"src":"378:6:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4026,"name":"int256","nodeType":"ElementaryTypeName","src":"378:6:26","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"377:8:26"},"scope":4121,"src":"322:101:26","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4054,"nodeType":"Block","src":"565:37:26","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4049,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4047,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4040,"src":"582:1:26","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4048,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4042,"src":"586:1:26","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"582:5:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":4051,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4042,"src":"594:1:26","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4052,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"582:13:26","trueExpression":{"id":4050,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4040,"src":"590:1:26","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":4046,"id":4053,"nodeType":"Return","src":"575:20:26"}]},"documentation":{"id":4038,"nodeType":"StructuredDocumentation","src":"429:67:26","text":" @dev Returns the smallest of two signed numbers."},"id":4055,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"510:3:26","nodeType":"FunctionDefinition","parameters":{"id":4043,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4040,"mutability":"mutable","name":"a","nameLocation":"521:1:26","nodeType":"VariableDeclaration","scope":4055,"src":"514:8:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4039,"name":"int256","nodeType":"ElementaryTypeName","src":"514:6:26","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":4042,"mutability":"mutable","name":"b","nameLocation":"531:1:26","nodeType":"VariableDeclaration","scope":4055,"src":"524:8:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4041,"name":"int256","nodeType":"ElementaryTypeName","src":"524:6:26","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"513:20:26"},"returnParameters":{"id":4046,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4045,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4055,"src":"557:6:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4044,"name":"int256","nodeType":"ElementaryTypeName","src":"557:6:26","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"556:8:26"},"scope":4121,"src":"501:101:26","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4098,"nodeType":"Block","src":"807:162:26","statements":[{"assignments":[4066],"declarations":[{"constant":false,"id":4066,"mutability":"mutable","name":"x","nameLocation":"876:1:26","nodeType":"VariableDeclaration","scope":4098,"src":"869:8:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4065,"name":"int256","nodeType":"ElementaryTypeName","src":"869:6:26","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":4079,"initialValue":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4078,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4069,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4067,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4058,"src":"881:1:26","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":4068,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4060,"src":"885:1:26","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"881:5:26","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4070,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"880:7:26","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4076,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4073,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4071,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4058,"src":"892:1:26","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":4072,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4060,"src":"896:1:26","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"892:5:26","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4074,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"891:7:26","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4075,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"902:1:26","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"891:12:26","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4077,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"890:14:26","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"880:24:26","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"869:35:26"},{"expression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4096,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4080,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4066,"src":"921:1:26","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4094,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4088,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4085,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4066,"src":"941:1:26","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4084,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"933:7:26","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4083,"name":"uint256","nodeType":"ElementaryTypeName","src":"933:7:26","typeDescriptions":{}}},"id":4086,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"933:10:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":4087,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"947:3:26","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"933:17:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4082,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"926:6:26","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":4081,"name":"int256","nodeType":"ElementaryTypeName","src":"926:6:26","typeDescriptions":{}}},"id":4089,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"926:25:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4092,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4090,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4058,"src":"955:1:26","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":4091,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4060,"src":"959:1:26","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"955:5:26","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4093,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"954:7:26","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"926:35:26","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4095,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"925:37:26","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"921:41:26","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":4064,"id":4097,"nodeType":"Return","src":"914:48:26"}]},"documentation":{"id":4056,"nodeType":"StructuredDocumentation","src":"608:126:26","text":" @dev Returns the average of two signed numbers without overflow.\n The result is rounded towards zero."},"id":4099,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"748:7:26","nodeType":"FunctionDefinition","parameters":{"id":4061,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4058,"mutability":"mutable","name":"a","nameLocation":"763:1:26","nodeType":"VariableDeclaration","scope":4099,"src":"756:8:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4057,"name":"int256","nodeType":"ElementaryTypeName","src":"756:6:26","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":4060,"mutability":"mutable","name":"b","nameLocation":"773:1:26","nodeType":"VariableDeclaration","scope":4099,"src":"766:8:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4059,"name":"int256","nodeType":"ElementaryTypeName","src":"766:6:26","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"755:20:26"},"returnParameters":{"id":4064,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4063,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4099,"src":"799:6:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4062,"name":"int256","nodeType":"ElementaryTypeName","src":"799:6:26","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"798:8:26"},"scope":4121,"src":"739:230:26","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4119,"nodeType":"Block","src":"1113:158:26","statements":[{"id":4118,"nodeType":"UncheckedBlock","src":"1123:142:26","statements":[{"expression":{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4111,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4109,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4102,"src":"1238:1:26","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"30","id":4110,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1243:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1238:6:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":4114,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"1251:2:26","subExpression":{"id":4113,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4102,"src":"1252:1:26","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4115,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1238:15:26","trueExpression":{"id":4112,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4102,"src":"1247:1:26","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4108,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1230:7:26","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4107,"name":"uint256","nodeType":"ElementaryTypeName","src":"1230:7:26","typeDescriptions":{}}},"id":4116,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1230:24:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4106,"id":4117,"nodeType":"Return","src":"1223:31:26"}]}]},"documentation":{"id":4100,"nodeType":"StructuredDocumentation","src":"975:78:26","text":" @dev Returns the absolute unsigned value of a signed value."},"id":4120,"implemented":true,"kind":"function","modifiers":[],"name":"abs","nameLocation":"1067:3:26","nodeType":"FunctionDefinition","parameters":{"id":4103,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4102,"mutability":"mutable","name":"n","nameLocation":"1078:1:26","nodeType":"VariableDeclaration","scope":4120,"src":"1071:8:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4101,"name":"int256","nodeType":"ElementaryTypeName","src":"1071:6:26","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1070:10:26"},"returnParameters":{"id":4106,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4105,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4120,"src":"1104:7:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4104,"name":"uint256","nodeType":"ElementaryTypeName","src":"1104:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1103:9:26"},"scope":4121,"src":"1058:213:26","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":4122,"src":"215:1058:26","usedErrors":[]}],"src":"109:1165:26"},"id":26},"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol","exportedSymbols":{"EnumerableSetUpgradeable":[4734]},"id":4735,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4123,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"205:23:27"},{"abstract":false,"baseContracts":[],"canonicalName":"EnumerableSetUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":4124,"nodeType":"StructuredDocumentation","src":"230:1098:27","text":" @dev Library for managing\n https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n types.\n Sets have the following properties:\n - Elements are added, removed, and checked for existence in constant time\n (O(1)).\n - Elements are enumerated in O(n). No guarantees are made on the ordering.\n ```solidity\n contract Example {\n     // Add the library methods\n     using EnumerableSet for EnumerableSet.AddressSet;\n     // Declare a set state variable\n     EnumerableSet.AddressSet private mySet;\n }\n ```\n As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n and `uint256` (`UintSet`) are supported.\n [WARNING]\n ====\n Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n unusable.\n See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n array of EnumerableSet.\n ===="},"fullyImplemented":true,"id":4734,"linearizedBaseContracts":[4734],"name":"EnumerableSetUpgradeable","nameLocation":"1337:24:27","nodeType":"ContractDefinition","nodes":[{"canonicalName":"EnumerableSetUpgradeable.Set","id":4132,"members":[{"constant":false,"id":4127,"mutability":"mutable","name":"_values","nameLocation":"1872:7:27","nodeType":"VariableDeclaration","scope":4132,"src":"1862:17:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":4125,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1862:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4126,"nodeType":"ArrayTypeName","src":"1862:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":4131,"mutability":"mutable","name":"_indexes","nameLocation":"2040:8:27","nodeType":"VariableDeclaration","scope":4132,"src":"2012:36:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"},"typeName":{"id":4130,"keyType":{"id":4128,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2020:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"2012:27:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"},"valueType":{"id":4129,"name":"uint256","nodeType":"ElementaryTypeName","src":"2031:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"internal"}],"name":"Set","nameLocation":"1815:3:27","nodeType":"StructDefinition","scope":4734,"src":"1808:247:27","visibility":"public"},{"body":{"id":4173,"nodeType":"Block","src":"2294:335:27","statements":[{"condition":{"id":4147,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"2308:22:27","subExpression":{"arguments":[{"id":4144,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4136,"src":"2319:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4132_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set storage pointer"}},{"id":4145,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4138,"src":"2324:5:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$4132_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set storage pointer"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4143,"name":"_contains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4277,"src":"2309:9:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$4132_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSetUpgradeable.Set storage pointer,bytes32) view returns (bool)"}},"id":4146,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2309:21:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":4171,"nodeType":"Block","src":"2586:37:27","statements":[{"expression":{"hexValue":"66616c7365","id":4169,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2607:5:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":4142,"id":4170,"nodeType":"Return","src":"2600:12:27"}]},"id":4172,"nodeType":"IfStatement","src":"2304:319:27","trueBody":{"id":4168,"nodeType":"Block","src":"2332:248:27","statements":[{"expression":{"arguments":[{"id":4153,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4138,"src":"2363:5:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"expression":{"id":4148,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4136,"src":"2346:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4132_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set storage pointer"}},"id":4151,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2350:7:27","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":4127,"src":"2346:11:27","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":4152,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2358:4:27","memberName":"push","nodeType":"MemberAccess","src":"2346:16:27","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_bytes32_$dyn_storage_ptr_$_t_bytes32_$returns$__$bound_to$_t_array$_t_bytes32_$dyn_storage_ptr_$","typeString":"function (bytes32[] storage pointer,bytes32)"}},"id":4154,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2346:23:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4155,"nodeType":"ExpressionStatement","src":"2346:23:27"},{"expression":{"id":4164,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":4156,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4136,"src":"2504:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4132_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set storage pointer"}},"id":4159,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2508:8:27","memberName":"_indexes","nodeType":"MemberAccess","referencedDeclaration":4131,"src":"2504:12:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":4160,"indexExpression":{"id":4158,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4138,"src":"2517:5:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2504:19:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"expression":{"id":4161,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4136,"src":"2526:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4132_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set storage pointer"}},"id":4162,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2530:7:27","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":4127,"src":"2526:11:27","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":4163,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2538:6:27","memberName":"length","nodeType":"MemberAccess","src":"2526:18:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2504:40:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4165,"nodeType":"ExpressionStatement","src":"2504:40:27"},{"expression":{"hexValue":"74727565","id":4166,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2565:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":4142,"id":4167,"nodeType":"Return","src":"2558:11:27"}]}}]},"documentation":{"id":4133,"nodeType":"StructuredDocumentation","src":"2061:159:27","text":" @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."},"id":4174,"implemented":true,"kind":"function","modifiers":[],"name":"_add","nameLocation":"2234:4:27","nodeType":"FunctionDefinition","parameters":{"id":4139,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4136,"mutability":"mutable","name":"set","nameLocation":"2251:3:27","nodeType":"VariableDeclaration","scope":4174,"src":"2239:15:27","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4132_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set"},"typeName":{"id":4135,"nodeType":"UserDefinedTypeName","pathNode":{"id":4134,"name":"Set","nameLocations":["2239:3:27"],"nodeType":"IdentifierPath","referencedDeclaration":4132,"src":"2239:3:27"},"referencedDeclaration":4132,"src":"2239:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4132_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set"}},"visibility":"internal"},{"constant":false,"id":4138,"mutability":"mutable","name":"value","nameLocation":"2264:5:27","nodeType":"VariableDeclaration","scope":4174,"src":"2256:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4137,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2256:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2238:32:27"},"returnParameters":{"id":4142,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4141,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4174,"src":"2288:4:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4140,"name":"bool","nodeType":"ElementaryTypeName","src":"2288:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2287:6:27"},"scope":4734,"src":"2225:404:27","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":4257,"nodeType":"Block","src":"2869:1316:27","statements":[{"assignments":[4186],"declarations":[{"constant":false,"id":4186,"mutability":"mutable","name":"valueIndex","nameLocation":"2987:10:27","nodeType":"VariableDeclaration","scope":4257,"src":"2979:18:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4185,"name":"uint256","nodeType":"ElementaryTypeName","src":"2979:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4191,"initialValue":{"baseExpression":{"expression":{"id":4187,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4178,"src":"3000:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4132_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set storage pointer"}},"id":4188,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3004:8:27","memberName":"_indexes","nodeType":"MemberAccess","referencedDeclaration":4131,"src":"3000:12:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":4190,"indexExpression":{"id":4189,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4180,"src":"3013:5:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3000:19:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2979:40:27"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4194,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4192,"name":"valueIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4186,"src":"3034:10:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":4193,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3048:1:27","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3034:15:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":4255,"nodeType":"Block","src":"4142:37:27","statements":[{"expression":{"hexValue":"66616c7365","id":4253,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4163:5:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":4184,"id":4254,"nodeType":"Return","src":"4156:12:27"}]},"id":4256,"nodeType":"IfStatement","src":"3030:1149:27","trueBody":{"id":4252,"nodeType":"Block","src":"3051:1085:27","statements":[{"assignments":[4196],"declarations":[{"constant":false,"id":4196,"mutability":"mutable","name":"toDeleteIndex","nameLocation":"3411:13:27","nodeType":"VariableDeclaration","scope":4252,"src":"3403:21:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4195,"name":"uint256","nodeType":"ElementaryTypeName","src":"3403:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4200,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4199,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4197,"name":"valueIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4186,"src":"3427:10:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":4198,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3440:1:27","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3427:14:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3403:38:27"},{"assignments":[4202],"declarations":[{"constant":false,"id":4202,"mutability":"mutable","name":"lastIndex","nameLocation":"3463:9:27","nodeType":"VariableDeclaration","scope":4252,"src":"3455:17:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4201,"name":"uint256","nodeType":"ElementaryTypeName","src":"3455:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4208,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4207,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":4203,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4178,"src":"3475:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4132_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set storage pointer"}},"id":4204,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3479:7:27","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":4127,"src":"3475:11:27","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":4205,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3487:6:27","memberName":"length","nodeType":"MemberAccess","src":"3475:18:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":4206,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3496:1:27","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3475:22:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3455:42:27"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4211,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4209,"name":"lastIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4202,"src":"3516:9:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4210,"name":"toDeleteIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4196,"src":"3529:13:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3516:26:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4236,"nodeType":"IfStatement","src":"3512:398:27","trueBody":{"id":4235,"nodeType":"Block","src":"3544:366:27","statements":[{"assignments":[4213],"declarations":[{"constant":false,"id":4213,"mutability":"mutable","name":"lastValue","nameLocation":"3570:9:27","nodeType":"VariableDeclaration","scope":4235,"src":"3562:17:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4212,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3562:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":4218,"initialValue":{"baseExpression":{"expression":{"id":4214,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4178,"src":"3582:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4132_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set storage pointer"}},"id":4215,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3586:7:27","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":4127,"src":"3582:11:27","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":4217,"indexExpression":{"id":4216,"name":"lastIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4202,"src":"3594:9:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3582:22:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"3562:42:27"},{"expression":{"id":4225,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":4219,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4178,"src":"3704:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4132_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set storage pointer"}},"id":4222,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3708:7:27","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":4127,"src":"3704:11:27","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":4223,"indexExpression":{"id":4221,"name":"toDeleteIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4196,"src":"3716:13:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3704:26:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4224,"name":"lastValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4213,"src":"3733:9:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3704:38:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4226,"nodeType":"ExpressionStatement","src":"3704:38:27"},{"expression":{"id":4233,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":4227,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4178,"src":"3816:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4132_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set storage pointer"}},"id":4230,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3820:8:27","memberName":"_indexes","nodeType":"MemberAccess","referencedDeclaration":4131,"src":"3816:12:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":4231,"indexExpression":{"id":4229,"name":"lastValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4213,"src":"3829:9:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3816:23:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4232,"name":"valueIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4186,"src":"3842:10:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3816:36:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4234,"nodeType":"ExpressionStatement","src":"3816:36:27"}]}},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"expression":{"id":4237,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4178,"src":"3988:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4132_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set storage pointer"}},"id":4240,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3992:7:27","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":4127,"src":"3988:11:27","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":4241,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4000:3:27","memberName":"pop","nodeType":"MemberAccess","src":"3988:15:27","typeDescriptions":{"typeIdentifier":"t_function_arraypop_nonpayable$_t_array$_t_bytes32_$dyn_storage_ptr_$returns$__$bound_to$_t_array$_t_bytes32_$dyn_storage_ptr_$","typeString":"function (bytes32[] storage pointer)"}},"id":4242,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3988:17:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4243,"nodeType":"ExpressionStatement","src":"3988:17:27"},{"expression":{"id":4248,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"4073:26:27","subExpression":{"baseExpression":{"expression":{"id":4244,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4178,"src":"4080:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4132_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set storage pointer"}},"id":4245,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4084:8:27","memberName":"_indexes","nodeType":"MemberAccess","referencedDeclaration":4131,"src":"4080:12:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":4247,"indexExpression":{"id":4246,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4180,"src":"4093:5:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4080:19:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4249,"nodeType":"ExpressionStatement","src":"4073:26:27"},{"expression":{"hexValue":"74727565","id":4250,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4121:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":4184,"id":4251,"nodeType":"Return","src":"4114:11:27"}]}}]},"documentation":{"id":4175,"nodeType":"StructuredDocumentation","src":"2635:157:27","text":" @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."},"id":4258,"implemented":true,"kind":"function","modifiers":[],"name":"_remove","nameLocation":"2806:7:27","nodeType":"FunctionDefinition","parameters":{"id":4181,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4178,"mutability":"mutable","name":"set","nameLocation":"2826:3:27","nodeType":"VariableDeclaration","scope":4258,"src":"2814:15:27","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4132_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set"},"typeName":{"id":4177,"nodeType":"UserDefinedTypeName","pathNode":{"id":4176,"name":"Set","nameLocations":["2814:3:27"],"nodeType":"IdentifierPath","referencedDeclaration":4132,"src":"2814:3:27"},"referencedDeclaration":4132,"src":"2814:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4132_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set"}},"visibility":"internal"},{"constant":false,"id":4180,"mutability":"mutable","name":"value","nameLocation":"2839:5:27","nodeType":"VariableDeclaration","scope":4258,"src":"2831:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4179,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2831:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2813:32:27"},"returnParameters":{"id":4184,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4183,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4258,"src":"2863:4:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4182,"name":"bool","nodeType":"ElementaryTypeName","src":"2863:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2862:6:27"},"scope":4734,"src":"2797:1388:27","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":4276,"nodeType":"Block","src":"4345:48:27","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4274,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"expression":{"id":4269,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4262,"src":"4362:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4132_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set storage pointer"}},"id":4270,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4366:8:27","memberName":"_indexes","nodeType":"MemberAccess","referencedDeclaration":4131,"src":"4362:12:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":4272,"indexExpression":{"id":4271,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4264,"src":"4375:5:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4362:19:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":4273,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4385:1:27","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4362:24:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4268,"id":4275,"nodeType":"Return","src":"4355:31:27"}]},"documentation":{"id":4259,"nodeType":"StructuredDocumentation","src":"4191:70:27","text":" @dev Returns true if the value is in the set. O(1)."},"id":4277,"implemented":true,"kind":"function","modifiers":[],"name":"_contains","nameLocation":"4275:9:27","nodeType":"FunctionDefinition","parameters":{"id":4265,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4262,"mutability":"mutable","name":"set","nameLocation":"4297:3:27","nodeType":"VariableDeclaration","scope":4277,"src":"4285:15:27","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4132_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set"},"typeName":{"id":4261,"nodeType":"UserDefinedTypeName","pathNode":{"id":4260,"name":"Set","nameLocations":["4285:3:27"],"nodeType":"IdentifierPath","referencedDeclaration":4132,"src":"4285:3:27"},"referencedDeclaration":4132,"src":"4285:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4132_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set"}},"visibility":"internal"},{"constant":false,"id":4264,"mutability":"mutable","name":"value","nameLocation":"4310:5:27","nodeType":"VariableDeclaration","scope":4277,"src":"4302:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4263,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4302:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4284:32:27"},"returnParameters":{"id":4268,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4267,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4277,"src":"4339:4:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4266,"name":"bool","nodeType":"ElementaryTypeName","src":"4339:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4338:6:27"},"scope":4734,"src":"4266:127:27","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":4290,"nodeType":"Block","src":"4539:42:27","statements":[{"expression":{"expression":{"expression":{"id":4286,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4281,"src":"4556:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4132_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set storage pointer"}},"id":4287,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4560:7:27","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":4127,"src":"4556:11:27","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":4288,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4568:6:27","memberName":"length","nodeType":"MemberAccess","src":"4556:18:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4285,"id":4289,"nodeType":"Return","src":"4549:25:27"}]},"documentation":{"id":4278,"nodeType":"StructuredDocumentation","src":"4399:70:27","text":" @dev Returns the number of values on the set. O(1)."},"id":4291,"implemented":true,"kind":"function","modifiers":[],"name":"_length","nameLocation":"4483:7:27","nodeType":"FunctionDefinition","parameters":{"id":4282,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4281,"mutability":"mutable","name":"set","nameLocation":"4503:3:27","nodeType":"VariableDeclaration","scope":4291,"src":"4491:15:27","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4132_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set"},"typeName":{"id":4280,"nodeType":"UserDefinedTypeName","pathNode":{"id":4279,"name":"Set","nameLocations":["4491:3:27"],"nodeType":"IdentifierPath","referencedDeclaration":4132,"src":"4491:3:27"},"referencedDeclaration":4132,"src":"4491:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4132_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set"}},"visibility":"internal"}],"src":"4490:17:27"},"returnParameters":{"id":4285,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4284,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4291,"src":"4530:7:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4283,"name":"uint256","nodeType":"ElementaryTypeName","src":"4530:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4529:9:27"},"scope":4734,"src":"4474:107:27","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":4307,"nodeType":"Block","src":"4999:42:27","statements":[{"expression":{"baseExpression":{"expression":{"id":4302,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4295,"src":"5016:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4132_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set storage pointer"}},"id":4303,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5020:7:27","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":4127,"src":"5016:11:27","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":4305,"indexExpression":{"id":4304,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4297,"src":"5028:5:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5016:18:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":4301,"id":4306,"nodeType":"Return","src":"5009:25:27"}]},"documentation":{"id":4292,"nodeType":"StructuredDocumentation","src":"4587:331:27","text":" @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."},"id":4308,"implemented":true,"kind":"function","modifiers":[],"name":"_at","nameLocation":"4932:3:27","nodeType":"FunctionDefinition","parameters":{"id":4298,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4295,"mutability":"mutable","name":"set","nameLocation":"4948:3:27","nodeType":"VariableDeclaration","scope":4308,"src":"4936:15:27","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4132_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set"},"typeName":{"id":4294,"nodeType":"UserDefinedTypeName","pathNode":{"id":4293,"name":"Set","nameLocations":["4936:3:27"],"nodeType":"IdentifierPath","referencedDeclaration":4132,"src":"4936:3:27"},"referencedDeclaration":4132,"src":"4936:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4132_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set"}},"visibility":"internal"},{"constant":false,"id":4297,"mutability":"mutable","name":"index","nameLocation":"4961:5:27","nodeType":"VariableDeclaration","scope":4308,"src":"4953:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4296,"name":"uint256","nodeType":"ElementaryTypeName","src":"4953:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4935:32:27"},"returnParameters":{"id":4301,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4300,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4308,"src":"4990:7:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4299,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4990:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4989:9:27"},"scope":4734,"src":"4923:118:27","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":4321,"nodeType":"Block","src":"5655:35:27","statements":[{"expression":{"expression":{"id":4318,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4312,"src":"5672:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4132_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set storage pointer"}},"id":4319,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5676:7:27","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":4127,"src":"5672:11:27","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"functionReturnParameters":4317,"id":4320,"nodeType":"Return","src":"5665:18:27"}]},"documentation":{"id":4309,"nodeType":"StructuredDocumentation","src":"5047:529:27","text":" @dev Return the entire set in an array\n WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n this function has an unbounded cost, and using it as part of a state-changing function may render the function\n uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block."},"id":4322,"implemented":true,"kind":"function","modifiers":[],"name":"_values","nameLocation":"5590:7:27","nodeType":"FunctionDefinition","parameters":{"id":4313,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4312,"mutability":"mutable","name":"set","nameLocation":"5610:3:27","nodeType":"VariableDeclaration","scope":4322,"src":"5598:15:27","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4132_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set"},"typeName":{"id":4311,"nodeType":"UserDefinedTypeName","pathNode":{"id":4310,"name":"Set","nameLocations":["5598:3:27"],"nodeType":"IdentifierPath","referencedDeclaration":4132,"src":"5598:3:27"},"referencedDeclaration":4132,"src":"5598:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4132_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set"}},"visibility":"internal"}],"src":"5597:17:27"},"returnParameters":{"id":4317,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4316,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4322,"src":"5637:16:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":4314,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5637:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4315,"nodeType":"ArrayTypeName","src":"5637:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"5636:18:27"},"scope":4734,"src":"5581:109:27","stateMutability":"view","virtual":false,"visibility":"private"},{"canonicalName":"EnumerableSetUpgradeable.Bytes32Set","id":4326,"members":[{"constant":false,"id":4325,"mutability":"mutable","name":"_inner","nameLocation":"5747:6:27","nodeType":"VariableDeclaration","scope":4326,"src":"5743:10:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4132_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set"},"typeName":{"id":4324,"nodeType":"UserDefinedTypeName","pathNode":{"id":4323,"name":"Set","nameLocations":["5743:3:27"],"nodeType":"IdentifierPath","referencedDeclaration":4132,"src":"5743:3:27"},"referencedDeclaration":4132,"src":"5743:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4132_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set"}},"visibility":"internal"}],"name":"Bytes32Set","nameLocation":"5722:10:27","nodeType":"StructDefinition","scope":4734,"src":"5715:45:27","visibility":"public"},{"body":{"id":4343,"nodeType":"Block","src":"6006:47:27","statements":[{"expression":{"arguments":[{"expression":{"id":4338,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4330,"src":"6028:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4326_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Bytes32Set storage pointer"}},"id":4339,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6032:6:27","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4325,"src":"6028:10:27","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4132_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"}},{"id":4340,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4332,"src":"6040:5:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$4132_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4337,"name":"_add","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4174,"src":"6023:4:27","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$4132_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSetUpgradeable.Set storage pointer,bytes32) returns (bool)"}},"id":4341,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6023:23:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4336,"id":4342,"nodeType":"Return","src":"6016:30:27"}]},"documentation":{"id":4327,"nodeType":"StructuredDocumentation","src":"5766:159:27","text":" @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."},"id":4344,"implemented":true,"kind":"function","modifiers":[],"name":"add","nameLocation":"5939:3:27","nodeType":"FunctionDefinition","parameters":{"id":4333,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4330,"mutability":"mutable","name":"set","nameLocation":"5962:3:27","nodeType":"VariableDeclaration","scope":4344,"src":"5943:22:27","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4326_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Bytes32Set"},"typeName":{"id":4329,"nodeType":"UserDefinedTypeName","pathNode":{"id":4328,"name":"Bytes32Set","nameLocations":["5943:10:27"],"nodeType":"IdentifierPath","referencedDeclaration":4326,"src":"5943:10:27"},"referencedDeclaration":4326,"src":"5943:10:27","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4326_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Bytes32Set"}},"visibility":"internal"},{"constant":false,"id":4332,"mutability":"mutable","name":"value","nameLocation":"5975:5:27","nodeType":"VariableDeclaration","scope":4344,"src":"5967:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4331,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5967:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5942:39:27"},"returnParameters":{"id":4336,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4335,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4344,"src":"6000:4:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4334,"name":"bool","nodeType":"ElementaryTypeName","src":"6000:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5999:6:27"},"scope":4734,"src":"5930:123:27","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4361,"nodeType":"Block","src":"6300:50:27","statements":[{"expression":{"arguments":[{"expression":{"id":4356,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4348,"src":"6325:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4326_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Bytes32Set storage pointer"}},"id":4357,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6329:6:27","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4325,"src":"6325:10:27","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4132_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"}},{"id":4358,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4350,"src":"6337:5:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$4132_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4355,"name":"_remove","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4258,"src":"6317:7:27","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$4132_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSetUpgradeable.Set storage pointer,bytes32) returns (bool)"}},"id":4359,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6317:26:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4354,"id":4360,"nodeType":"Return","src":"6310:33:27"}]},"documentation":{"id":4345,"nodeType":"StructuredDocumentation","src":"6059:157:27","text":" @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."},"id":4362,"implemented":true,"kind":"function","modifiers":[],"name":"remove","nameLocation":"6230:6:27","nodeType":"FunctionDefinition","parameters":{"id":4351,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4348,"mutability":"mutable","name":"set","nameLocation":"6256:3:27","nodeType":"VariableDeclaration","scope":4362,"src":"6237:22:27","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4326_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Bytes32Set"},"typeName":{"id":4347,"nodeType":"UserDefinedTypeName","pathNode":{"id":4346,"name":"Bytes32Set","nameLocations":["6237:10:27"],"nodeType":"IdentifierPath","referencedDeclaration":4326,"src":"6237:10:27"},"referencedDeclaration":4326,"src":"6237:10:27","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4326_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Bytes32Set"}},"visibility":"internal"},{"constant":false,"id":4350,"mutability":"mutable","name":"value","nameLocation":"6269:5:27","nodeType":"VariableDeclaration","scope":4362,"src":"6261:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4349,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6261:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6236:39:27"},"returnParameters":{"id":4354,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4353,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4362,"src":"6294:4:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4352,"name":"bool","nodeType":"ElementaryTypeName","src":"6294:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6293:6:27"},"scope":4734,"src":"6221:129:27","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4379,"nodeType":"Block","src":"6517:52:27","statements":[{"expression":{"arguments":[{"expression":{"id":4374,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4366,"src":"6544:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4326_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Bytes32Set storage pointer"}},"id":4375,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6548:6:27","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4325,"src":"6544:10:27","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4132_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"}},{"id":4376,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4368,"src":"6556:5:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$4132_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4373,"name":"_contains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4277,"src":"6534:9:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$4132_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSetUpgradeable.Set storage pointer,bytes32) view returns (bool)"}},"id":4377,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6534:28:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4372,"id":4378,"nodeType":"Return","src":"6527:35:27"}]},"documentation":{"id":4363,"nodeType":"StructuredDocumentation","src":"6356:70:27","text":" @dev Returns true if the value is in the set. O(1)."},"id":4380,"implemented":true,"kind":"function","modifiers":[],"name":"contains","nameLocation":"6440:8:27","nodeType":"FunctionDefinition","parameters":{"id":4369,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4366,"mutability":"mutable","name":"set","nameLocation":"6468:3:27","nodeType":"VariableDeclaration","scope":4380,"src":"6449:22:27","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4326_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Bytes32Set"},"typeName":{"id":4365,"nodeType":"UserDefinedTypeName","pathNode":{"id":4364,"name":"Bytes32Set","nameLocations":["6449:10:27"],"nodeType":"IdentifierPath","referencedDeclaration":4326,"src":"6449:10:27"},"referencedDeclaration":4326,"src":"6449:10:27","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4326_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Bytes32Set"}},"visibility":"internal"},{"constant":false,"id":4368,"mutability":"mutable","name":"value","nameLocation":"6481:5:27","nodeType":"VariableDeclaration","scope":4380,"src":"6473:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4367,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6473:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6448:39:27"},"returnParameters":{"id":4372,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4371,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4380,"src":"6511:4:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4370,"name":"bool","nodeType":"ElementaryTypeName","src":"6511:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6510:6:27"},"scope":4734,"src":"6431:138:27","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4394,"nodeType":"Block","src":"6722:43:27","statements":[{"expression":{"arguments":[{"expression":{"id":4390,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4384,"src":"6747:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4326_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Bytes32Set storage pointer"}},"id":4391,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6751:6:27","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4325,"src":"6747:10:27","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4132_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$4132_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"}],"id":4389,"name":"_length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4291,"src":"6739:7:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$4132_storage_ptr_$returns$_t_uint256_$","typeString":"function (struct EnumerableSetUpgradeable.Set storage pointer) view returns (uint256)"}},"id":4392,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6739:19:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4388,"id":4393,"nodeType":"Return","src":"6732:26:27"}]},"documentation":{"id":4381,"nodeType":"StructuredDocumentation","src":"6575:70:27","text":" @dev Returns the number of values in the set. O(1)."},"id":4395,"implemented":true,"kind":"function","modifiers":[],"name":"length","nameLocation":"6659:6:27","nodeType":"FunctionDefinition","parameters":{"id":4385,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4384,"mutability":"mutable","name":"set","nameLocation":"6685:3:27","nodeType":"VariableDeclaration","scope":4395,"src":"6666:22:27","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4326_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Bytes32Set"},"typeName":{"id":4383,"nodeType":"UserDefinedTypeName","pathNode":{"id":4382,"name":"Bytes32Set","nameLocations":["6666:10:27"],"nodeType":"IdentifierPath","referencedDeclaration":4326,"src":"6666:10:27"},"referencedDeclaration":4326,"src":"6666:10:27","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4326_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Bytes32Set"}},"visibility":"internal"}],"src":"6665:24:27"},"returnParameters":{"id":4388,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4387,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4395,"src":"6713:7:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4386,"name":"uint256","nodeType":"ElementaryTypeName","src":"6713:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6712:9:27"},"scope":4734,"src":"6650:115:27","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4412,"nodeType":"Block","src":"7190:46:27","statements":[{"expression":{"arguments":[{"expression":{"id":4407,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4399,"src":"7211:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4326_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Bytes32Set storage pointer"}},"id":4408,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7215:6:27","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4325,"src":"7211:10:27","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4132_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"}},{"id":4409,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4401,"src":"7223:5:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$4132_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4406,"name":"_at","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4308,"src":"7207:3:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$4132_storage_ptr_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (struct EnumerableSetUpgradeable.Set storage pointer,uint256) view returns (bytes32)"}},"id":4410,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7207:22:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":4405,"id":4411,"nodeType":"Return","src":"7200:29:27"}]},"documentation":{"id":4396,"nodeType":"StructuredDocumentation","src":"6771:331:27","text":" @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."},"id":4413,"implemented":true,"kind":"function","modifiers":[],"name":"at","nameLocation":"7116:2:27","nodeType":"FunctionDefinition","parameters":{"id":4402,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4399,"mutability":"mutable","name":"set","nameLocation":"7138:3:27","nodeType":"VariableDeclaration","scope":4413,"src":"7119:22:27","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4326_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Bytes32Set"},"typeName":{"id":4398,"nodeType":"UserDefinedTypeName","pathNode":{"id":4397,"name":"Bytes32Set","nameLocations":["7119:10:27"],"nodeType":"IdentifierPath","referencedDeclaration":4326,"src":"7119:10:27"},"referencedDeclaration":4326,"src":"7119:10:27","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4326_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Bytes32Set"}},"visibility":"internal"},{"constant":false,"id":4401,"mutability":"mutable","name":"index","nameLocation":"7151:5:27","nodeType":"VariableDeclaration","scope":4413,"src":"7143:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4400,"name":"uint256","nodeType":"ElementaryTypeName","src":"7143:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7118:39:27"},"returnParameters":{"id":4405,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4404,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4413,"src":"7181:7:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4403,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7181:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7180:9:27"},"scope":4734,"src":"7107:129:27","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4442,"nodeType":"Block","src":"7857:219:27","statements":[{"assignments":[4427],"declarations":[{"constant":false,"id":4427,"mutability":"mutable","name":"store","nameLocation":"7884:5:27","nodeType":"VariableDeclaration","scope":4442,"src":"7867:22:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":4425,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7867:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4426,"nodeType":"ArrayTypeName","src":"7867:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":4432,"initialValue":{"arguments":[{"expression":{"id":4429,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4417,"src":"7900:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4326_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Bytes32Set storage pointer"}},"id":4430,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7904:6:27","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4325,"src":"7900:10:27","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4132_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$4132_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"}],"id":4428,"name":"_values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4322,"src":"7892:7:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$4132_storage_ptr_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (struct EnumerableSetUpgradeable.Set storage pointer) view returns (bytes32[] memory)"}},"id":4431,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7892:19:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"7867:44:27"},{"assignments":[4437],"declarations":[{"constant":false,"id":4437,"mutability":"mutable","name":"result","nameLocation":"7938:6:27","nodeType":"VariableDeclaration","scope":4442,"src":"7921:23:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":4435,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7921:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4436,"nodeType":"ArrayTypeName","src":"7921:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":4438,"nodeType":"VariableDeclarationStatement","src":"7921:23:27"},{"AST":{"nodeType":"YulBlock","src":"8007:39:27","statements":[{"nodeType":"YulAssignment","src":"8021:15:27","value":{"name":"store","nodeType":"YulIdentifier","src":"8031:5:27"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"8021:6:27"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":4437,"isOffset":false,"isSlot":false,"src":"8021:6:27","valueSize":1},{"declaration":4427,"isOffset":false,"isSlot":false,"src":"8031:5:27","valueSize":1}],"id":4439,"nodeType":"InlineAssembly","src":"7998:48:27"},{"expression":{"id":4440,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4437,"src":"8063:6:27","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"functionReturnParameters":4422,"id":4441,"nodeType":"Return","src":"8056:13:27"}]},"documentation":{"id":4414,"nodeType":"StructuredDocumentation","src":"7242:529:27","text":" @dev Return the entire set in an array\n WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n this function has an unbounded cost, and using it as part of a state-changing function may render the function\n uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block."},"id":4443,"implemented":true,"kind":"function","modifiers":[],"name":"values","nameLocation":"7785:6:27","nodeType":"FunctionDefinition","parameters":{"id":4418,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4417,"mutability":"mutable","name":"set","nameLocation":"7811:3:27","nodeType":"VariableDeclaration","scope":4443,"src":"7792:22:27","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4326_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Bytes32Set"},"typeName":{"id":4416,"nodeType":"UserDefinedTypeName","pathNode":{"id":4415,"name":"Bytes32Set","nameLocations":["7792:10:27"],"nodeType":"IdentifierPath","referencedDeclaration":4326,"src":"7792:10:27"},"referencedDeclaration":4326,"src":"7792:10:27","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$4326_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Bytes32Set"}},"visibility":"internal"}],"src":"7791:24:27"},"returnParameters":{"id":4422,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4421,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4443,"src":"7839:16:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":4419,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7839:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4420,"nodeType":"ArrayTypeName","src":"7839:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"7838:18:27"},"scope":4734,"src":"7776:300:27","stateMutability":"view","virtual":false,"visibility":"internal"},{"canonicalName":"EnumerableSetUpgradeable.AddressSet","id":4447,"members":[{"constant":false,"id":4446,"mutability":"mutable","name":"_inner","nameLocation":"8133:6:27","nodeType":"VariableDeclaration","scope":4447,"src":"8129:10:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4132_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set"},"typeName":{"id":4445,"nodeType":"UserDefinedTypeName","pathNode":{"id":4444,"name":"Set","nameLocations":["8129:3:27"],"nodeType":"IdentifierPath","referencedDeclaration":4132,"src":"8129:3:27"},"referencedDeclaration":4132,"src":"8129:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4132_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set"}},"visibility":"internal"}],"name":"AddressSet","nameLocation":"8108:10:27","nodeType":"StructDefinition","scope":4734,"src":"8101:45:27","visibility":"public"},{"body":{"id":4473,"nodeType":"Block","src":"8392:74:27","statements":[{"expression":{"arguments":[{"expression":{"id":4459,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4451,"src":"8414:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4447_storage_ptr","typeString":"struct EnumerableSetUpgradeable.AddressSet storage pointer"}},"id":4460,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8418:6:27","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4446,"src":"8414:10:27","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4132_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"}},{"arguments":[{"arguments":[{"arguments":[{"id":4467,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4453,"src":"8450:5:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4466,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8442:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":4465,"name":"uint160","nodeType":"ElementaryTypeName","src":"8442:7:27","typeDescriptions":{}}},"id":4468,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8442:14:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":4464,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8434:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4463,"name":"uint256","nodeType":"ElementaryTypeName","src":"8434:7:27","typeDescriptions":{}}},"id":4469,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8434:23:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4462,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8426:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":4461,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8426:7:27","typeDescriptions":{}}},"id":4470,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8426:32:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$4132_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4458,"name":"_add","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4174,"src":"8409:4:27","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$4132_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSetUpgradeable.Set storage pointer,bytes32) returns (bool)"}},"id":4471,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8409:50:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4457,"id":4472,"nodeType":"Return","src":"8402:57:27"}]},"documentation":{"id":4448,"nodeType":"StructuredDocumentation","src":"8152:159:27","text":" @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."},"id":4474,"implemented":true,"kind":"function","modifiers":[],"name":"add","nameLocation":"8325:3:27","nodeType":"FunctionDefinition","parameters":{"id":4454,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4451,"mutability":"mutable","name":"set","nameLocation":"8348:3:27","nodeType":"VariableDeclaration","scope":4474,"src":"8329:22:27","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4447_storage_ptr","typeString":"struct EnumerableSetUpgradeable.AddressSet"},"typeName":{"id":4450,"nodeType":"UserDefinedTypeName","pathNode":{"id":4449,"name":"AddressSet","nameLocations":["8329:10:27"],"nodeType":"IdentifierPath","referencedDeclaration":4447,"src":"8329:10:27"},"referencedDeclaration":4447,"src":"8329:10:27","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4447_storage_ptr","typeString":"struct EnumerableSetUpgradeable.AddressSet"}},"visibility":"internal"},{"constant":false,"id":4453,"mutability":"mutable","name":"value","nameLocation":"8361:5:27","nodeType":"VariableDeclaration","scope":4474,"src":"8353:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4452,"name":"address","nodeType":"ElementaryTypeName","src":"8353:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8328:39:27"},"returnParameters":{"id":4457,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4456,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4474,"src":"8386:4:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4455,"name":"bool","nodeType":"ElementaryTypeName","src":"8386:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8385:6:27"},"scope":4734,"src":"8316:150:27","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4500,"nodeType":"Block","src":"8713:77:27","statements":[{"expression":{"arguments":[{"expression":{"id":4486,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4478,"src":"8738:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4447_storage_ptr","typeString":"struct EnumerableSetUpgradeable.AddressSet storage pointer"}},"id":4487,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8742:6:27","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4446,"src":"8738:10:27","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4132_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"}},{"arguments":[{"arguments":[{"arguments":[{"id":4494,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4480,"src":"8774:5:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4493,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8766:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":4492,"name":"uint160","nodeType":"ElementaryTypeName","src":"8766:7:27","typeDescriptions":{}}},"id":4495,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8766:14:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":4491,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8758:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4490,"name":"uint256","nodeType":"ElementaryTypeName","src":"8758:7:27","typeDescriptions":{}}},"id":4496,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8758:23:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4489,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8750:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":4488,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8750:7:27","typeDescriptions":{}}},"id":4497,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8750:32:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$4132_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4485,"name":"_remove","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4258,"src":"8730:7:27","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$4132_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSetUpgradeable.Set storage pointer,bytes32) returns (bool)"}},"id":4498,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8730:53:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4484,"id":4499,"nodeType":"Return","src":"8723:60:27"}]},"documentation":{"id":4475,"nodeType":"StructuredDocumentation","src":"8472:157:27","text":" @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."},"id":4501,"implemented":true,"kind":"function","modifiers":[],"name":"remove","nameLocation":"8643:6:27","nodeType":"FunctionDefinition","parameters":{"id":4481,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4478,"mutability":"mutable","name":"set","nameLocation":"8669:3:27","nodeType":"VariableDeclaration","scope":4501,"src":"8650:22:27","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4447_storage_ptr","typeString":"struct EnumerableSetUpgradeable.AddressSet"},"typeName":{"id":4477,"nodeType":"UserDefinedTypeName","pathNode":{"id":4476,"name":"AddressSet","nameLocations":["8650:10:27"],"nodeType":"IdentifierPath","referencedDeclaration":4447,"src":"8650:10:27"},"referencedDeclaration":4447,"src":"8650:10:27","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4447_storage_ptr","typeString":"struct EnumerableSetUpgradeable.AddressSet"}},"visibility":"internal"},{"constant":false,"id":4480,"mutability":"mutable","name":"value","nameLocation":"8682:5:27","nodeType":"VariableDeclaration","scope":4501,"src":"8674:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4479,"name":"address","nodeType":"ElementaryTypeName","src":"8674:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8649:39:27"},"returnParameters":{"id":4484,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4483,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4501,"src":"8707:4:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4482,"name":"bool","nodeType":"ElementaryTypeName","src":"8707:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8706:6:27"},"scope":4734,"src":"8634:156:27","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4527,"nodeType":"Block","src":"8957:79:27","statements":[{"expression":{"arguments":[{"expression":{"id":4513,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4505,"src":"8984:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4447_storage_ptr","typeString":"struct EnumerableSetUpgradeable.AddressSet storage pointer"}},"id":4514,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8988:6:27","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4446,"src":"8984:10:27","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4132_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"}},{"arguments":[{"arguments":[{"arguments":[{"id":4521,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4507,"src":"9020:5:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4520,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9012:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":4519,"name":"uint160","nodeType":"ElementaryTypeName","src":"9012:7:27","typeDescriptions":{}}},"id":4522,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9012:14:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":4518,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9004:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4517,"name":"uint256","nodeType":"ElementaryTypeName","src":"9004:7:27","typeDescriptions":{}}},"id":4523,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9004:23:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4516,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8996:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":4515,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8996:7:27","typeDescriptions":{}}},"id":4524,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8996:32:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$4132_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4512,"name":"_contains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4277,"src":"8974:9:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$4132_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSetUpgradeable.Set storage pointer,bytes32) view returns (bool)"}},"id":4525,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8974:55:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4511,"id":4526,"nodeType":"Return","src":"8967:62:27"}]},"documentation":{"id":4502,"nodeType":"StructuredDocumentation","src":"8796:70:27","text":" @dev Returns true if the value is in the set. O(1)."},"id":4528,"implemented":true,"kind":"function","modifiers":[],"name":"contains","nameLocation":"8880:8:27","nodeType":"FunctionDefinition","parameters":{"id":4508,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4505,"mutability":"mutable","name":"set","nameLocation":"8908:3:27","nodeType":"VariableDeclaration","scope":4528,"src":"8889:22:27","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4447_storage_ptr","typeString":"struct EnumerableSetUpgradeable.AddressSet"},"typeName":{"id":4504,"nodeType":"UserDefinedTypeName","pathNode":{"id":4503,"name":"AddressSet","nameLocations":["8889:10:27"],"nodeType":"IdentifierPath","referencedDeclaration":4447,"src":"8889:10:27"},"referencedDeclaration":4447,"src":"8889:10:27","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4447_storage_ptr","typeString":"struct EnumerableSetUpgradeable.AddressSet"}},"visibility":"internal"},{"constant":false,"id":4507,"mutability":"mutable","name":"value","nameLocation":"8921:5:27","nodeType":"VariableDeclaration","scope":4528,"src":"8913:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4506,"name":"address","nodeType":"ElementaryTypeName","src":"8913:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8888:39:27"},"returnParameters":{"id":4511,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4510,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4528,"src":"8951:4:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4509,"name":"bool","nodeType":"ElementaryTypeName","src":"8951:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8950:6:27"},"scope":4734,"src":"8871:165:27","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4542,"nodeType":"Block","src":"9189:43:27","statements":[{"expression":{"arguments":[{"expression":{"id":4538,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4532,"src":"9214:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4447_storage_ptr","typeString":"struct EnumerableSetUpgradeable.AddressSet storage pointer"}},"id":4539,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9218:6:27","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4446,"src":"9214:10:27","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4132_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$4132_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"}],"id":4537,"name":"_length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4291,"src":"9206:7:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$4132_storage_ptr_$returns$_t_uint256_$","typeString":"function (struct EnumerableSetUpgradeable.Set storage pointer) view returns (uint256)"}},"id":4540,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9206:19:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4536,"id":4541,"nodeType":"Return","src":"9199:26:27"}]},"documentation":{"id":4529,"nodeType":"StructuredDocumentation","src":"9042:70:27","text":" @dev Returns the number of values in the set. O(1)."},"id":4543,"implemented":true,"kind":"function","modifiers":[],"name":"length","nameLocation":"9126:6:27","nodeType":"FunctionDefinition","parameters":{"id":4533,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4532,"mutability":"mutable","name":"set","nameLocation":"9152:3:27","nodeType":"VariableDeclaration","scope":4543,"src":"9133:22:27","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4447_storage_ptr","typeString":"struct EnumerableSetUpgradeable.AddressSet"},"typeName":{"id":4531,"nodeType":"UserDefinedTypeName","pathNode":{"id":4530,"name":"AddressSet","nameLocations":["9133:10:27"],"nodeType":"IdentifierPath","referencedDeclaration":4447,"src":"9133:10:27"},"referencedDeclaration":4447,"src":"9133:10:27","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4447_storage_ptr","typeString":"struct EnumerableSetUpgradeable.AddressSet"}},"visibility":"internal"}],"src":"9132:24:27"},"returnParameters":{"id":4536,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4535,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4543,"src":"9180:7:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4534,"name":"uint256","nodeType":"ElementaryTypeName","src":"9180:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9179:9:27"},"scope":4734,"src":"9117:115:27","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4569,"nodeType":"Block","src":"9657:73:27","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"expression":{"id":4561,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4547,"src":"9702:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4447_storage_ptr","typeString":"struct EnumerableSetUpgradeable.AddressSet storage pointer"}},"id":4562,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9706:6:27","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4446,"src":"9702:10:27","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4132_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"}},{"id":4563,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4549,"src":"9714:5:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$4132_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4560,"name":"_at","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4308,"src":"9698:3:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$4132_storage_ptr_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (struct EnumerableSetUpgradeable.Set storage pointer,uint256) view returns (bytes32)"}},"id":4564,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9698:22:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4559,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9690:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4558,"name":"uint256","nodeType":"ElementaryTypeName","src":"9690:7:27","typeDescriptions":{}}},"id":4565,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9690:31:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4557,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9682:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":4556,"name":"uint160","nodeType":"ElementaryTypeName","src":"9682:7:27","typeDescriptions":{}}},"id":4566,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9682:40:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":4555,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9674:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4554,"name":"address","nodeType":"ElementaryTypeName","src":"9674:7:27","typeDescriptions":{}}},"id":4567,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9674:49:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":4553,"id":4568,"nodeType":"Return","src":"9667:56:27"}]},"documentation":{"id":4544,"nodeType":"StructuredDocumentation","src":"9238:331:27","text":" @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."},"id":4570,"implemented":true,"kind":"function","modifiers":[],"name":"at","nameLocation":"9583:2:27","nodeType":"FunctionDefinition","parameters":{"id":4550,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4547,"mutability":"mutable","name":"set","nameLocation":"9605:3:27","nodeType":"VariableDeclaration","scope":4570,"src":"9586:22:27","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4447_storage_ptr","typeString":"struct EnumerableSetUpgradeable.AddressSet"},"typeName":{"id":4546,"nodeType":"UserDefinedTypeName","pathNode":{"id":4545,"name":"AddressSet","nameLocations":["9586:10:27"],"nodeType":"IdentifierPath","referencedDeclaration":4447,"src":"9586:10:27"},"referencedDeclaration":4447,"src":"9586:10:27","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4447_storage_ptr","typeString":"struct EnumerableSetUpgradeable.AddressSet"}},"visibility":"internal"},{"constant":false,"id":4549,"mutability":"mutable","name":"index","nameLocation":"9618:5:27","nodeType":"VariableDeclaration","scope":4570,"src":"9610:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4548,"name":"uint256","nodeType":"ElementaryTypeName","src":"9610:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9585:39:27"},"returnParameters":{"id":4553,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4552,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4570,"src":"9648:7:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4551,"name":"address","nodeType":"ElementaryTypeName","src":"9648:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"9647:9:27"},"scope":4734,"src":"9574:156:27","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4599,"nodeType":"Block","src":"10351:219:27","statements":[{"assignments":[4584],"declarations":[{"constant":false,"id":4584,"mutability":"mutable","name":"store","nameLocation":"10378:5:27","nodeType":"VariableDeclaration","scope":4599,"src":"10361:22:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":4582,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10361:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4583,"nodeType":"ArrayTypeName","src":"10361:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":4589,"initialValue":{"arguments":[{"expression":{"id":4586,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4574,"src":"10394:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4447_storage_ptr","typeString":"struct EnumerableSetUpgradeable.AddressSet storage pointer"}},"id":4587,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10398:6:27","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4446,"src":"10394:10:27","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4132_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$4132_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"}],"id":4585,"name":"_values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4322,"src":"10386:7:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$4132_storage_ptr_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (struct EnumerableSetUpgradeable.Set storage pointer) view returns (bytes32[] memory)"}},"id":4588,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10386:19:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"10361:44:27"},{"assignments":[4594],"declarations":[{"constant":false,"id":4594,"mutability":"mutable","name":"result","nameLocation":"10432:6:27","nodeType":"VariableDeclaration","scope":4599,"src":"10415:23:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":4592,"name":"address","nodeType":"ElementaryTypeName","src":"10415:7:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4593,"nodeType":"ArrayTypeName","src":"10415:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"id":4595,"nodeType":"VariableDeclarationStatement","src":"10415:23:27"},{"AST":{"nodeType":"YulBlock","src":"10501:39:27","statements":[{"nodeType":"YulAssignment","src":"10515:15:27","value":{"name":"store","nodeType":"YulIdentifier","src":"10525:5:27"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"10515:6:27"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":4594,"isOffset":false,"isSlot":false,"src":"10515:6:27","valueSize":1},{"declaration":4584,"isOffset":false,"isSlot":false,"src":"10525:5:27","valueSize":1}],"id":4596,"nodeType":"InlineAssembly","src":"10492:48:27"},{"expression":{"id":4597,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4594,"src":"10557:6:27","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"functionReturnParameters":4579,"id":4598,"nodeType":"Return","src":"10550:13:27"}]},"documentation":{"id":4571,"nodeType":"StructuredDocumentation","src":"9736:529:27","text":" @dev Return the entire set in an array\n WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n this function has an unbounded cost, and using it as part of a state-changing function may render the function\n uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block."},"id":4600,"implemented":true,"kind":"function","modifiers":[],"name":"values","nameLocation":"10279:6:27","nodeType":"FunctionDefinition","parameters":{"id":4575,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4574,"mutability":"mutable","name":"set","nameLocation":"10305:3:27","nodeType":"VariableDeclaration","scope":4600,"src":"10286:22:27","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4447_storage_ptr","typeString":"struct EnumerableSetUpgradeable.AddressSet"},"typeName":{"id":4573,"nodeType":"UserDefinedTypeName","pathNode":{"id":4572,"name":"AddressSet","nameLocations":["10286:10:27"],"nodeType":"IdentifierPath","referencedDeclaration":4447,"src":"10286:10:27"},"referencedDeclaration":4447,"src":"10286:10:27","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$4447_storage_ptr","typeString":"struct EnumerableSetUpgradeable.AddressSet"}},"visibility":"internal"}],"src":"10285:24:27"},"returnParameters":{"id":4579,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4578,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4600,"src":"10333:16:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":4576,"name":"address","nodeType":"ElementaryTypeName","src":"10333:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4577,"nodeType":"ArrayTypeName","src":"10333:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"10332:18:27"},"scope":4734,"src":"10270:300:27","stateMutability":"view","virtual":false,"visibility":"internal"},{"canonicalName":"EnumerableSetUpgradeable.UintSet","id":4604,"members":[{"constant":false,"id":4603,"mutability":"mutable","name":"_inner","nameLocation":"10621:6:27","nodeType":"VariableDeclaration","scope":4604,"src":"10617:10:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4132_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set"},"typeName":{"id":4602,"nodeType":"UserDefinedTypeName","pathNode":{"id":4601,"name":"Set","nameLocations":["10617:3:27"],"nodeType":"IdentifierPath","referencedDeclaration":4132,"src":"10617:3:27"},"referencedDeclaration":4132,"src":"10617:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4132_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set"}},"visibility":"internal"}],"name":"UintSet","nameLocation":"10599:7:27","nodeType":"StructDefinition","scope":4734,"src":"10592:42:27","visibility":"public"},{"body":{"id":4624,"nodeType":"Block","src":"10877:56:27","statements":[{"expression":{"arguments":[{"expression":{"id":4616,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4608,"src":"10899:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4604_storage_ptr","typeString":"struct EnumerableSetUpgradeable.UintSet storage pointer"}},"id":4617,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10903:6:27","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4603,"src":"10899:10:27","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4132_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"}},{"arguments":[{"id":4620,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4610,"src":"10919:5:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4619,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10911:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":4618,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10911:7:27","typeDescriptions":{}}},"id":4621,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10911:14:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$4132_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4615,"name":"_add","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4174,"src":"10894:4:27","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$4132_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSetUpgradeable.Set storage pointer,bytes32) returns (bool)"}},"id":4622,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10894:32:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4614,"id":4623,"nodeType":"Return","src":"10887:39:27"}]},"documentation":{"id":4605,"nodeType":"StructuredDocumentation","src":"10640:159:27","text":" @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."},"id":4625,"implemented":true,"kind":"function","modifiers":[],"name":"add","nameLocation":"10813:3:27","nodeType":"FunctionDefinition","parameters":{"id":4611,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4608,"mutability":"mutable","name":"set","nameLocation":"10833:3:27","nodeType":"VariableDeclaration","scope":4625,"src":"10817:19:27","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4604_storage_ptr","typeString":"struct EnumerableSetUpgradeable.UintSet"},"typeName":{"id":4607,"nodeType":"UserDefinedTypeName","pathNode":{"id":4606,"name":"UintSet","nameLocations":["10817:7:27"],"nodeType":"IdentifierPath","referencedDeclaration":4604,"src":"10817:7:27"},"referencedDeclaration":4604,"src":"10817:7:27","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4604_storage_ptr","typeString":"struct EnumerableSetUpgradeable.UintSet"}},"visibility":"internal"},{"constant":false,"id":4610,"mutability":"mutable","name":"value","nameLocation":"10846:5:27","nodeType":"VariableDeclaration","scope":4625,"src":"10838:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4609,"name":"uint256","nodeType":"ElementaryTypeName","src":"10838:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10816:36:27"},"returnParameters":{"id":4614,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4613,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4625,"src":"10871:4:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4612,"name":"bool","nodeType":"ElementaryTypeName","src":"10871:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"10870:6:27"},"scope":4734,"src":"10804:129:27","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4645,"nodeType":"Block","src":"11177:59:27","statements":[{"expression":{"arguments":[{"expression":{"id":4637,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4629,"src":"11202:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4604_storage_ptr","typeString":"struct EnumerableSetUpgradeable.UintSet storage pointer"}},"id":4638,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11206:6:27","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4603,"src":"11202:10:27","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4132_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"}},{"arguments":[{"id":4641,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4631,"src":"11222:5:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4640,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11214:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":4639,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11214:7:27","typeDescriptions":{}}},"id":4642,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11214:14:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$4132_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4636,"name":"_remove","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4258,"src":"11194:7:27","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$4132_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSetUpgradeable.Set storage pointer,bytes32) returns (bool)"}},"id":4643,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11194:35:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4635,"id":4644,"nodeType":"Return","src":"11187:42:27"}]},"documentation":{"id":4626,"nodeType":"StructuredDocumentation","src":"10939:157:27","text":" @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."},"id":4646,"implemented":true,"kind":"function","modifiers":[],"name":"remove","nameLocation":"11110:6:27","nodeType":"FunctionDefinition","parameters":{"id":4632,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4629,"mutability":"mutable","name":"set","nameLocation":"11133:3:27","nodeType":"VariableDeclaration","scope":4646,"src":"11117:19:27","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4604_storage_ptr","typeString":"struct EnumerableSetUpgradeable.UintSet"},"typeName":{"id":4628,"nodeType":"UserDefinedTypeName","pathNode":{"id":4627,"name":"UintSet","nameLocations":["11117:7:27"],"nodeType":"IdentifierPath","referencedDeclaration":4604,"src":"11117:7:27"},"referencedDeclaration":4604,"src":"11117:7:27","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4604_storage_ptr","typeString":"struct EnumerableSetUpgradeable.UintSet"}},"visibility":"internal"},{"constant":false,"id":4631,"mutability":"mutable","name":"value","nameLocation":"11146:5:27","nodeType":"VariableDeclaration","scope":4646,"src":"11138:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4630,"name":"uint256","nodeType":"ElementaryTypeName","src":"11138:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11116:36:27"},"returnParameters":{"id":4635,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4634,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4646,"src":"11171:4:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4633,"name":"bool","nodeType":"ElementaryTypeName","src":"11171:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"11170:6:27"},"scope":4734,"src":"11101:135:27","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4666,"nodeType":"Block","src":"11400:61:27","statements":[{"expression":{"arguments":[{"expression":{"id":4658,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4650,"src":"11427:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4604_storage_ptr","typeString":"struct EnumerableSetUpgradeable.UintSet storage pointer"}},"id":4659,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11431:6:27","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4603,"src":"11427:10:27","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4132_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"}},{"arguments":[{"id":4662,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4652,"src":"11447:5:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4661,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11439:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":4660,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11439:7:27","typeDescriptions":{}}},"id":4663,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11439:14:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$4132_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4657,"name":"_contains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4277,"src":"11417:9:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$4132_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSetUpgradeable.Set storage pointer,bytes32) view returns (bool)"}},"id":4664,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11417:37:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4656,"id":4665,"nodeType":"Return","src":"11410:44:27"}]},"documentation":{"id":4647,"nodeType":"StructuredDocumentation","src":"11242:70:27","text":" @dev Returns true if the value is in the set. O(1)."},"id":4667,"implemented":true,"kind":"function","modifiers":[],"name":"contains","nameLocation":"11326:8:27","nodeType":"FunctionDefinition","parameters":{"id":4653,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4650,"mutability":"mutable","name":"set","nameLocation":"11351:3:27","nodeType":"VariableDeclaration","scope":4667,"src":"11335:19:27","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4604_storage_ptr","typeString":"struct EnumerableSetUpgradeable.UintSet"},"typeName":{"id":4649,"nodeType":"UserDefinedTypeName","pathNode":{"id":4648,"name":"UintSet","nameLocations":["11335:7:27"],"nodeType":"IdentifierPath","referencedDeclaration":4604,"src":"11335:7:27"},"referencedDeclaration":4604,"src":"11335:7:27","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4604_storage_ptr","typeString":"struct EnumerableSetUpgradeable.UintSet"}},"visibility":"internal"},{"constant":false,"id":4652,"mutability":"mutable","name":"value","nameLocation":"11364:5:27","nodeType":"VariableDeclaration","scope":4667,"src":"11356:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4651,"name":"uint256","nodeType":"ElementaryTypeName","src":"11356:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11334:36:27"},"returnParameters":{"id":4656,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4655,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4667,"src":"11394:4:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4654,"name":"bool","nodeType":"ElementaryTypeName","src":"11394:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"11393:6:27"},"scope":4734,"src":"11317:144:27","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4681,"nodeType":"Block","src":"11611:43:27","statements":[{"expression":{"arguments":[{"expression":{"id":4677,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4671,"src":"11636:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4604_storage_ptr","typeString":"struct EnumerableSetUpgradeable.UintSet storage pointer"}},"id":4678,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11640:6:27","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4603,"src":"11636:10:27","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4132_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$4132_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"}],"id":4676,"name":"_length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4291,"src":"11628:7:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$4132_storage_ptr_$returns$_t_uint256_$","typeString":"function (struct EnumerableSetUpgradeable.Set storage pointer) view returns (uint256)"}},"id":4679,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11628:19:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4675,"id":4680,"nodeType":"Return","src":"11621:26:27"}]},"documentation":{"id":4668,"nodeType":"StructuredDocumentation","src":"11467:70:27","text":" @dev Returns the number of values in the set. O(1)."},"id":4682,"implemented":true,"kind":"function","modifiers":[],"name":"length","nameLocation":"11551:6:27","nodeType":"FunctionDefinition","parameters":{"id":4672,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4671,"mutability":"mutable","name":"set","nameLocation":"11574:3:27","nodeType":"VariableDeclaration","scope":4682,"src":"11558:19:27","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4604_storage_ptr","typeString":"struct EnumerableSetUpgradeable.UintSet"},"typeName":{"id":4670,"nodeType":"UserDefinedTypeName","pathNode":{"id":4669,"name":"UintSet","nameLocations":["11558:7:27"],"nodeType":"IdentifierPath","referencedDeclaration":4604,"src":"11558:7:27"},"referencedDeclaration":4604,"src":"11558:7:27","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4604_storage_ptr","typeString":"struct EnumerableSetUpgradeable.UintSet"}},"visibility":"internal"}],"src":"11557:21:27"},"returnParameters":{"id":4675,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4674,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4682,"src":"11602:7:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4673,"name":"uint256","nodeType":"ElementaryTypeName","src":"11602:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11601:9:27"},"scope":4734,"src":"11542:112:27","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4702,"nodeType":"Block","src":"12076:55:27","statements":[{"expression":{"arguments":[{"arguments":[{"expression":{"id":4696,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4686,"src":"12105:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4604_storage_ptr","typeString":"struct EnumerableSetUpgradeable.UintSet storage pointer"}},"id":4697,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12109:6:27","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4603,"src":"12105:10:27","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4132_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"}},{"id":4698,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4688,"src":"12117:5:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$4132_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4695,"name":"_at","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4308,"src":"12101:3:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$4132_storage_ptr_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (struct EnumerableSetUpgradeable.Set storage pointer,uint256) view returns (bytes32)"}},"id":4699,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12101:22:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4694,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12093:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4693,"name":"uint256","nodeType":"ElementaryTypeName","src":"12093:7:27","typeDescriptions":{}}},"id":4700,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12093:31:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4692,"id":4701,"nodeType":"Return","src":"12086:38:27"}]},"documentation":{"id":4683,"nodeType":"StructuredDocumentation","src":"11660:331:27","text":" @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."},"id":4703,"implemented":true,"kind":"function","modifiers":[],"name":"at","nameLocation":"12005:2:27","nodeType":"FunctionDefinition","parameters":{"id":4689,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4686,"mutability":"mutable","name":"set","nameLocation":"12024:3:27","nodeType":"VariableDeclaration","scope":4703,"src":"12008:19:27","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4604_storage_ptr","typeString":"struct EnumerableSetUpgradeable.UintSet"},"typeName":{"id":4685,"nodeType":"UserDefinedTypeName","pathNode":{"id":4684,"name":"UintSet","nameLocations":["12008:7:27"],"nodeType":"IdentifierPath","referencedDeclaration":4604,"src":"12008:7:27"},"referencedDeclaration":4604,"src":"12008:7:27","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4604_storage_ptr","typeString":"struct EnumerableSetUpgradeable.UintSet"}},"visibility":"internal"},{"constant":false,"id":4688,"mutability":"mutable","name":"index","nameLocation":"12037:5:27","nodeType":"VariableDeclaration","scope":4703,"src":"12029:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4687,"name":"uint256","nodeType":"ElementaryTypeName","src":"12029:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12007:36:27"},"returnParameters":{"id":4692,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4691,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4703,"src":"12067:7:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4690,"name":"uint256","nodeType":"ElementaryTypeName","src":"12067:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12066:9:27"},"scope":4734,"src":"11996:135:27","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4732,"nodeType":"Block","src":"12749:219:27","statements":[{"assignments":[4717],"declarations":[{"constant":false,"id":4717,"mutability":"mutable","name":"store","nameLocation":"12776:5:27","nodeType":"VariableDeclaration","scope":4732,"src":"12759:22:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":4715,"name":"bytes32","nodeType":"ElementaryTypeName","src":"12759:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4716,"nodeType":"ArrayTypeName","src":"12759:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":4722,"initialValue":{"arguments":[{"expression":{"id":4719,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4707,"src":"12792:3:27","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4604_storage_ptr","typeString":"struct EnumerableSetUpgradeable.UintSet storage pointer"}},"id":4720,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12796:6:27","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":4603,"src":"12792:10:27","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$4132_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$4132_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"}],"id":4718,"name":"_values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4322,"src":"12784:7:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$4132_storage_ptr_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (struct EnumerableSetUpgradeable.Set storage pointer) view returns (bytes32[] memory)"}},"id":4721,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12784:19:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"12759:44:27"},{"assignments":[4727],"declarations":[{"constant":false,"id":4727,"mutability":"mutable","name":"result","nameLocation":"12830:6:27","nodeType":"VariableDeclaration","scope":4732,"src":"12813:23:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":4725,"name":"uint256","nodeType":"ElementaryTypeName","src":"12813:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4726,"nodeType":"ArrayTypeName","src":"12813:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":4728,"nodeType":"VariableDeclarationStatement","src":"12813:23:27"},{"AST":{"nodeType":"YulBlock","src":"12899:39:27","statements":[{"nodeType":"YulAssignment","src":"12913:15:27","value":{"name":"store","nodeType":"YulIdentifier","src":"12923:5:27"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"12913:6:27"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":4727,"isOffset":false,"isSlot":false,"src":"12913:6:27","valueSize":1},{"declaration":4717,"isOffset":false,"isSlot":false,"src":"12923:5:27","valueSize":1}],"id":4729,"nodeType":"InlineAssembly","src":"12890:48:27"},{"expression":{"id":4730,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4727,"src":"12955:6:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"functionReturnParameters":4712,"id":4731,"nodeType":"Return","src":"12948:13:27"}]},"documentation":{"id":4704,"nodeType":"StructuredDocumentation","src":"12137:529:27","text":" @dev Return the entire set in an array\n WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n this function has an unbounded cost, and using it as part of a state-changing function may render the function\n uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block."},"id":4733,"implemented":true,"kind":"function","modifiers":[],"name":"values","nameLocation":"12680:6:27","nodeType":"FunctionDefinition","parameters":{"id":4708,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4707,"mutability":"mutable","name":"set","nameLocation":"12703:3:27","nodeType":"VariableDeclaration","scope":4733,"src":"12687:19:27","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4604_storage_ptr","typeString":"struct EnumerableSetUpgradeable.UintSet"},"typeName":{"id":4706,"nodeType":"UserDefinedTypeName","pathNode":{"id":4705,"name":"UintSet","nameLocations":["12687:7:27"],"nodeType":"IdentifierPath","referencedDeclaration":4604,"src":"12687:7:27"},"referencedDeclaration":4604,"src":"12687:7:27","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$4604_storage_ptr","typeString":"struct EnumerableSetUpgradeable.UintSet"}},"visibility":"internal"}],"src":"12686:21:27"},"returnParameters":{"id":4712,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4711,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4733,"src":"12731:16:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":4709,"name":"uint256","nodeType":"ElementaryTypeName","src":"12731:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4710,"nodeType":"ArrayTypeName","src":"12731:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"12730:18:27"},"scope":4734,"src":"12671:297:27","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":4735,"src":"1329:11641:27","usedErrors":[]}],"src":"205:12766:27"},"id":27},"contracts/CrossSyncGateway.sol":{"ast":{"absolutePath":"contracts/CrossSyncGateway.sol","exportedSymbols":{"AccessControlEnumerableUpgradeable":[144],"AccessControlUpgradeable":[480],"AddressUpgradeable":[2063],"ContextUpgradeable":[2105],"CrossSyncGateway":[6068],"ECDSAUpgradeable":[2810],"EIP712Upgradeable":[3094],"ERC165Upgradeable":[3138],"ERC1967UpgradeUpgradeable":[1090],"ERC2771Recipient":[6171],"EnumerableSetUpgradeable":[4734],"IAccessControlEnumerableUpgradeable":[505],"IAccessControlUpgradeable":[578],"IBeaconUpgradeable":[1100],"ICrossSyncGateway":[6240],"ICrossSyncReceiver":[6249],"ICrossSyncReceiverImplementer":[6262],"IERC165Upgradeable":[3150],"IERC1822ProxiableUpgradeable":[766],"IERC1967Upgradeable":[731],"IERC20PermitUpgradeable":[1730],"IERC20Upgradeable":[1694],"IERC2771Recipient":[6200],"IERC5267Upgradeable":[756],"IMessagingImpl":[6325],"IWETH9":[4774],"Initializable":[1269],"MathUpgradeable":[4016],"OwnableUpgradeable":[710],"PausableUpgradeable":[1532],"ReentrancyGuardUpgradeable":[1616],"SignedMathUpgradeable":[4121],"StorageSlotUpgradeable":[2215],"StringsUpgradeable":[2444],"UUPSUpgradeable":[1405]},"id":6069,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4736,"literals":["solidity","^","0.8",".15"],"nodeType":"PragmaDirective","src":"33:24:28"},{"id":4737,"literals":["abicoder","v2"],"nodeType":"PragmaDirective","src":"58:19:28"},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","id":4738,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6069,"sourceUnit":1270,"src":"80:75:28","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol","id":4739,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6069,"sourceUnit":711,"src":"157:75:28","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol","id":4740,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6069,"sourceUnit":145,"src":"233:91:28","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol","id":4741,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6069,"sourceUnit":1533,"src":"326:78:28","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol","id":4742,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6069,"sourceUnit":1617,"src":"405:85:28","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol","file":"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol","id":4743,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6069,"sourceUnit":1695,"src":"492:79:28","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol","id":4744,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6069,"sourceUnit":1734,"src":"572:102:28","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol","id":4745,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6069,"sourceUnit":2811,"src":"676:85:28","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol","file":"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol","id":4746,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6069,"sourceUnit":3095,"src":"762:86:28","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol","id":4747,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6069,"sourceUnit":1406,"src":"850:77:28","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/helpers/ERC2771Recipient.sol","file":"./helpers/ERC2771Recipient.sol","id":4748,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6069,"sourceUnit":6172,"src":"930:40:28","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/interfaces/ICrossSyncGateway.sol","file":"./interfaces/ICrossSyncGateway.sol","id":4749,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6069,"sourceUnit":6241,"src":"971:44:28","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/interfaces/IMessagingImpl.sol","file":"./interfaces/IMessagingImpl.sol","id":4750,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6069,"sourceUnit":6326,"src":"1017:41:28","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/interfaces/ICrossSyncReceiverImplementer.sol","file":"./interfaces/ICrossSyncReceiverImplementer.sol","id":4751,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6069,"sourceUnit":6263,"src":"1059:56:28","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"IWETH9","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":4774,"linearizedBaseContracts":[4774],"name":"IWETH9","nameLocation":"1129:6:28","nodeType":"ContractDefinition","nodes":[{"functionSelector":"d0e30db0","id":4754,"implemented":false,"kind":"function","modifiers":[],"name":"deposit","nameLocation":"1152:7:28","nodeType":"FunctionDefinition","parameters":{"id":4752,"nodeType":"ParameterList","parameters":[],"src":"1159:2:28"},"returnParameters":{"id":4753,"nodeType":"ParameterList","parameters":[],"src":"1179:0:28"},"scope":4774,"src":"1143:37:28","stateMutability":"payable","virtual":false,"visibility":"external"},{"functionSelector":"2e1a7d4d","id":4759,"implemented":false,"kind":"function","modifiers":[],"name":"withdraw","nameLocation":"1194:8:28","nodeType":"FunctionDefinition","parameters":{"id":4757,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4756,"mutability":"mutable","name":"wad","nameLocation":"1208:3:28","nodeType":"VariableDeclaration","scope":4759,"src":"1203:8:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4755,"name":"uint","nodeType":"ElementaryTypeName","src":"1203:4:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1202:10:28"},"returnParameters":{"id":4758,"nodeType":"ParameterList","parameters":[],"src":"1229:0:28"},"scope":4774,"src":"1185:45:28","stateMutability":"payable","virtual":false,"visibility":"external"},{"functionSelector":"18160ddd","id":4764,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"1244:11:28","nodeType":"FunctionDefinition","parameters":{"id":4760,"nodeType":"ParameterList","parameters":[],"src":"1255:2:28"},"returnParameters":{"id":4763,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4762,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4764,"src":"1276:4:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4761,"name":"uint","nodeType":"ElementaryTypeName","src":"1276:4:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1275:6:28"},"scope":4774,"src":"1235:47:28","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"095ea7b3","id":4773,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"1298:7:28","nodeType":"FunctionDefinition","parameters":{"id":4769,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4766,"mutability":"mutable","name":"guy","nameLocation":"1314:3:28","nodeType":"VariableDeclaration","scope":4773,"src":"1306:11:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4765,"name":"address","nodeType":"ElementaryTypeName","src":"1306:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4768,"mutability":"mutable","name":"wad","nameLocation":"1324:3:28","nodeType":"VariableDeclaration","scope":4773,"src":"1319:8:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4767,"name":"uint","nodeType":"ElementaryTypeName","src":"1319:4:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1305:23:28"},"returnParameters":{"id":4772,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4771,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4773,"src":"1347:4:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4770,"name":"bool","nodeType":"ElementaryTypeName","src":"1347:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1346:6:28"},"scope":4774,"src":"1289:64:28","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":6069,"src":"1119:237:28","usedErrors":[]},{"abstract":false,"baseContracts":[{"baseName":{"id":4775,"name":"ICrossSyncGateway","nameLocations":["1388:17:28"],"nodeType":"IdentifierPath","referencedDeclaration":6240,"src":"1388:17:28"},"id":4776,"nodeType":"InheritanceSpecifier","src":"1388:17:28"},{"baseName":{"id":4777,"name":"Initializable","nameLocations":["1407:13:28"],"nodeType":"IdentifierPath","referencedDeclaration":1269,"src":"1407:13:28"},"id":4778,"nodeType":"InheritanceSpecifier","src":"1407:13:28"},{"baseName":{"id":4779,"name":"OwnableUpgradeable","nameLocations":["1422:18:28"],"nodeType":"IdentifierPath","referencedDeclaration":710,"src":"1422:18:28"},"id":4780,"nodeType":"InheritanceSpecifier","src":"1422:18:28"},{"baseName":{"id":4781,"name":"ERC2771Recipient","nameLocations":["1442:16:28"],"nodeType":"IdentifierPath","referencedDeclaration":6171,"src":"1442:16:28"},"id":4782,"nodeType":"InheritanceSpecifier","src":"1442:16:28"},{"baseName":{"id":4783,"name":"PausableUpgradeable","nameLocations":["1460:19:28"],"nodeType":"IdentifierPath","referencedDeclaration":1532,"src":"1460:19:28"},"id":4784,"nodeType":"InheritanceSpecifier","src":"1460:19:28"},{"baseName":{"id":4785,"name":"AccessControlUpgradeable","nameLocations":["1481:24:28"],"nodeType":"IdentifierPath","referencedDeclaration":480,"src":"1481:24:28"},"id":4786,"nodeType":"InheritanceSpecifier","src":"1481:24:28"},{"baseName":{"id":4787,"name":"ReentrancyGuardUpgradeable","nameLocations":["1507:26:28"],"nodeType":"IdentifierPath","referencedDeclaration":1616,"src":"1507:26:28"},"id":4788,"nodeType":"InheritanceSpecifier","src":"1507:26:28"},{"baseName":{"id":4789,"name":"EIP712Upgradeable","nameLocations":["1535:17:28"],"nodeType":"IdentifierPath","referencedDeclaration":3094,"src":"1535:17:28"},"id":4790,"nodeType":"InheritanceSpecifier","src":"1535:17:28"},{"baseName":{"id":4791,"name":"UUPSUpgradeable","nameLocations":["1554:15:28"],"nodeType":"IdentifierPath","referencedDeclaration":1405,"src":"1554:15:28"},"id":4792,"nodeType":"InheritanceSpecifier","src":"1554:15:28"}],"canonicalName":"CrossSyncGateway","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":6068,"linearizedBaseContracts":[6068,1405,1090,731,766,3094,756,1616,480,3138,3150,578,1532,6171,6200,710,2105,1269,6240,6249],"name":"CrossSyncGateway","nameLocation":"1368:16:28","nodeType":"ContractDefinition","nodes":[{"constant":true,"functionSelector":"4460bdd6","id":4797,"mutability":"constant","name":"SUPER_ADMIN_ROLE","nameLocation":"1601:16:28","nodeType":"VariableDeclaration","scope":6068,"src":"1577:72:28","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4793,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1577:7:28","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"53555045525f41444d494e5f524f4c45","id":4795,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1630:18:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_7613a25ecc738585a232ad50a301178f12b3ba8887d13e138b523c4269c47689","typeString":"literal_string \"SUPER_ADMIN_ROLE\""},"value":"SUPER_ADMIN_ROLE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_7613a25ecc738585a232ad50a301178f12b3ba8887d13e138b523c4269c47689","typeString":"literal_string \"SUPER_ADMIN_ROLE\""}],"id":4794,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1620:9:28","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4796,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1620:29:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":true,"functionSelector":"75b238fc","id":4802,"mutability":"constant","name":"ADMIN_ROLE","nameLocation":"1679:10:28","nodeType":"VariableDeclaration","scope":6068,"src":"1655:60:28","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4798,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1655:7:28","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"41444d494e5f524f4c45","id":4800,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1702:12:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_a49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775","typeString":"literal_string \"ADMIN_ROLE\""},"value":"ADMIN_ROLE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_a49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775","typeString":"literal_string \"ADMIN_ROLE\""}],"id":4799,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1692:9:28","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4801,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1692:23:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":true,"functionSelector":"e63ab1e9","id":4807,"mutability":"constant","name":"PAUSER_ROLE","nameLocation":"1745:11:28","nodeType":"VariableDeclaration","scope":6068,"src":"1721:62:28","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4803,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1721:7:28","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"5041555345525f524f4c45","id":4805,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1769:13:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a","typeString":"literal_string \"PAUSER_ROLE\""},"value":"PAUSER_ROLE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a","typeString":"literal_string \"PAUSER_ROLE\""}],"id":4804,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1759:9:28","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4806,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1759:24:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":true,"functionSelector":"f72c0d8b","id":4812,"mutability":"constant","name":"UPGRADER_ROLE","nameLocation":"1813:13:28","nodeType":"VariableDeclaration","scope":6068,"src":"1789:66:28","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4808,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1789:7:28","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"55504752414445525f524f4c45","id":4810,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1839:15:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e3","typeString":"literal_string \"UPGRADER_ROLE\""},"value":"UPGRADER_ROLE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e3","typeString":"literal_string \"UPGRADER_ROLE\""}],"id":4809,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1829:9:28","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4811,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1829:26:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":false,"functionSelector":"bd826ed7","id":4814,"mutability":"mutable","name":"nativeCurrencyWrappedAddress","nameLocation":"1877:28:28","nodeType":"VariableDeclaration","scope":6068,"src":"1862:43:28","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4813,"name":"address","nodeType":"ElementaryTypeName","src":"1862:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"constant":false,"functionSelector":"38073f0c","id":4816,"mutability":"mutable","name":"nativeCurrencyAddress","nameLocation":"1926:21:28","nodeType":"VariableDeclaration","scope":6068,"src":"1911:36:28","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4815,"name":"address","nodeType":"ElementaryTypeName","src":"1911:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"canonicalName":"CrossSyncGateway.RouteData","id":4823,"members":[{"constant":false,"id":4818,"mutability":"mutable","name":"routeAddress","nameLocation":"1989:12:28","nodeType":"VariableDeclaration","scope":4823,"src":"1981:20:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4817,"name":"address","nodeType":"ElementaryTypeName","src":"1981:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4820,"mutability":"mutable","name":"isValid","nameLocation":"2016:7:28","nodeType":"VariableDeclaration","scope":4823,"src":"2011:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4819,"name":"bool","nodeType":"ElementaryTypeName","src":"2011:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":4822,"mutability":"mutable","name":"routeName","nameLocation":"2040:9:28","nodeType":"VariableDeclaration","scope":4823,"src":"2033:16:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":4821,"name":"string","nodeType":"ElementaryTypeName","src":"2033:6:28","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"name":"RouteData","nameLocation":"1961:9:28","nodeType":"StructDefinition","scope":6068,"src":"1954:102:28","visibility":"public"},{"constant":false,"id":4828,"mutability":"mutable","name":"routes","nameLocation":"2101:6:28","nodeType":"VariableDeclaration","scope":6068,"src":"2062:45:28","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_RouteData_$4823_storage_$","typeString":"mapping(uint256 => struct CrossSyncGateway.RouteData)"},"typeName":{"id":4827,"keyType":{"id":4824,"name":"uint256","nodeType":"ElementaryTypeName","src":"2071:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"2062:30:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_RouteData_$4823_storage_$","typeString":"mapping(uint256 => struct CrossSyncGateway.RouteData)"},"valueType":{"id":4826,"nodeType":"UserDefinedTypeName","pathNode":{"id":4825,"name":"RouteData","nameLocations":["2082:9:28"],"nodeType":"IdentifierPath","referencedDeclaration":4823,"src":"2082:9:28"},"referencedDeclaration":4823,"src":"2082:9:28","typeDescriptions":{"typeIdentifier":"t_struct$_RouteData_$4823_storage_ptr","typeString":"struct CrossSyncGateway.RouteData"}}},"visibility":"private"},{"constant":false,"functionSelector":"7faf251c","id":4832,"mutability":"mutable","name":"destChainGatewayAddress","nameLocation":"2149:23:28","nodeType":"VariableDeclaration","scope":6068,"src":"2113:59:28","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"typeName":{"id":4831,"keyType":{"id":4829,"name":"uint256","nodeType":"ElementaryTypeName","src":"2122:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"2113:28:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"valueType":{"id":4830,"name":"address","nodeType":"ElementaryTypeName","src":"2133:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"public"},{"constant":false,"functionSelector":"1fa5d2e7","id":4840,"mutability":"mutable","name":"sentUserNonce","nameLocation":"2254:13:28","nodeType":"VariableDeclaration","scope":6068,"src":"2178:89:28","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_uint256_$_$_$","typeString":"mapping(address => mapping(uint256 => mapping(uint256 => uint256)))"},"typeName":{"id":4839,"keyType":{"id":4833,"name":"address","nodeType":"ElementaryTypeName","src":"2187:7:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"2178:68:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_uint256_$_$_$","typeString":"mapping(address => mapping(uint256 => mapping(uint256 => uint256)))"},"valueType":{"id":4838,"keyType":{"id":4834,"name":"uint256","nodeType":"ElementaryTypeName","src":"2206:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"2198:47:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(uint256 => uint256))"},"valueType":{"id":4837,"keyType":{"id":4835,"name":"uint256","nodeType":"ElementaryTypeName","src":"2225:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"2217:27:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"valueType":{"id":4836,"name":"uint256","nodeType":"ElementaryTypeName","src":"2236:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}}},"visibility":"public"},{"constant":false,"functionSelector":"4429c25f","id":4848,"mutability":"mutable","name":"receiveUserNonceSeen","nameLocation":"2394:20:28","nodeType":"VariableDeclaration","scope":6068,"src":"2321:93:28","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_bool_$_$_$","typeString":"mapping(address => mapping(uint256 => mapping(uint256 => bool)))"},"typeName":{"id":4847,"keyType":{"id":4841,"name":"address","nodeType":"ElementaryTypeName","src":"2330:7:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"2321:65:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_bool_$_$_$","typeString":"mapping(address => mapping(uint256 => mapping(uint256 => bool)))"},"valueType":{"id":4846,"keyType":{"id":4842,"name":"uint256","nodeType":"ElementaryTypeName","src":"2349:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"2341:44:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_bool_$_$","typeString":"mapping(uint256 => mapping(uint256 => bool))"},"valueType":{"id":4845,"keyType":{"id":4843,"name":"uint256","nodeType":"ElementaryTypeName","src":"2368:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"2360:24:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bool_$","typeString":"mapping(uint256 => bool)"},"valueType":{"id":4844,"name":"bool","nodeType":"ElementaryTypeName","src":"2379:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}}}},"visibility":"public"},{"constant":false,"functionSelector":"8262c317","id":4850,"mutability":"mutable","name":"crossSyncFeePercent","nameLocation":"2477:19:28","nodeType":"VariableDeclaration","scope":6068,"src":"2462:34:28","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4849,"name":"uint256","nodeType":"ElementaryTypeName","src":"2462:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"functionSelector":"acb7176b","id":4852,"mutability":"mutable","name":"crossSyncFeeAddress","nameLocation":"2537:19:28","nodeType":"VariableDeclaration","scope":6068,"src":"2522:34:28","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4851,"name":"address","nodeType":"ElementaryTypeName","src":"2522:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"body":{"id":4859,"nodeType":"Block","src":"2630:39:28","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":4856,"name":"_disableInitializers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1250,"src":"2640:20:28","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":4857,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2640:22:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4858,"nodeType":"ExpressionStatement","src":"2640:22:28"}]},"documentation":{"id":4853,"nodeType":"StructuredDocumentation","src":"2563:48:28","text":"@custom:oz-upgrades-unsafe-allow constructor"},"id":4860,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":4854,"nodeType":"ParameterList","parameters":[],"src":"2627:2:28"},"returnParameters":{"id":4855,"nodeType":"ParameterList","parameters":[],"src":"2630:0:28"},"scope":6068,"src":"2616:53:28","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4927,"nodeType":"Block","src":"2880:581:28","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":4877,"name":"__Pausable_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1436,"src":"2890:15:28","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":4878,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2890:17:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4879,"nodeType":"ExpressionStatement","src":"2890:17:28"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":4880,"name":"__Ownable_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":605,"src":"2917:14:28","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":4881,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2917:16:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4882,"nodeType":"ExpressionStatement","src":"2917:16:28"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":4883,"name":"__AccessControl_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":166,"src":"2943:20:28","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":4884,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2943:22:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4885,"nodeType":"ExpressionStatement","src":"2943:22:28"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":4886,"name":"__ReentrancyGuard_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1555,"src":"2975:22:28","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":4887,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2975:24:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4888,"nodeType":"ExpressionStatement","src":"2975:24:28"},{"expression":{"arguments":[{"id":4890,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4862,"src":"3023:5:28","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}},{"id":4891,"name":"_version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4864,"src":"3030:8:28","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"},{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}],"id":4889,"name":"__EIP712_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2851,"src":"3009:13:28","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory,string memory)"}},"id":4892,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3009:30:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4893,"nodeType":"ExpressionStatement","src":"3009:30:28"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":4894,"name":"__UUPSUpgradeable_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1287,"src":"3049:22:28","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":4895,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3049:24:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4896,"nodeType":"ExpressionStatement","src":"3049:24:28"},{"expression":{"arguments":[{"id":4898,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4870,"src":"3098:6:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4897,"name":"__setOwner__","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6048,"src":"3085:12:28","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":4899,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3085:20:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4900,"nodeType":"ExpressionStatement","src":"3085:20:28"},{"expression":{"arguments":[{"id":4902,"name":"ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4802,"src":"3129:10:28","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4903,"name":"SUPER_ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4797,"src":"3141:16:28","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4901,"name":"_setRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":411,"src":"3115:13:28","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_bytes32_$returns$__$","typeString":"function (bytes32,bytes32)"}},"id":4904,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3115:43:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4905,"nodeType":"ExpressionStatement","src":"3115:43:28"},{"expression":{"arguments":[{"id":4907,"name":"PAUSER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4807,"src":"3182:11:28","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4908,"name":"SUPER_ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4797,"src":"3195:16:28","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4906,"name":"_setRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":411,"src":"3168:13:28","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_bytes32_$returns$__$","typeString":"function (bytes32,bytes32)"}},"id":4909,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3168:44:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4910,"nodeType":"ExpressionStatement","src":"3168:44:28"},{"expression":{"id":4913,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4911,"name":"nativeCurrencyWrappedAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4814,"src":"3223:28:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4912,"name":"_nativeCurrencyWrappedAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4866,"src":"3254:29:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3223:60:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4914,"nodeType":"ExpressionStatement","src":"3223:60:28"},{"expression":{"id":4917,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4915,"name":"nativeCurrencyAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4816,"src":"3293:21:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4916,"name":"_nativeCurrencyAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4868,"src":"3317:22:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3293:46:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4918,"nodeType":"ExpressionStatement","src":"3293:46:28"},{"expression":{"id":4921,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4919,"name":"crossSyncFeePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4850,"src":"3349:19:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"3430","id":4920,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3371:2:28","typeDescriptions":{"typeIdentifier":"t_rational_40_by_1","typeString":"int_const 40"},"value":"40"},"src":"3349:24:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4922,"nodeType":"ExpressionStatement","src":"3349:24:28"},{"expression":{"id":4925,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4923,"name":"crossSyncFeeAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4852,"src":"3412:19:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4924,"name":"_crossSyncFeeAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4872,"src":"3434:20:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3412:42:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4926,"nodeType":"ExpressionStatement","src":"3412:42:28"}]},"functionSelector":"e56f2fe4","id":4928,"implemented":true,"kind":"function","modifiers":[{"id":4875,"kind":"modifierInvocation","modifierName":{"id":4874,"name":"initializer","nameLocations":["2868:11:28"],"nodeType":"IdentifierPath","referencedDeclaration":1171,"src":"2868:11:28"},"nodeType":"ModifierInvocation","src":"2868:11:28"}],"name":"initialize","nameLocation":"2684:10:28","nodeType":"FunctionDefinition","parameters":{"id":4873,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4862,"mutability":"mutable","name":"_name","nameLocation":"2711:5:28","nodeType":"VariableDeclaration","scope":4928,"src":"2695:21:28","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":4861,"name":"string","nodeType":"ElementaryTypeName","src":"2695:6:28","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":4864,"mutability":"mutable","name":"_version","nameLocation":"2734:8:28","nodeType":"VariableDeclaration","scope":4928,"src":"2718:24:28","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":4863,"name":"string","nodeType":"ElementaryTypeName","src":"2718:6:28","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":4866,"mutability":"mutable","name":"_nativeCurrencyWrappedAddress","nameLocation":"2752:29:28","nodeType":"VariableDeclaration","scope":4928,"src":"2744:37:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4865,"name":"address","nodeType":"ElementaryTypeName","src":"2744:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4868,"mutability":"mutable","name":"_nativeCurrencyAddress","nameLocation":"2791:22:28","nodeType":"VariableDeclaration","scope":4928,"src":"2783:30:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4867,"name":"address","nodeType":"ElementaryTypeName","src":"2783:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4870,"mutability":"mutable","name":"_owner","nameLocation":"2823:6:28","nodeType":"VariableDeclaration","scope":4928,"src":"2815:14:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4869,"name":"address","nodeType":"ElementaryTypeName","src":"2815:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4872,"mutability":"mutable","name":"_crossSyncFeeAddress","nameLocation":"2839:20:28","nodeType":"VariableDeclaration","scope":4928,"src":"2831:28:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4871,"name":"address","nodeType":"ElementaryTypeName","src":"2831:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2694:166:28"},"returnParameters":{"id":4876,"nodeType":"ParameterList","parameters":[],"src":"2880:0:28"},"scope":6068,"src":"2675:786:28","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[684],"body":{"id":4954,"nodeType":"Block","src":"3811:156:28","statements":[{"expression":{"arguments":[{"id":4940,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4931,"src":"3845:8:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":4937,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"3821:5:28","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_CrossSyncGateway_$6068_$","typeString":"type(contract super CrossSyncGateway)"}},"id":4939,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3827:17:28","memberName":"transferOwnership","nodeType":"MemberAccess","referencedDeclaration":684,"src":"3821:23:28","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":4941,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3821:33:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4942,"nodeType":"ExpressionStatement","src":"3821:33:28"},{"expression":{"arguments":[{"id":4944,"name":"DEFAULT_ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":187,"src":"3875:18:28","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4945,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4931,"src":"3895:8:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4943,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":443,"src":"3864:10:28","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":4946,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3864:40:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4947,"nodeType":"ExpressionStatement","src":"3864:40:28"},{"expression":{"arguments":[{"id":4949,"name":"DEFAULT_ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":187,"src":"3927:18:28","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"id":4950,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[5987],"referencedDeclaration":5987,"src":"3947:10:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4951,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3947:12:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4948,"name":"renounceRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":369,"src":"3914:12:28","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":4952,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3914:46:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4953,"nodeType":"ExpressionStatement","src":"3914:46:28"}]},"documentation":{"id":4929,"nodeType":"StructuredDocumentation","src":"3596:134:28","text":" @dev overriding the inherited {transferOwnership} function to reflect the admin changes into the {DEFAULT_ADMIN_ROLE}"},"functionSelector":"f2fde38b","id":4955,"implemented":true,"kind":"function","modifiers":[{"id":4935,"kind":"modifierInvocation","modifierName":{"id":4934,"name":"onlyOwner","nameLocations":["3801:9:28"],"nodeType":"IdentifierPath","referencedDeclaration":624,"src":"3801:9:28"},"nodeType":"ModifierInvocation","src":"3801:9:28"}],"name":"transferOwnership","nameLocation":"3749:17:28","nodeType":"FunctionDefinition","overrides":{"id":4933,"nodeType":"OverrideSpecifier","overrides":[],"src":"3792:8:28"},"parameters":{"id":4932,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4931,"mutability":"mutable","name":"newOwner","nameLocation":"3775:8:28","nodeType":"VariableDeclaration","scope":4955,"src":"3767:16:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4930,"name":"address","nodeType":"ElementaryTypeName","src":"3767:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3766:18:28"},"returnParameters":{"id":4936,"nodeType":"ParameterList","parameters":[],"src":"3811:0:28"},"scope":6068,"src":"3740:227:28","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4974,"nodeType":"Block","src":"4114:160:28","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4969,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4960,"name":"UPGRADER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4812,"src":"4153:13:28","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"id":4961,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[5987],"referencedDeclaration":5987,"src":"4168:10:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4962,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4168:12:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4959,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":239,"src":"4145:7:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":4963,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4145:36:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4968,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":4964,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":633,"src":"4197:5:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4965,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4197:7:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":4966,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[5987],"referencedDeclaration":5987,"src":"4208:10:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4967,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4208:12:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4197:23:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4145:75:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"556e617574686f72697a656420416363657373","id":4970,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4234:21:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_77b552f167d22b6faad15ee76b5f3a907c3fb0e19277e19de90e757debd27ffe","typeString":"literal_string \"Unauthorized Access\""},"value":"Unauthorized Access"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_77b552f167d22b6faad15ee76b5f3a907c3fb0e19277e19de90e757debd27ffe","typeString":"literal_string \"Unauthorized Access\""}],"id":4958,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4124:7:28","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4971,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4124:132:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4972,"nodeType":"ExpressionStatement","src":"4124:132:28"},{"id":4973,"nodeType":"PlaceholderStatement","src":"4266:1:28"}]},"documentation":{"id":4956,"nodeType":"StructuredDocumentation","src":"3973:111:28","text":" @dev modifier to check Upgrader rights.\n contract Owner and Upgrader have Upgrader rights"},"id":4975,"name":"onlyUpgrader","nameLocation":"4099:12:28","nodeType":"ModifierDefinition","parameters":{"id":4957,"nodeType":"ParameterList","parameters":[],"src":"4111:2:28"},"src":"4090:184:28","virtual":false,"visibility":"internal"},{"body":{"id":4994,"nodeType":"Block","src":"4438:163:28","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4989,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4980,"name":"SUPER_ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4797,"src":"4477:16:28","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"id":4981,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[5987],"referencedDeclaration":5987,"src":"4495:10:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4982,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4495:12:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4979,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":239,"src":"4469:7:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":4983,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4469:39:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4988,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":4984,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":633,"src":"4524:5:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4985,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4524:7:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":4986,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[5987],"referencedDeclaration":5987,"src":"4535:10:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4987,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4535:12:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4524:23:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4469:78:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"556e617574686f72697a656420416363657373","id":4990,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4561:21:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_77b552f167d22b6faad15ee76b5f3a907c3fb0e19277e19de90e757debd27ffe","typeString":"literal_string \"Unauthorized Access\""},"value":"Unauthorized Access"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_77b552f167d22b6faad15ee76b5f3a907c3fb0e19277e19de90e757debd27ffe","typeString":"literal_string \"Unauthorized Access\""}],"id":4978,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4448:7:28","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4991,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4448:135:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4992,"nodeType":"ExpressionStatement","src":"4448:135:28"},{"id":4993,"nodeType":"PlaceholderStatement","src":"4593:1:28"}]},"documentation":{"id":4976,"nodeType":"StructuredDocumentation","src":"4286:120:28","text":" @dev modifier to check super admin rights.\n contract owner and super admin have super admin rights"},"id":4995,"name":"onlySuperAdmin","nameLocation":"4421:14:28","nodeType":"ModifierDefinition","parameters":{"id":4977,"nodeType":"ParameterList","parameters":[],"src":"4435:2:28"},"src":"4412:189:28","virtual":false,"visibility":"internal"},{"body":{"id":5020,"nodeType":"Block","src":"4749:212:28","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5015,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5009,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":5000,"name":"ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4802,"src":"4788:10:28","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"id":5001,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[5987],"referencedDeclaration":5987,"src":"4800:10:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5002,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4800:12:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4999,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":239,"src":"4780:7:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":5003,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4780:33:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":5005,"name":"SUPER_ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4797,"src":"4837:16:28","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"id":5006,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[5987],"referencedDeclaration":5987,"src":"4855:10:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5007,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4855:12:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":5004,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":239,"src":"4829:7:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":5008,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4829:39:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4780:88:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5014,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":5010,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":633,"src":"4884:5:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5011,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4884:7:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":5012,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[5987],"referencedDeclaration":5987,"src":"4895:10:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5013,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4895:12:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4884:23:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4780:127:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"556e617574686f72697a656420416363657373","id":5016,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4921:21:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_77b552f167d22b6faad15ee76b5f3a907c3fb0e19277e19de90e757debd27ffe","typeString":"literal_string \"Unauthorized Access\""},"value":"Unauthorized Access"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_77b552f167d22b6faad15ee76b5f3a907c3fb0e19277e19de90e757debd27ffe","typeString":"literal_string \"Unauthorized Access\""}],"id":4998,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4759:7:28","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5017,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4759:184:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5018,"nodeType":"ExpressionStatement","src":"4759:184:28"},{"id":5019,"nodeType":"PlaceholderStatement","src":"4953:1:28"}]},"documentation":{"id":4996,"nodeType":"StructuredDocumentation","src":"4607:116:28","text":" @dev modifier to check admin rights.\n contract owner, super admin and admins have admin rights"},"id":5021,"name":"onlyAdmin","nameLocation":"4737:9:28","nodeType":"ModifierDefinition","parameters":{"id":4997,"nodeType":"ParameterList","parameters":[],"src":"4746:2:28"},"src":"4728:233:28","virtual":false,"visibility":"internal"},{"body":{"id":5046,"nodeType":"Block","src":"5113:214:28","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5041,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5035,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":5026,"name":"PAUSER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4807,"src":"5152:11:28","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"id":5027,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[5987],"referencedDeclaration":5987,"src":"5165:10:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5028,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5165:12:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":5025,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":239,"src":"5144:7:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":5029,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5144:34:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":5031,"name":"SUPER_ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4797,"src":"5202:16:28","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"id":5032,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[5987],"referencedDeclaration":5987,"src":"5220:10:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5033,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5220:12:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":5030,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":239,"src":"5194:7:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":5034,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5194:39:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5144:89:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5040,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":5036,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":633,"src":"5250:5:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5037,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5250:7:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":5038,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[5987],"referencedDeclaration":5987,"src":"5261:10:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5039,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5261:12:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5250:23:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5144:129:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"556e617574686f72697a656420416363657373","id":5042,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5287:21:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_77b552f167d22b6faad15ee76b5f3a907c3fb0e19277e19de90e757debd27ffe","typeString":"literal_string \"Unauthorized Access\""},"value":"Unauthorized Access"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_77b552f167d22b6faad15ee76b5f3a907c3fb0e19277e19de90e757debd27ffe","typeString":"literal_string \"Unauthorized Access\""}],"id":5024,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5123:7:28","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5043,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5123:186:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5044,"nodeType":"ExpressionStatement","src":"5123:186:28"},{"id":5045,"nodeType":"PlaceholderStatement","src":"5319:1:28"}]},"documentation":{"id":5022,"nodeType":"StructuredDocumentation","src":"4967:119:28","text":" @dev modifier to check pause rights.\n contract owner, super admin and pausers's have pause rights"},"id":5047,"name":"onlyPauser","nameLocation":"5100:10:28","nodeType":"ModifierDefinition","parameters":{"id":5023,"nodeType":"ParameterList","parameters":[],"src":"5110:2:28"},"src":"5091:236:28","virtual":false,"visibility":"internal"},{"body":{"id":5055,"nodeType":"Block","src":"5368:25:28","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":5052,"name":"_pause","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1510,"src":"5378:6:28","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":5053,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5378:8:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5054,"nodeType":"ExpressionStatement","src":"5378:8:28"}]},"functionSelector":"8456cb59","id":5056,"implemented":true,"kind":"function","modifiers":[{"id":5050,"kind":"modifierInvocation","modifierName":{"id":5049,"name":"onlyPauser","nameLocations":["5357:10:28"],"nodeType":"IdentifierPath","referencedDeclaration":5047,"src":"5357:10:28"},"nodeType":"ModifierInvocation","src":"5357:10:28"}],"name":"pause","nameLocation":"5342:5:28","nodeType":"FunctionDefinition","parameters":{"id":5048,"nodeType":"ParameterList","parameters":[],"src":"5347:2:28"},"returnParameters":{"id":5051,"nodeType":"ParameterList","parameters":[],"src":"5368:0:28"},"scope":6068,"src":"5333:60:28","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":5064,"nodeType":"Block","src":"5436:27:28","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":5061,"name":"_unpause","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1526,"src":"5446:8:28","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":5062,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5446:10:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5063,"nodeType":"ExpressionStatement","src":"5446:10:28"}]},"functionSelector":"3f4ba83a","id":5065,"implemented":true,"kind":"function","modifiers":[{"id":5059,"kind":"modifierInvocation","modifierName":{"id":5058,"name":"onlyPauser","nameLocations":["5425:10:28"],"nodeType":"IdentifierPath","referencedDeclaration":5047,"src":"5425:10:28"},"nodeType":"ModifierInvocation","src":"5425:10:28"}],"name":"unpause","nameLocation":"5408:7:28","nodeType":"FunctionDefinition","parameters":{"id":5057,"nodeType":"ParameterList","parameters":[],"src":"5415:2:28"},"returnParameters":{"id":5060,"nodeType":"ParameterList","parameters":[],"src":"5436:0:28"},"scope":6068,"src":"5399:64:28","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":5077,"nodeType":"Block","src":"5526:53:28","statements":[{"expression":{"arguments":[{"id":5073,"name":"UPGRADER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4812,"src":"5547:13:28","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":5074,"name":"_upgrader","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5067,"src":"5562:9:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":5072,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":443,"src":"5536:10:28","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":5075,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5536:36:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5076,"nodeType":"ExpressionStatement","src":"5536:36:28"}]},"functionSelector":"e5110158","id":5078,"implemented":true,"kind":"function","modifiers":[{"id":5070,"kind":"modifierInvocation","modifierName":{"id":5069,"name":"onlyOwner","nameLocations":["5516:9:28"],"nodeType":"IdentifierPath","referencedDeclaration":624,"src":"5516:9:28"},"nodeType":"ModifierInvocation","src":"5516:9:28"}],"name":"addUpgrader","nameLocation":"5478:11:28","nodeType":"FunctionDefinition","parameters":{"id":5068,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5067,"mutability":"mutable","name":"_upgrader","nameLocation":"5498:9:28","nodeType":"VariableDeclaration","scope":5078,"src":"5490:17:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5066,"name":"address","nodeType":"ElementaryTypeName","src":"5490:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5489:19:28"},"returnParameters":{"id":5071,"nodeType":"ParameterList","parameters":[],"src":"5526:0:28"},"scope":6068,"src":"5469:110:28","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":5090,"nodeType":"Block","src":"5646:58:28","statements":[{"expression":{"arguments":[{"id":5086,"name":"SUPER_ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4797,"src":"5667:16:28","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":5087,"name":"_superAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5080,"src":"5685:11:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":5085,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":443,"src":"5656:10:28","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":5088,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5656:41:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5089,"nodeType":"ExpressionStatement","src":"5656:41:28"}]},"functionSelector":"b3292ff0","id":5091,"implemented":true,"kind":"function","modifiers":[{"id":5083,"kind":"modifierInvocation","modifierName":{"id":5082,"name":"onlyOwner","nameLocations":["5636:9:28"],"nodeType":"IdentifierPath","referencedDeclaration":624,"src":"5636:9:28"},"nodeType":"ModifierInvocation","src":"5636:9:28"}],"name":"addSuperAdmin","nameLocation":"5594:13:28","nodeType":"FunctionDefinition","parameters":{"id":5081,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5080,"mutability":"mutable","name":"_superAdmin","nameLocation":"5616:11:28","nodeType":"VariableDeclaration","scope":5091,"src":"5608:19:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5079,"name":"address","nodeType":"ElementaryTypeName","src":"5608:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5607:21:28"},"returnParameters":{"id":5084,"nodeType":"ParameterList","parameters":[],"src":"5646:0:28"},"scope":6068,"src":"5585:119:28","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":5103,"nodeType":"Block","src":"5766:47:28","statements":[{"expression":{"arguments":[{"id":5099,"name":"ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4802,"src":"5787:10:28","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":5100,"name":"_admin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5093,"src":"5799:6:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":5098,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":443,"src":"5776:10:28","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":5101,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5776:30:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5102,"nodeType":"ExpressionStatement","src":"5776:30:28"}]},"functionSelector":"70480275","id":5104,"implemented":true,"kind":"function","modifiers":[{"id":5096,"kind":"modifierInvocation","modifierName":{"id":5095,"name":"onlySuperAdmin","nameLocations":["5751:14:28"],"nodeType":"IdentifierPath","referencedDeclaration":4995,"src":"5751:14:28"},"nodeType":"ModifierInvocation","src":"5751:14:28"}],"name":"addAdmin","nameLocation":"5719:8:28","nodeType":"FunctionDefinition","parameters":{"id":5094,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5093,"mutability":"mutable","name":"_admin","nameLocation":"5736:6:28","nodeType":"VariableDeclaration","scope":5104,"src":"5728:14:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5092,"name":"address","nodeType":"ElementaryTypeName","src":"5728:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5727:16:28"},"returnParameters":{"id":5097,"nodeType":"ParameterList","parameters":[],"src":"5766:0:28"},"scope":6068,"src":"5710:103:28","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":5116,"nodeType":"Block","src":"5877:49:28","statements":[{"expression":{"arguments":[{"id":5112,"name":"PAUSER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4807,"src":"5898:11:28","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":5113,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5106,"src":"5911:7:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":5111,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":443,"src":"5887:10:28","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":5114,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5887:32:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5115,"nodeType":"ExpressionStatement","src":"5887:32:28"}]},"functionSelector":"82dc1ec4","id":5117,"implemented":true,"kind":"function","modifiers":[{"id":5109,"kind":"modifierInvocation","modifierName":{"id":5108,"name":"onlySuperAdmin","nameLocations":["5862:14:28"],"nodeType":"IdentifierPath","referencedDeclaration":4995,"src":"5862:14:28"},"nodeType":"ModifierInvocation","src":"5862:14:28"}],"name":"addPauser","nameLocation":"5828:9:28","nodeType":"FunctionDefinition","parameters":{"id":5107,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5106,"mutability":"mutable","name":"account","nameLocation":"5846:7:28","nodeType":"VariableDeclaration","scope":5117,"src":"5838:15:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5105,"name":"address","nodeType":"ElementaryTypeName","src":"5838:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5837:17:28"},"returnParameters":{"id":5110,"nodeType":"ParameterList","parameters":[],"src":"5877:0:28"},"scope":6068,"src":"5819:107:28","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":5129,"nodeType":"Block","src":"5992:54:28","statements":[{"expression":{"arguments":[{"id":5125,"name":"UPGRADER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4812,"src":"6014:13:28","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":5126,"name":"_upgrader","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5119,"src":"6029:9:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":5124,"name":"_revokeRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":474,"src":"6002:11:28","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":5127,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6002:37:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5128,"nodeType":"ExpressionStatement","src":"6002:37:28"}]},"functionSelector":"d264a803","id":5130,"implemented":true,"kind":"function","modifiers":[{"id":5122,"kind":"modifierInvocation","modifierName":{"id":5121,"name":"onlyOwner","nameLocations":["5982:9:28"],"nodeType":"IdentifierPath","referencedDeclaration":624,"src":"5982:9:28"},"nodeType":"ModifierInvocation","src":"5982:9:28"}],"name":"removeUpgrader","nameLocation":"5941:14:28","nodeType":"FunctionDefinition","parameters":{"id":5120,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5119,"mutability":"mutable","name":"_upgrader","nameLocation":"5964:9:28","nodeType":"VariableDeclaration","scope":5130,"src":"5956:17:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5118,"name":"address","nodeType":"ElementaryTypeName","src":"5956:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5955:19:28"},"returnParameters":{"id":5123,"nodeType":"ParameterList","parameters":[],"src":"5992:0:28"},"scope":6068,"src":"5932:114:28","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":5142,"nodeType":"Block","src":"6116:59:28","statements":[{"expression":{"arguments":[{"id":5138,"name":"SUPER_ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4797,"src":"6138:16:28","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":5139,"name":"_superAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5132,"src":"6156:11:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":5137,"name":"_revokeRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":474,"src":"6126:11:28","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":5140,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6126:42:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5141,"nodeType":"ExpressionStatement","src":"6126:42:28"}]},"functionSelector":"4902e4aa","id":5143,"implemented":true,"kind":"function","modifiers":[{"id":5135,"kind":"modifierInvocation","modifierName":{"id":5134,"name":"onlyOwner","nameLocations":["6106:9:28"],"nodeType":"IdentifierPath","referencedDeclaration":624,"src":"6106:9:28"},"nodeType":"ModifierInvocation","src":"6106:9:28"}],"name":"removeSuperAdmin","nameLocation":"6061:16:28","nodeType":"FunctionDefinition","parameters":{"id":5133,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5132,"mutability":"mutable","name":"_superAdmin","nameLocation":"6086:11:28","nodeType":"VariableDeclaration","scope":5143,"src":"6078:19:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5131,"name":"address","nodeType":"ElementaryTypeName","src":"6078:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6077:21:28"},"returnParameters":{"id":5136,"nodeType":"ParameterList","parameters":[],"src":"6116:0:28"},"scope":6068,"src":"6052:123:28","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":5155,"nodeType":"Block","src":"6240:48:28","statements":[{"expression":{"arguments":[{"id":5151,"name":"ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4802,"src":"6262:10:28","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":5152,"name":"_admin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5145,"src":"6274:6:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":5150,"name":"_revokeRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":474,"src":"6250:11:28","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":5153,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6250:31:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5154,"nodeType":"ExpressionStatement","src":"6250:31:28"}]},"functionSelector":"1785f53c","id":5156,"implemented":true,"kind":"function","modifiers":[{"id":5148,"kind":"modifierInvocation","modifierName":{"id":5147,"name":"onlySuperAdmin","nameLocations":["6225:14:28"],"nodeType":"IdentifierPath","referencedDeclaration":4995,"src":"6225:14:28"},"nodeType":"ModifierInvocation","src":"6225:14:28"}],"name":"removeAdmin","nameLocation":"6190:11:28","nodeType":"FunctionDefinition","parameters":{"id":5146,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5145,"mutability":"mutable","name":"_admin","nameLocation":"6210:6:28","nodeType":"VariableDeclaration","scope":5156,"src":"6202:14:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5144,"name":"address","nodeType":"ElementaryTypeName","src":"6202:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6201:16:28"},"returnParameters":{"id":5149,"nodeType":"ParameterList","parameters":[],"src":"6240:0:28"},"scope":6068,"src":"6181:107:28","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":5168,"nodeType":"Block","src":"6355:50:28","statements":[{"expression":{"arguments":[{"id":5164,"name":"PAUSER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4807,"src":"6377:11:28","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":5165,"name":"_pauser","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5158,"src":"6390:7:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":5163,"name":"_revokeRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":474,"src":"6365:11:28","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":5166,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6365:33:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5167,"nodeType":"ExpressionStatement","src":"6365:33:28"}]},"functionSelector":"6b2c0f55","id":5169,"implemented":true,"kind":"function","modifiers":[{"id":5161,"kind":"modifierInvocation","modifierName":{"id":5160,"name":"onlySuperAdmin","nameLocations":["6340:14:28"],"nodeType":"IdentifierPath","referencedDeclaration":4995,"src":"6340:14:28"},"nodeType":"ModifierInvocation","src":"6340:14:28"}],"name":"removePauser","nameLocation":"6303:12:28","nodeType":"FunctionDefinition","parameters":{"id":5159,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5158,"mutability":"mutable","name":"_pauser","nameLocation":"6324:7:28","nodeType":"VariableDeclaration","scope":5169,"src":"6316:15:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5157,"name":"address","nodeType":"ElementaryTypeName","src":"6316:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6315:17:28"},"returnParameters":{"id":5162,"nodeType":"ParameterList","parameters":[],"src":"6355:0:28"},"scope":6068,"src":"6294:111:28","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":5180,"nodeType":"Block","src":"6635:59:28","statements":[{"expression":{"arguments":[{"id":5177,"name":"_newtrustedForwarder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5171,"src":"6666:20:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5176,"name":"_setTrustedForwarder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6095,"src":"6645:20:28","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":5178,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6645:42:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5179,"nodeType":"ExpressionStatement","src":"6645:42:28"}]},"functionSelector":"da742228","id":5181,"implemented":true,"kind":"function","modifiers":[{"id":5174,"kind":"modifierInvocation","modifierName":{"id":5173,"name":"onlySuperAdmin","nameLocations":["6620:14:28"],"nodeType":"IdentifierPath","referencedDeclaration":4995,"src":"6620:14:28"},"nodeType":"ModifierInvocation","src":"6620:14:28"}],"name":"setTrustedForwarder","nameLocation":"6563:19:28","nodeType":"FunctionDefinition","parameters":{"id":5172,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5171,"mutability":"mutable","name":"_newtrustedForwarder","nameLocation":"6591:20:28","nodeType":"VariableDeclaration","scope":5181,"src":"6583:28:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5170,"name":"address","nodeType":"ElementaryTypeName","src":"6583:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6582:30:28"},"returnParameters":{"id":5175,"nodeType":"ParameterList","parameters":[],"src":"6635:0:28"},"scope":6068,"src":"6554:140:28","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":5192,"nodeType":"Block","src":"6802:77:28","statements":[{"expression":{"id":5190,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5188,"name":"nativeCurrencyWrappedAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4814,"src":"6812:28:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5189,"name":"_nativeCurrencyWrappedAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5183,"src":"6843:29:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6812:60:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5191,"nodeType":"ExpressionStatement","src":"6812:60:28"}]},"functionSelector":"6050cafe","id":5193,"implemented":true,"kind":"function","modifiers":[{"id":5186,"kind":"modifierInvocation","modifierName":{"id":5185,"name":"onlySuperAdmin","nameLocations":["6787:14:28"],"nodeType":"IdentifierPath","referencedDeclaration":4995,"src":"6787:14:28"},"nodeType":"ModifierInvocation","src":"6787:14:28"}],"name":"setNativeWrappedCurrencyAddress","nameLocation":"6709:31:28","nodeType":"FunctionDefinition","parameters":{"id":5184,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5183,"mutability":"mutable","name":"_nativeCurrencyWrappedAddress","nameLocation":"6749:29:28","nodeType":"VariableDeclaration","scope":5193,"src":"6741:37:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5182,"name":"address","nodeType":"ElementaryTypeName","src":"6741:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6740:39:28"},"returnParameters":{"id":5187,"nodeType":"ParameterList","parameters":[],"src":"6802:0:28"},"scope":6068,"src":"6700:179:28","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":5204,"nodeType":"Block","src":"6973:63:28","statements":[{"expression":{"id":5202,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5200,"name":"nativeCurrencyAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4816,"src":"6983:21:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5201,"name":"_nativeCurrencyAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5195,"src":"7007:22:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6983:46:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5203,"nodeType":"ExpressionStatement","src":"6983:46:28"}]},"functionSelector":"32495ce1","id":5205,"implemented":true,"kind":"function","modifiers":[{"id":5198,"kind":"modifierInvocation","modifierName":{"id":5197,"name":"onlySuperAdmin","nameLocations":["6958:14:28"],"nodeType":"IdentifierPath","referencedDeclaration":4995,"src":"6958:14:28"},"nodeType":"ModifierInvocation","src":"6958:14:28"}],"name":"setNativeCurrencyAddress","nameLocation":"6894:24:28","nodeType":"FunctionDefinition","parameters":{"id":5196,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5195,"mutability":"mutable","name":"_nativeCurrencyAddress","nameLocation":"6927:22:28","nodeType":"VariableDeclaration","scope":5205,"src":"6919:30:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5194,"name":"address","nodeType":"ElementaryTypeName","src":"6919:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6918:32:28"},"returnParameters":{"id":5199,"nodeType":"ParameterList","parameters":[],"src":"6973:0:28"},"scope":6068,"src":"6885:151:28","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":5212,"nodeType":"Block","src":"7115:52:28","statements":[{"expression":{"id":5210,"name":"nativeCurrencyWrappedAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4814,"src":"7132:28:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":5209,"id":5211,"nodeType":"Return","src":"7125:35:28"}]},"functionSelector":"36d8261a","id":5213,"implemented":true,"kind":"function","modifiers":[],"name":"getNativeWrappedCurrencyAddress","nameLocation":"7051:31:28","nodeType":"FunctionDefinition","parameters":{"id":5206,"nodeType":"ParameterList","parameters":[],"src":"7082:2:28"},"returnParameters":{"id":5209,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5208,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5213,"src":"7106:7:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5207,"name":"address","nodeType":"ElementaryTypeName","src":"7106:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7105:9:28"},"scope":6068,"src":"7042:125:28","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":5220,"nodeType":"Block","src":"7239:45:28","statements":[{"expression":{"id":5218,"name":"nativeCurrencyAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4816,"src":"7256:21:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":5217,"id":5219,"nodeType":"Return","src":"7249:28:28"}]},"functionSelector":"8898009d","id":5221,"implemented":true,"kind":"function","modifiers":[],"name":"getNativeCurrencyAddress","nameLocation":"7182:24:28","nodeType":"FunctionDefinition","parameters":{"id":5214,"nodeType":"ParameterList","parameters":[],"src":"7206:2:28"},"returnParameters":{"id":5217,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5216,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5221,"src":"7230:7:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5215,"name":"address","nodeType":"ElementaryTypeName","src":"7230:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7229:9:28"},"scope":6068,"src":"7173:111:28","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":5236,"nodeType":"Block","src":"7478:75:28","statements":[{"expression":{"id":5234,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5230,"name":"destChainGatewayAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4832,"src":"7488:23:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":5232,"indexExpression":{"id":5231,"name":"chainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5223,"src":"7512:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7488:32:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5233,"name":"crossSyncGatewayAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5225,"src":"7523:23:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7488:58:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5235,"nodeType":"ExpressionStatement","src":"7488:58:28"}]},"functionSelector":"98c33904","id":5237,"implemented":true,"kind":"function","modifiers":[{"id":5228,"kind":"modifierInvocation","modifierName":{"id":5227,"name":"onlySuperAdmin","nameLocations":["7463:14:28"],"nodeType":"IdentifierPath","referencedDeclaration":4995,"src":"7463:14:28"},"nodeType":"ModifierInvocation","src":"7463:14:28"}],"name":"setDestChainGatewayAddress","nameLocation":"7379:26:28","nodeType":"FunctionDefinition","parameters":{"id":5226,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5223,"mutability":"mutable","name":"chainId","nameLocation":"7414:7:28","nodeType":"VariableDeclaration","scope":5237,"src":"7406:15:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5222,"name":"uint256","nodeType":"ElementaryTypeName","src":"7406:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5225,"mutability":"mutable","name":"crossSyncGatewayAddress","nameLocation":"7431:23:28","nodeType":"VariableDeclaration","scope":5237,"src":"7423:31:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5224,"name":"address","nodeType":"ElementaryTypeName","src":"7423:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7405:50:28"},"returnParameters":{"id":5229,"nodeType":"ParameterList","parameters":[],"src":"7478:0:28"},"scope":6068,"src":"7370:183:28","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":5248,"nodeType":"Block","src":"7636:59:28","statements":[{"expression":{"id":5246,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5244,"name":"crossSyncFeePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4850,"src":"7646:19:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5245,"name":"_crossSyncFeePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5239,"src":"7668:20:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7646:42:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5247,"nodeType":"ExpressionStatement","src":"7646:42:28"}]},"functionSelector":"7d0517d0","id":5249,"implemented":true,"kind":"function","modifiers":[{"id":5242,"kind":"modifierInvocation","modifierName":{"id":5241,"name":"onlySuperAdmin","nameLocations":["7621:14:28"],"nodeType":"IdentifierPath","referencedDeclaration":4995,"src":"7621:14:28"},"nodeType":"ModifierInvocation","src":"7621:14:28"}],"name":"setCrossSyncFee","nameLocation":"7568:15:28","nodeType":"FunctionDefinition","parameters":{"id":5240,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5239,"mutability":"mutable","name":"_crossSyncFeePercent","nameLocation":"7592:20:28","nodeType":"VariableDeclaration","scope":5249,"src":"7584:28:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5238,"name":"uint256","nodeType":"ElementaryTypeName","src":"7584:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7583:30:28"},"returnParameters":{"id":5243,"nodeType":"ParameterList","parameters":[],"src":"7636:0:28"},"scope":6068,"src":"7559:136:28","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":5260,"nodeType":"Block","src":"7785:59:28","statements":[{"expression":{"id":5258,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5256,"name":"crossSyncFeeAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4852,"src":"7795:19:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5257,"name":"_crossSyncFeeAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5251,"src":"7817:20:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7795:42:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5259,"nodeType":"ExpressionStatement","src":"7795:42:28"}]},"functionSelector":"fde278bc","id":5261,"implemented":true,"kind":"function","modifiers":[{"id":5254,"kind":"modifierInvocation","modifierName":{"id":5253,"name":"onlySuperAdmin","nameLocations":["7770:14:28"],"nodeType":"IdentifierPath","referencedDeclaration":4995,"src":"7770:14:28"},"nodeType":"ModifierInvocation","src":"7770:14:28"}],"name":"setCrossSyncFeeAddress","nameLocation":"7710:22:28","nodeType":"FunctionDefinition","parameters":{"id":5252,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5251,"mutability":"mutable","name":"_crossSyncFeeAddress","nameLocation":"7741:20:28","nodeType":"VariableDeclaration","scope":5261,"src":"7733:28:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5250,"name":"address","nodeType":"ElementaryTypeName","src":"7733:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7732:30:28"},"returnParameters":{"id":5255,"nodeType":"ParameterList","parameters":[],"src":"7785:0:28"},"scope":6068,"src":"7701:143:28","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":5301,"nodeType":"Block","src":"8111:214:28","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5278,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5273,"name":"_routeAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5265,"src":"8129:13:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":5276,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8154:1:28","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5275,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8146:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5274,"name":"address","nodeType":"ElementaryTypeName","src":"8146:7:28","typeDescriptions":{}}},"id":5277,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8146:10:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"8129:27:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4164647265737320302050726f7669646564","id":5279,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8158:20:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_2df9c0582a7db5c520a44442f99074a0a5e79761041b0d05eff67ab98ae7e90f","typeString":"literal_string \"Address 0 Provided\""},"value":"Address 0 Provided"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2df9c0582a7db5c520a44442f99074a0a5e79761041b0d05eff67ab98ae7e90f","typeString":"literal_string \"Address 0 Provided\""}],"id":5272,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8121:7:28","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5280,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8121:58:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5281,"nodeType":"ExpressionStatement","src":"8121:58:28"},{"expression":{"arguments":[{"id":5287,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"8197:25:28","subExpression":{"expression":{"baseExpression":{"id":5283,"name":"routes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4828,"src":"8198:6:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_RouteData_$4823_storage_$","typeString":"mapping(uint256 => struct CrossSyncGateway.RouteData storage ref)"}},"id":5285,"indexExpression":{"id":5284,"name":"_routeId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5263,"src":"8205:8:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8198:16:28","typeDescriptions":{"typeIdentifier":"t_struct$_RouteData_$4823_storage","typeString":"struct CrossSyncGateway.RouteData storage ref"}},"id":5286,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8215:7:28","memberName":"isValid","nodeType":"MemberAccess","referencedDeclaration":4820,"src":"8198:24:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"526f75746520416c726561647920457869737473","id":5288,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8224:22:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_cd73832488aebac86058d2e5e3d7e4edab4c18123fc40820f91bf2b261918a66","typeString":"literal_string \"Route Already Exists\""},"value":"Route Already Exists"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cd73832488aebac86058d2e5e3d7e4edab4c18123fc40820f91bf2b261918a66","typeString":"literal_string \"Route Already Exists\""}],"id":5282,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8189:7:28","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5289,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8189:58:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5290,"nodeType":"ExpressionStatement","src":"8189:58:28"},{"expression":{"id":5299,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5291,"name":"routes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4828,"src":"8257:6:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_RouteData_$4823_storage_$","typeString":"mapping(uint256 => struct CrossSyncGateway.RouteData storage ref)"}},"id":5293,"indexExpression":{"id":5292,"name":"_routeId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5263,"src":"8264:8:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8257:16:28","typeDescriptions":{"typeIdentifier":"t_struct$_RouteData_$4823_storage","typeString":"struct CrossSyncGateway.RouteData storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5295,"name":"_routeAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5265,"src":"8286:13:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"74727565","id":5296,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"8301:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":5297,"name":"_routeName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5267,"src":"8307:10:28","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":5294,"name":"RouteData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4823,"src":"8276:9:28","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_RouteData_$4823_storage_ptr_$","typeString":"type(struct CrossSyncGateway.RouteData storage pointer)"}},"id":5298,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8276:42:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_RouteData_$4823_memory_ptr","typeString":"struct CrossSyncGateway.RouteData memory"}},"src":"8257:61:28","typeDescriptions":{"typeIdentifier":"t_struct$_RouteData_$4823_storage","typeString":"struct CrossSyncGateway.RouteData storage ref"}},"id":5300,"nodeType":"ExpressionStatement","src":"8257:61:28"}]},"functionSelector":"004c7591","id":5302,"implemented":true,"kind":"function","modifiers":[{"id":5270,"kind":"modifierInvocation","modifierName":{"id":5269,"name":"onlySuperAdmin","nameLocations":["8096:14:28"],"nodeType":"IdentifierPath","referencedDeclaration":4995,"src":"8096:14:28"},"nodeType":"ModifierInvocation","src":"8096:14:28"}],"name":"addRoute","nameLocation":"8013:8:28","nodeType":"FunctionDefinition","parameters":{"id":5268,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5263,"mutability":"mutable","name":"_routeId","nameLocation":"8030:8:28","nodeType":"VariableDeclaration","scope":5302,"src":"8022:16:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5262,"name":"uint256","nodeType":"ElementaryTypeName","src":"8022:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5265,"mutability":"mutable","name":"_routeAddress","nameLocation":"8048:13:28","nodeType":"VariableDeclaration","scope":5302,"src":"8040:21:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5264,"name":"address","nodeType":"ElementaryTypeName","src":"8040:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5267,"mutability":"mutable","name":"_routeName","nameLocation":"8077:10:28","nodeType":"VariableDeclaration","scope":5302,"src":"8063:24:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5266,"name":"string","nodeType":"ElementaryTypeName","src":"8063:6:28","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8021:67:28"},"returnParameters":{"id":5271,"nodeType":"ParameterList","parameters":[],"src":"8111:0:28"},"scope":6068,"src":"8004:321:28","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":5322,"nodeType":"Block","src":"8392:107:28","statements":[{"expression":{"arguments":[{"expression":{"baseExpression":{"id":5310,"name":"routes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4828,"src":"8410:6:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_RouteData_$4823_storage_$","typeString":"mapping(uint256 => struct CrossSyncGateway.RouteData storage ref)"}},"id":5312,"indexExpression":{"id":5311,"name":"_routeId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5304,"src":"8417:8:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8410:16:28","typeDescriptions":{"typeIdentifier":"t_struct$_RouteData_$4823_storage","typeString":"struct CrossSyncGateway.RouteData storage ref"}},"id":5313,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8427:7:28","memberName":"isValid","nodeType":"MemberAccess","referencedDeclaration":4820,"src":"8410:24:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"526f75746520446f6573204e6f74204578697374","id":5314,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8436:22:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_335d8ed5e469b11a1eeb83fe09ff6e5511b4fb0ade2fa5d9f761385eda995778","typeString":"literal_string \"Route Does Not Exist\""},"value":"Route Does Not Exist"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_335d8ed5e469b11a1eeb83fe09ff6e5511b4fb0ade2fa5d9f761385eda995778","typeString":"literal_string \"Route Does Not Exist\""}],"id":5309,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8402:7:28","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5315,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8402:57:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5316,"nodeType":"ExpressionStatement","src":"8402:57:28"},{"expression":{"id":5320,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"8469:23:28","subExpression":{"baseExpression":{"id":5317,"name":"routes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4828,"src":"8476:6:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_RouteData_$4823_storage_$","typeString":"mapping(uint256 => struct CrossSyncGateway.RouteData storage ref)"}},"id":5319,"indexExpression":{"id":5318,"name":"_routeId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5304,"src":"8483:8:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8476:16:28","typeDescriptions":{"typeIdentifier":"t_struct$_RouteData_$4823_storage","typeString":"struct CrossSyncGateway.RouteData storage ref"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5321,"nodeType":"ExpressionStatement","src":"8469:23:28"}]},"functionSelector":"56e3008b","id":5323,"implemented":true,"kind":"function","modifiers":[{"id":5307,"kind":"modifierInvocation","modifierName":{"id":5306,"name":"onlySuperAdmin","nameLocations":["8377:14:28"],"nodeType":"IdentifierPath","referencedDeclaration":4995,"src":"8377:14:28"},"nodeType":"ModifierInvocation","src":"8377:14:28"}],"name":"removeRoute","nameLocation":"8340:11:28","nodeType":"FunctionDefinition","parameters":{"id":5305,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5304,"mutability":"mutable","name":"_routeId","nameLocation":"8360:8:28","nodeType":"VariableDeclaration","scope":5323,"src":"8352:16:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5303,"name":"uint256","nodeType":"ElementaryTypeName","src":"8352:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8351:18:28"},"returnParameters":{"id":5308,"nodeType":"ParameterList","parameters":[],"src":"8392:0:28"},"scope":6068,"src":"8331:168:28","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":5348,"nodeType":"Block","src":"8592:109:28","statements":[{"expression":{"components":[{"expression":{"baseExpression":{"id":5334,"name":"routes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4828,"src":"8610:6:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_RouteData_$4823_storage_$","typeString":"mapping(uint256 => struct CrossSyncGateway.RouteData storage ref)"}},"id":5336,"indexExpression":{"id":5335,"name":"_routeId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5325,"src":"8617:8:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8610:16:28","typeDescriptions":{"typeIdentifier":"t_struct$_RouteData_$4823_storage","typeString":"struct CrossSyncGateway.RouteData storage ref"}},"id":5337,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8627:12:28","memberName":"routeAddress","nodeType":"MemberAccess","referencedDeclaration":4818,"src":"8610:29:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"baseExpression":{"id":5338,"name":"routes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4828,"src":"8641:6:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_RouteData_$4823_storage_$","typeString":"mapping(uint256 => struct CrossSyncGateway.RouteData storage ref)"}},"id":5340,"indexExpression":{"id":5339,"name":"_routeId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5325,"src":"8648:8:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8641:16:28","typeDescriptions":{"typeIdentifier":"t_struct$_RouteData_$4823_storage","typeString":"struct CrossSyncGateway.RouteData storage ref"}},"id":5341,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8658:7:28","memberName":"isValid","nodeType":"MemberAccess","referencedDeclaration":4820,"src":"8641:24:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"expression":{"baseExpression":{"id":5342,"name":"routes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4828,"src":"8667:6:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_RouteData_$4823_storage_$","typeString":"mapping(uint256 => struct CrossSyncGateway.RouteData storage ref)"}},"id":5344,"indexExpression":{"id":5343,"name":"_routeId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5325,"src":"8674:8:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8667:16:28","typeDescriptions":{"typeIdentifier":"t_struct$_RouteData_$4823_storage","typeString":"struct CrossSyncGateway.RouteData storage ref"}},"id":5345,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8684:9:28","memberName":"routeName","nodeType":"MemberAccess","referencedDeclaration":4822,"src":"8667:26:28","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}}],"id":5346,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8609:85:28","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_bool_$_t_string_storage_$","typeString":"tuple(address,bool,string storage ref)"}},"functionReturnParameters":5333,"id":5347,"nodeType":"Return","src":"8602:92:28"}]},"functionSelector":"fa66358a","id":5349,"implemented":true,"kind":"function","modifiers":[],"name":"getRoute","nameLocation":"8514:8:28","nodeType":"FunctionDefinition","parameters":{"id":5326,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5325,"mutability":"mutable","name":"_routeId","nameLocation":"8531:8:28","nodeType":"VariableDeclaration","scope":5349,"src":"8523:16:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5324,"name":"uint256","nodeType":"ElementaryTypeName","src":"8523:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8522:18:28"},"returnParameters":{"id":5333,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5328,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5349,"src":"8562:7:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5327,"name":"address","nodeType":"ElementaryTypeName","src":"8562:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5330,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5349,"src":"8571:4:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5329,"name":"bool","nodeType":"ElementaryTypeName","src":"8571:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":5332,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5349,"src":"8577:13:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5331,"name":"string","nodeType":"ElementaryTypeName","src":"8577:6:28","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8561:30:28"},"scope":6068,"src":"8505:196:28","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":5361,"nodeType":"Block","src":"8780:53:28","statements":[{"expression":{"expression":{"baseExpression":{"id":5356,"name":"routes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4828,"src":"8797:6:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_RouteData_$4823_storage_$","typeString":"mapping(uint256 => struct CrossSyncGateway.RouteData storage ref)"}},"id":5358,"indexExpression":{"id":5357,"name":"_routeId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5351,"src":"8804:8:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8797:16:28","typeDescriptions":{"typeIdentifier":"t_struct$_RouteData_$4823_storage","typeString":"struct CrossSyncGateway.RouteData storage ref"}},"id":5359,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8814:12:28","memberName":"routeAddress","nodeType":"MemberAccess","referencedDeclaration":4818,"src":"8797:29:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":5355,"id":5360,"nodeType":"Return","src":"8790:36:28"}]},"functionSelector":"196c881e","id":5362,"implemented":true,"kind":"function","modifiers":[],"name":"getRouteAddress","nameLocation":"8716:15:28","nodeType":"FunctionDefinition","parameters":{"id":5352,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5351,"mutability":"mutable","name":"_routeId","nameLocation":"8740:8:28","nodeType":"VariableDeclaration","scope":5362,"src":"8732:16:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5350,"name":"uint256","nodeType":"ElementaryTypeName","src":"8732:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8731:18:28"},"returnParameters":{"id":5355,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5354,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5362,"src":"8771:7:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5353,"name":"address","nodeType":"ElementaryTypeName","src":"8771:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8770:9:28"},"scope":6068,"src":"8707:126:28","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":5374,"nodeType":"Block","src":"8910:48:28","statements":[{"expression":{"expression":{"baseExpression":{"id":5369,"name":"routes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4828,"src":"8927:6:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_RouteData_$4823_storage_$","typeString":"mapping(uint256 => struct CrossSyncGateway.RouteData storage ref)"}},"id":5371,"indexExpression":{"id":5370,"name":"_routeId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5364,"src":"8934:8:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8927:16:28","typeDescriptions":{"typeIdentifier":"t_struct$_RouteData_$4823_storage","typeString":"struct CrossSyncGateway.RouteData storage ref"}},"id":5372,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8944:7:28","memberName":"isValid","nodeType":"MemberAccess","referencedDeclaration":4820,"src":"8927:24:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":5368,"id":5373,"nodeType":"Return","src":"8920:31:28"}]},"functionSelector":"59b52ca4","id":5375,"implemented":true,"kind":"function","modifiers":[],"name":"getRouteValidity","nameLocation":"8848:16:28","nodeType":"FunctionDefinition","parameters":{"id":5365,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5364,"mutability":"mutable","name":"_routeId","nameLocation":"8873:8:28","nodeType":"VariableDeclaration","scope":5375,"src":"8865:16:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5363,"name":"uint256","nodeType":"ElementaryTypeName","src":"8865:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8864:18:28"},"returnParameters":{"id":5368,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5367,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5375,"src":"8904:4:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5366,"name":"bool","nodeType":"ElementaryTypeName","src":"8904:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8903:6:28"},"scope":6068,"src":"8839:119:28","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":5387,"nodeType":"Block","src":"9040:50:28","statements":[{"expression":{"expression":{"baseExpression":{"id":5382,"name":"routes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4828,"src":"9057:6:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_RouteData_$4823_storage_$","typeString":"mapping(uint256 => struct CrossSyncGateway.RouteData storage ref)"}},"id":5384,"indexExpression":{"id":5383,"name":"_routeId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5377,"src":"9064:8:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9057:16:28","typeDescriptions":{"typeIdentifier":"t_struct$_RouteData_$4823_storage","typeString":"struct CrossSyncGateway.RouteData storage ref"}},"id":5385,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9074:9:28","memberName":"routeName","nodeType":"MemberAccess","referencedDeclaration":4822,"src":"9057:26:28","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":5381,"id":5386,"nodeType":"Return","src":"9050:33:28"}]},"functionSelector":"d10a0da3","id":5388,"implemented":true,"kind":"function","modifiers":[],"name":"getRouteName","nameLocation":"8973:12:28","nodeType":"FunctionDefinition","parameters":{"id":5378,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5377,"mutability":"mutable","name":"_routeId","nameLocation":"8994:8:28","nodeType":"VariableDeclaration","scope":5388,"src":"8986:16:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5376,"name":"uint256","nodeType":"ElementaryTypeName","src":"8986:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8985:18:28"},"returnParameters":{"id":5381,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5380,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5388,"src":"9025:13:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5379,"name":"string","nodeType":"ElementaryTypeName","src":"9025:6:28","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"9024:15:28"},"scope":6068,"src":"8964:126:28","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":5422,"nodeType":"Block","src":"9184:197:28","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5403,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5398,"name":"_routeAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5392,"src":"9202:13:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":5401,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9227:1:28","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5400,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9219:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5399,"name":"address","nodeType":"ElementaryTypeName","src":"9219:7:28","typeDescriptions":{}}},"id":5402,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9219:10:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9202:27:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4164647265737320302050726f7669646564","id":5404,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9231:20:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_2df9c0582a7db5c520a44442f99074a0a5e79761041b0d05eff67ab98ae7e90f","typeString":"literal_string \"Address 0 Provided\""},"value":"Address 0 Provided"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2df9c0582a7db5c520a44442f99074a0a5e79761041b0d05eff67ab98ae7e90f","typeString":"literal_string \"Address 0 Provided\""}],"id":5397,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9194:7:28","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5405,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9194:58:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5406,"nodeType":"ExpressionStatement","src":"9194:58:28"},{"expression":{"arguments":[{"expression":{"baseExpression":{"id":5408,"name":"routes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4828,"src":"9270:6:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_RouteData_$4823_storage_$","typeString":"mapping(uint256 => struct CrossSyncGateway.RouteData storage ref)"}},"id":5410,"indexExpression":{"id":5409,"name":"_routeId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5390,"src":"9277:8:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9270:16:28","typeDescriptions":{"typeIdentifier":"t_struct$_RouteData_$4823_storage","typeString":"struct CrossSyncGateway.RouteData storage ref"}},"id":5411,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9287:7:28","memberName":"isValid","nodeType":"MemberAccess","referencedDeclaration":4820,"src":"9270:24:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"526f75746520446f6573204e6f74204578697374","id":5412,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9296:22:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_335d8ed5e469b11a1eeb83fe09ff6e5511b4fb0ade2fa5d9f761385eda995778","typeString":"literal_string \"Route Does Not Exist\""},"value":"Route Does Not Exist"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_335d8ed5e469b11a1eeb83fe09ff6e5511b4fb0ade2fa5d9f761385eda995778","typeString":"literal_string \"Route Does Not Exist\""}],"id":5407,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9262:7:28","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5413,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9262:57:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5414,"nodeType":"ExpressionStatement","src":"9262:57:28"},{"expression":{"id":5420,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":5415,"name":"routes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4828,"src":"9329:6:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_RouteData_$4823_storage_$","typeString":"mapping(uint256 => struct CrossSyncGateway.RouteData storage ref)"}},"id":5417,"indexExpression":{"id":5416,"name":"_routeId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5390,"src":"9336:8:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9329:16:28","typeDescriptions":{"typeIdentifier":"t_struct$_RouteData_$4823_storage","typeString":"struct CrossSyncGateway.RouteData storage ref"}},"id":5418,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"9346:12:28","memberName":"routeAddress","nodeType":"MemberAccess","referencedDeclaration":4818,"src":"9329:29:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5419,"name":"_routeAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5392,"src":"9361:13:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9329:45:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5421,"nodeType":"ExpressionStatement","src":"9329:45:28"}]},"functionSelector":"09b7d791","id":5423,"implemented":true,"kind":"function","modifiers":[{"id":5395,"kind":"modifierInvocation","modifierName":{"id":5394,"name":"onlySuperAdmin","nameLocations":["9169:14:28"],"nodeType":"IdentifierPath","referencedDeclaration":4995,"src":"9169:14:28"},"nodeType":"ModifierInvocation","src":"9169:14:28"}],"name":"setRouteAddress","nameLocation":"9105:15:28","nodeType":"FunctionDefinition","parameters":{"id":5393,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5390,"mutability":"mutable","name":"_routeId","nameLocation":"9129:8:28","nodeType":"VariableDeclaration","scope":5423,"src":"9121:16:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5389,"name":"uint256","nodeType":"ElementaryTypeName","src":"9121:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5392,"mutability":"mutable","name":"_routeAddress","nameLocation":"9147:13:28","nodeType":"VariableDeclaration","scope":5423,"src":"9139:21:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5391,"name":"address","nodeType":"ElementaryTypeName","src":"9139:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"9120:41:28"},"returnParameters":{"id":5396,"nodeType":"ParameterList","parameters":[],"src":"9184:0:28"},"scope":6068,"src":"9096:285:28","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":5447,"nodeType":"Block","src":"9468:119:28","statements":[{"expression":{"arguments":[{"expression":{"baseExpression":{"id":5433,"name":"routes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4828,"src":"9486:6:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_RouteData_$4823_storage_$","typeString":"mapping(uint256 => struct CrossSyncGateway.RouteData storage ref)"}},"id":5435,"indexExpression":{"id":5434,"name":"_routeId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5425,"src":"9493:8:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9486:16:28","typeDescriptions":{"typeIdentifier":"t_struct$_RouteData_$4823_storage","typeString":"struct CrossSyncGateway.RouteData storage ref"}},"id":5436,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9503:7:28","memberName":"isValid","nodeType":"MemberAccess","referencedDeclaration":4820,"src":"9486:24:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"526f75746520446f6573204e6f74204578697374","id":5437,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9512:22:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_335d8ed5e469b11a1eeb83fe09ff6e5511b4fb0ade2fa5d9f761385eda995778","typeString":"literal_string \"Route Does Not Exist\""},"value":"Route Does Not Exist"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_335d8ed5e469b11a1eeb83fe09ff6e5511b4fb0ade2fa5d9f761385eda995778","typeString":"literal_string \"Route Does Not Exist\""}],"id":5432,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9478:7:28","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5438,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9478:57:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5439,"nodeType":"ExpressionStatement","src":"9478:57:28"},{"expression":{"id":5445,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":5440,"name":"routes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4828,"src":"9545:6:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_RouteData_$4823_storage_$","typeString":"mapping(uint256 => struct CrossSyncGateway.RouteData storage ref)"}},"id":5442,"indexExpression":{"id":5441,"name":"_routeId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5425,"src":"9552:8:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9545:16:28","typeDescriptions":{"typeIdentifier":"t_struct$_RouteData_$4823_storage","typeString":"struct CrossSyncGateway.RouteData storage ref"}},"id":5443,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"9562:7:28","memberName":"isValid","nodeType":"MemberAccess","referencedDeclaration":4820,"src":"9545:24:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5444,"name":"_isValid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5427,"src":"9572:8:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9545:35:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5446,"nodeType":"ExpressionStatement","src":"9545:35:28"}]},"functionSelector":"005e8eef","id":5448,"implemented":true,"kind":"function","modifiers":[{"id":5430,"kind":"modifierInvocation","modifierName":{"id":5429,"name":"onlySuperAdmin","nameLocations":["9453:14:28"],"nodeType":"IdentifierPath","referencedDeclaration":4995,"src":"9453:14:28"},"nodeType":"ModifierInvocation","src":"9453:14:28"}],"name":"setRouteValidity","nameLocation":"9396:16:28","nodeType":"FunctionDefinition","parameters":{"id":5428,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5425,"mutability":"mutable","name":"_routeId","nameLocation":"9421:8:28","nodeType":"VariableDeclaration","scope":5448,"src":"9413:16:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5424,"name":"uint256","nodeType":"ElementaryTypeName","src":"9413:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5427,"mutability":"mutable","name":"_isValid","nameLocation":"9436:8:28","nodeType":"VariableDeclaration","scope":5448,"src":"9431:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5426,"name":"bool","nodeType":"ElementaryTypeName","src":"9431:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"9412:33:28"},"returnParameters":{"id":5431,"nodeType":"ParameterList","parameters":[],"src":"9468:0:28"},"scope":6068,"src":"9387:200:28","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":5472,"nodeType":"Block","src":"9681:123:28","statements":[{"expression":{"arguments":[{"expression":{"baseExpression":{"id":5458,"name":"routes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4828,"src":"9699:6:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_RouteData_$4823_storage_$","typeString":"mapping(uint256 => struct CrossSyncGateway.RouteData storage ref)"}},"id":5460,"indexExpression":{"id":5459,"name":"_routeId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5450,"src":"9706:8:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9699:16:28","typeDescriptions":{"typeIdentifier":"t_struct$_RouteData_$4823_storage","typeString":"struct CrossSyncGateway.RouteData storage ref"}},"id":5461,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9716:7:28","memberName":"isValid","nodeType":"MemberAccess","referencedDeclaration":4820,"src":"9699:24:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"526f75746520446f6573204e6f74204578697374","id":5462,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9725:22:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_335d8ed5e469b11a1eeb83fe09ff6e5511b4fb0ade2fa5d9f761385eda995778","typeString":"literal_string \"Route Does Not Exist\""},"value":"Route Does Not Exist"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_335d8ed5e469b11a1eeb83fe09ff6e5511b4fb0ade2fa5d9f761385eda995778","typeString":"literal_string \"Route Does Not Exist\""}],"id":5457,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9691:7:28","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5463,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9691:57:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5464,"nodeType":"ExpressionStatement","src":"9691:57:28"},{"expression":{"id":5470,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":5465,"name":"routes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4828,"src":"9758:6:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_RouteData_$4823_storage_$","typeString":"mapping(uint256 => struct CrossSyncGateway.RouteData storage ref)"}},"id":5467,"indexExpression":{"id":5466,"name":"_routeId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5450,"src":"9765:8:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9758:16:28","typeDescriptions":{"typeIdentifier":"t_struct$_RouteData_$4823_storage","typeString":"struct CrossSyncGateway.RouteData storage ref"}},"id":5468,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"9775:9:28","memberName":"routeName","nodeType":"MemberAccess","referencedDeclaration":4822,"src":"9758:26:28","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5469,"name":"_routeName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5452,"src":"9787:10:28","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"9758:39:28","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":5471,"nodeType":"ExpressionStatement","src":"9758:39:28"}]},"functionSelector":"2b33cc87","id":5473,"implemented":true,"kind":"function","modifiers":[{"id":5455,"kind":"modifierInvocation","modifierName":{"id":5454,"name":"onlySuperAdmin","nameLocations":["9666:14:28"],"nodeType":"IdentifierPath","referencedDeclaration":4995,"src":"9666:14:28"},"nodeType":"ModifierInvocation","src":"9666:14:28"}],"name":"setRouteName","nameLocation":"9602:12:28","nodeType":"FunctionDefinition","parameters":{"id":5453,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5450,"mutability":"mutable","name":"_routeId","nameLocation":"9623:8:28","nodeType":"VariableDeclaration","scope":5473,"src":"9615:16:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5449,"name":"uint256","nodeType":"ElementaryTypeName","src":"9615:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5452,"mutability":"mutable","name":"_routeName","nameLocation":"9647:10:28","nodeType":"VariableDeclaration","scope":5473,"src":"9633:24:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5451,"name":"string","nodeType":"ElementaryTypeName","src":"9633:6:28","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"9614:44:28"},"returnParameters":{"id":5456,"nodeType":"ParameterList","parameters":[],"src":"9681:0:28"},"scope":6068,"src":"9593:211:28","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"anonymous":false,"eventSelector":"054aafb6abefe1f281ccb11a7597dc7e2f13418168020924f176af9492821cac","id":5487,"name":"SyncFeeCollected","nameLocation":"9965:16:28","nodeType":"EventDefinition","parameters":{"id":5486,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5475,"indexed":false,"mutability":"mutable","name":"from","nameLocation":"9990:4:28","nodeType":"VariableDeclaration","scope":5487,"src":"9982:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5474,"name":"address","nodeType":"ElementaryTypeName","src":"9982:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5477,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"10004:6:28","nodeType":"VariableDeclaration","scope":5487,"src":"9996:14:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5476,"name":"uint256","nodeType":"ElementaryTypeName","src":"9996:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5479,"indexed":false,"mutability":"mutable","name":"feeAddress","nameLocation":"10020:10:28","nodeType":"VariableDeclaration","scope":5487,"src":"10012:18:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5478,"name":"address","nodeType":"ElementaryTypeName","src":"10012:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5481,"indexed":true,"mutability":"mutable","name":"destinationChainId","nameLocation":"10048:18:28","nodeType":"VariableDeclaration","scope":5487,"src":"10032:34:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5480,"name":"uint256","nodeType":"ElementaryTypeName","src":"10032:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5483,"indexed":true,"mutability":"mutable","name":"routeId","nameLocation":"10084:7:28","nodeType":"VariableDeclaration","scope":5487,"src":"10068:23:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5482,"name":"uint256","nodeType":"ElementaryTypeName","src":"10068:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5485,"indexed":false,"mutability":"mutable","name":"gasLimit","nameLocation":"10101:8:28","nodeType":"VariableDeclaration","scope":5487,"src":"10093:16:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5484,"name":"uint256","nodeType":"ElementaryTypeName","src":"10093:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9981:129:28"},"src":"9959:152:28"},{"baseFunctions":[6248],"body":{"id":5499,"nodeType":"Block","src":"10367:41:28","statements":[{"expression":{"arguments":[{"id":5496,"name":"_payload","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5489,"src":"10392:8:28","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":5495,"name":"_handleReceive","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5534,"src":"10377:14:28","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes_calldata_ptr_$returns$__$","typeString":"function (bytes calldata)"}},"id":5497,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10377:24:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5498,"nodeType":"ExpressionStatement","src":"10377:24:28"}]},"functionSelector":"e34381a1","id":5500,"implemented":true,"kind":"function","modifiers":[{"id":5493,"kind":"modifierInvocation","modifierName":{"id":5492,"name":"nonReentrant","nameLocations":["10355:12:28"],"nodeType":"IdentifierPath","referencedDeclaration":1576,"src":"10355:12:28"},"nodeType":"ModifierInvocation","src":"10355:12:28"}],"name":"handleReceive","nameLocation":"10284:13:28","nodeType":"FunctionDefinition","overrides":{"id":5491,"nodeType":"OverrideSpecifier","overrides":[],"src":"10346:8:28"},"parameters":{"id":5490,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5489,"mutability":"mutable","name":"_payload","nameLocation":"10322:8:28","nodeType":"VariableDeclaration","scope":5500,"src":"10307:23:28","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":5488,"name":"bytes","nodeType":"ElementaryTypeName","src":"10307:5:28","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"10297:39:28"},"returnParameters":{"id":5494,"nodeType":"ParameterList","parameters":[],"src":"10367:0:28"},"scope":6068,"src":"10275:133:28","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":5533,"nodeType":"Block","src":"10472:1038:28","statements":[{"assignments":[5509],"declarations":[{"constant":false,"id":5509,"mutability":"mutable","name":"decodePayload","nameLocation":"10528:13:28","nodeType":"VariableDeclaration","scope":5533,"src":"10482:59:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_ICrossSyncMessagingData_$6284_memory_ptr","typeString":"struct IMessagingImpl.ICrossSyncMessagingData"},"typeName":{"id":5508,"nodeType":"UserDefinedTypeName","pathNode":{"id":5507,"name":"IMessagingImpl.ICrossSyncMessagingData","nameLocations":["10482:14:28","10497:23:28"],"nodeType":"IdentifierPath","referencedDeclaration":6284,"src":"10482:38:28"},"referencedDeclaration":6284,"src":"10482:38:28","typeDescriptions":{"typeIdentifier":"t_struct$_ICrossSyncMessagingData_$6284_storage_ptr","typeString":"struct IMessagingImpl.ICrossSyncMessagingData"}},"visibility":"internal"}],"id":5517,"initialValue":{"arguments":[{"id":5512,"name":"_payload","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5502,"src":"10555:8:28","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},{"components":[{"expression":{"id":5513,"name":"IMessagingImpl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6325,"src":"10566:14:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMessagingImpl_$6325_$","typeString":"type(contract IMessagingImpl)"}},"id":5514,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10581:23:28","memberName":"ICrossSyncMessagingData","nodeType":"MemberAccess","referencedDeclaration":6284,"src":"10566:38:28","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_ICrossSyncMessagingData_$6284_storage_ptr_$","typeString":"type(struct IMessagingImpl.ICrossSyncMessagingData storage pointer)"}}],"id":5515,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10565:40:28","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_ICrossSyncMessagingData_$6284_storage_ptr_$","typeString":"type(struct IMessagingImpl.ICrossSyncMessagingData storage pointer)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"},{"typeIdentifier":"t_type$_t_struct$_ICrossSyncMessagingData_$6284_storage_ptr_$","typeString":"type(struct IMessagingImpl.ICrossSyncMessagingData storage pointer)"}],"expression":{"id":5510,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"10544:3:28","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":5511,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"10548:6:28","memberName":"decode","nodeType":"MemberAccess","src":"10544:10:28","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":5516,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10544:62:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_ICrossSyncMessagingData_$6284_memory_ptr","typeString":"struct IMessagingImpl.ICrossSyncMessagingData memory"}},"nodeType":"VariableDeclarationStatement","src":"10482:124:28"},{"expression":{"arguments":[{"expression":{"id":5524,"name":"decodePayload","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5509,"src":"11380:13:28","typeDescriptions":{"typeIdentifier":"t_struct$_ICrossSyncMessagingData_$6284_memory_ptr","typeString":"struct IMessagingImpl.ICrossSyncMessagingData memory"}},"id":5525,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11394:13:28","memberName":"sourceChainId","nodeType":"MemberAccess","referencedDeclaration":6274,"src":"11380:27:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":5526,"name":"decodePayload","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5509,"src":"11421:13:28","typeDescriptions":{"typeIdentifier":"t_struct$_ICrossSyncMessagingData_$6284_memory_ptr","typeString":"struct IMessagingImpl.ICrossSyncMessagingData memory"}},"id":5527,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11435:6:28","memberName":"sender","nodeType":"MemberAccess","referencedDeclaration":6268,"src":"11421:20:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"expression":{"id":5528,"name":"decodePayload","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5509,"src":"11455:13:28","typeDescriptions":{"typeIdentifier":"t_struct$_ICrossSyncMessagingData_$6284_memory_ptr","typeString":"struct IMessagingImpl.ICrossSyncMessagingData memory"}},"id":5529,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11469:7:28","memberName":"payload","nodeType":"MemberAccess","referencedDeclaration":6283,"src":"11455:21:28","typeDescriptions":{"typeIdentifier":"t_struct$_MessagingPayload_$6211_memory_ptr","typeString":"struct ICrossSyncGateway.MessagingPayload memory"}},"id":5530,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11477:4:28","memberName":"data","nodeType":"MemberAccess","referencedDeclaration":6210,"src":"11455:26:28","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"expression":{"expression":{"id":5519,"name":"decodePayload","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5509,"src":"11326:13:28","typeDescriptions":{"typeIdentifier":"t_struct$_ICrossSyncMessagingData_$6284_memory_ptr","typeString":"struct IMessagingImpl.ICrossSyncMessagingData memory"}},"id":5520,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11340:7:28","memberName":"payload","nodeType":"MemberAccess","referencedDeclaration":6283,"src":"11326:21:28","typeDescriptions":{"typeIdentifier":"t_struct$_MessagingPayload_$6211_memory_ptr","typeString":"struct ICrossSyncGateway.MessagingPayload memory"}},"id":5521,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11348:2:28","memberName":"to","nodeType":"MemberAccess","referencedDeclaration":6208,"src":"11326:24:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5518,"name":"ICrossSyncReceiverImplementer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6262,"src":"11296:29:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ICrossSyncReceiverImplementer_$6262_$","typeString":"type(contract ICrossSyncReceiverImplementer)"}},"id":5522,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11296:55:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_ICrossSyncReceiverImplementer_$6262","typeString":"contract ICrossSyncReceiverImplementer"}},"id":5523,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11352:14:28","memberName":"receiveMessage","nodeType":"MemberAccess","referencedDeclaration":6261,"src":"11296:70:28","typeDescriptions":{"typeIdentifier":"t_function_external_payable$_t_uint256_$_t_address_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (uint256,address,bytes memory) payable external"}},"id":5531,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11296:195:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5532,"nodeType":"ExpressionStatement","src":"11296:195:28"}]},"id":5534,"implemented":true,"kind":"function","modifiers":[],"name":"_handleReceive","nameLocation":"10423:14:28","nodeType":"FunctionDefinition","parameters":{"id":5503,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5502,"mutability":"mutable","name":"_payload","nameLocation":"10453:8:28","nodeType":"VariableDeclaration","scope":5534,"src":"10438:23:28","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":5501,"name":"bytes","nodeType":"ElementaryTypeName","src":"10438:5:28","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"10437:25:28"},"returnParameters":{"id":5504,"nodeType":"ParameterList","parameters":[],"src":"10472:0:28"},"scope":6068,"src":"10414:1096:28","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[6225],"body":{"id":5682,"nodeType":"Block","src":"11740:1432:28","statements":[{"expression":{"arguments":[{"expression":{"baseExpression":{"id":5550,"name":"routes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4828,"src":"11758:6:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_RouteData_$4823_storage_$","typeString":"mapping(uint256 => struct CrossSyncGateway.RouteData storage ref)"}},"id":5552,"indexExpression":{"id":5551,"name":"_routeId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5538,"src":"11765:8:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11758:16:28","typeDescriptions":{"typeIdentifier":"t_struct$_RouteData_$4823_storage","typeString":"struct CrossSyncGateway.RouteData storage ref"}},"id":5553,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11775:7:28","memberName":"isValid","nodeType":"MemberAccess","referencedDeclaration":4820,"src":"11758:24:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"526f75746520446f6573204e6f74204578697374","id":5554,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11784:22:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_335d8ed5e469b11a1eeb83fe09ff6e5511b4fb0ade2fa5d9f761385eda995778","typeString":"literal_string \"Route Does Not Exist\""},"value":"Route Does Not Exist"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_335d8ed5e469b11a1eeb83fe09ff6e5511b4fb0ade2fa5d9f761385eda995778","typeString":"literal_string \"Route Does Not Exist\""}],"id":5549,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11750:7:28","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5555,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11750:57:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5556,"nodeType":"ExpressionStatement","src":"11750:57:28"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5564,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5558,"name":"_payload","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5541,"src":"11825:8:28","typeDescriptions":{"typeIdentifier":"t_struct$_MessagingPayload_$6211_memory_ptr","typeString":"struct ICrossSyncGateway.MessagingPayload memory"}},"id":5559,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11834:2:28","memberName":"to","nodeType":"MemberAccess","referencedDeclaration":6208,"src":"11825:11:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":5562,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11848:1:28","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5561,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11840:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5560,"name":"address","nodeType":"ElementaryTypeName","src":"11840:7:28","typeDescriptions":{}}},"id":5563,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11840:10:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11825:25:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4164647265737320302050726f7669646564","id":5565,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11852:20:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_2df9c0582a7db5c520a44442f99074a0a5e79761041b0d05eff67ab98ae7e90f","typeString":"literal_string \"Address 0 Provided\""},"value":"Address 0 Provided"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2df9c0582a7db5c520a44442f99074a0a5e79761041b0d05eff67ab98ae7e90f","typeString":"literal_string \"Address 0 Provided\""}],"id":5557,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11817:7:28","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5566,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11817:56:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5567,"nodeType":"ExpressionStatement","src":"11817:56:28"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5572,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5569,"name":"_destinationChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5536,"src":"11891:19:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":5570,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"11914:5:28","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":5571,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11920:7:28","memberName":"chainid","nodeType":"MemberAccess","src":"11914:13:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11891:36:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"536f7572636520616e642044657374696e6174696f6e20436861696e20496473206172652073616d65","id":5573,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11929:43:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_4a6a94b79dd551392a9696eb28a17ef4a2572b10f9947b689cf02cb6df84071a","typeString":"literal_string \"Source and Destination Chain Ids are same\""},"value":"Source and Destination Chain Ids are same"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_4a6a94b79dd551392a9696eb28a17ef4a2572b10f9947b689cf02cb6df84071a","typeString":"literal_string \"Source and Destination Chain Ids are same\""}],"id":5568,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11883:7:28","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5574,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11883:90:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5575,"nodeType":"ExpressionStatement","src":"11883:90:28"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5584,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":5577,"name":"destChainGatewayAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4832,"src":"11991:23:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":5579,"indexExpression":{"id":5578,"name":"_destinationChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5536,"src":"12015:19:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11991:44:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":5582,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12047:1:28","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5581,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12039:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5580,"name":"address","nodeType":"ElementaryTypeName","src":"12039:7:28","typeDescriptions":{}}},"id":5583,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12039:10:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11991:58:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"44657374696e6174696f6e20436861696e20476174657761792041646472657373206973206e6f7420736574","id":5585,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12051:46:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_3eb0fd498a5b295e44f6a1eeac24c97b9bcab846ebbc7eee4a7aadfc106bc1a4","typeString":"literal_string \"Destination Chain Gateway Address is not set\""},"value":"Destination Chain Gateway Address is not set"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3eb0fd498a5b295e44f6a1eeac24c97b9bcab846ebbc7eee4a7aadfc106bc1a4","typeString":"literal_string \"Destination Chain Gateway Address is not set\""}],"id":5576,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11983:7:28","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5586,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11983:115:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5587,"nodeType":"ExpressionStatement","src":"11983:115:28"},{"assignments":[5589],"declarations":[{"constant":false,"id":5589,"mutability":"mutable","name":"syncFee","nameLocation":"12194:7:28","nodeType":"VariableDeclaration","scope":5682,"src":"12186:15:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5588,"name":"uint256","nodeType":"ElementaryTypeName","src":"12186:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5594,"initialValue":{"arguments":[{"expression":{"id":5591,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"12215:3:28","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5592,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12219:5:28","memberName":"value","nodeType":"MemberAccess","src":"12215:9:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5590,"name":"getSyncFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5821,"src":"12204:10:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view returns (uint256)"}},"id":5593,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12204:21:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12186:39:28"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5599,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5596,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"12243:3:28","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5597,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12247:5:28","memberName":"value","nodeType":"MemberAccess","src":"12243:9:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":5598,"name":"syncFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5589,"src":"12256:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12243:20:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"52656c61796572286d73672e76616c75652920466565206973206c657373207468616e2073796e63466565","id":5600,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12265:45:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_2eb10ffd30f8d4c68bdb1c0c6ba9211451cfa7b34f80d997ac866fd88cf6fe44","typeString":"literal_string \"Relayer(msg.value) Fee is less than syncFee\""},"value":"Relayer(msg.value) Fee is less than syncFee"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2eb10ffd30f8d4c68bdb1c0c6ba9211451cfa7b34f80d997ac866fd88cf6fe44","typeString":"literal_string \"Relayer(msg.value) Fee is less than syncFee\""}],"id":5595,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"12235:7:28","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5601,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12235:76:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5602,"nodeType":"ExpressionStatement","src":"12235:76:28"},{"assignments":[5604],"declarations":[{"constant":false,"id":5604,"mutability":"mutable","name":"messengerFee","nameLocation":"12329:12:28","nodeType":"VariableDeclaration","scope":5682,"src":"12321:20:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5603,"name":"uint256","nodeType":"ElementaryTypeName","src":"12321:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5609,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5608,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5605,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"12344:3:28","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5606,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12348:5:28","memberName":"value","nodeType":"MemberAccess","src":"12344:9:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":5607,"name":"syncFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5589,"src":"12356:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12344:19:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12321:42:28"},{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":5611,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[5987],"referencedDeclaration":5987,"src":"12396:10:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5612,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12396:12:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5613,"name":"_destinationChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5536,"src":"12410:19:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5614,"name":"_routeId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5538,"src":"12431:8:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5615,"name":"_gasLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5543,"src":"12441:9:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5616,"name":"syncFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5589,"src":"12452:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5610,"name":"_transferNativeSyncFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5862,"src":"12373:22:28","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256,uint256,uint256)"}},"id":5617,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12373:87:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5618,"nodeType":"ExpressionStatement","src":"12373:87:28"},{"assignments":[5623],"declarations":[{"constant":false,"id":5623,"mutability":"mutable","name":"crossSyncPayload","nameLocation":"12518:16:28","nodeType":"VariableDeclaration","scope":5682,"src":"12472:62:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_ICrossSyncMessagingData_$6284_memory_ptr","typeString":"struct IMessagingImpl.ICrossSyncMessagingData"},"typeName":{"id":5622,"nodeType":"UserDefinedTypeName","pathNode":{"id":5621,"name":"IMessagingImpl.ICrossSyncMessagingData","nameLocations":["12472:14:28","12487:23:28"],"nodeType":"IdentifierPath","referencedDeclaration":6284,"src":"12472:38:28"},"referencedDeclaration":6284,"src":"12472:38:28","typeDescriptions":{"typeIdentifier":"t_struct$_ICrossSyncMessagingData_$6284_storage_ptr","typeString":"struct IMessagingImpl.ICrossSyncMessagingData"}},"visibility":"internal"}],"id":5650,"initialValue":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":5626,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[5987],"referencedDeclaration":5987,"src":"12589:10:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5627,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12589:12:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"baseExpression":{"baseExpression":{"id":5628,"name":"sentUserNonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4840,"src":"12615:13:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_uint256_$_$_$","typeString":"mapping(address => mapping(uint256 => mapping(uint256 => uint256)))"}},"id":5631,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":5629,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[5987],"referencedDeclaration":5987,"src":"12629:10:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5630,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12629:12:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12615:27:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(uint256 => uint256))"}},"id":5634,"indexExpression":{"expression":{"id":5632,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"12643:5:28","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":5633,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12649:7:28","memberName":"chainid","nodeType":"MemberAccess","src":"12643:13:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12615:42:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":5636,"indexExpression":{"id":5635,"name":"_destinationChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5536,"src":"12658:19:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12615:63:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5637,"name":"_routeId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5538,"src":"12692:8:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":5638,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"12714:5:28","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":5639,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12720:7:28","memberName":"chainid","nodeType":"MemberAccess","src":"12714:13:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5640,"name":"_destinationChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5536,"src":"12741:19:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":5643,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"12782:4:28","typeDescriptions":{"typeIdentifier":"t_contract$_CrossSyncGateway_$6068","typeString":"contract CrossSyncGateway"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_CrossSyncGateway_$6068","typeString":"contract CrossSyncGateway"}],"id":5642,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12774:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5641,"name":"address","nodeType":"ElementaryTypeName","src":"12774:7:28","typeDescriptions":{}}},"id":5644,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12774:13:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":5645,"name":"destChainGatewayAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4832,"src":"12801:23:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":5647,"indexExpression":{"id":5646,"name":"_destinationChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5536,"src":"12825:19:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12801:44:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5648,"name":"_payload","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5541,"src":"12897:8:28","typeDescriptions":{"typeIdentifier":"t_struct$_MessagingPayload_$6211_memory_ptr","typeString":"struct ICrossSyncGateway.MessagingPayload memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_struct$_MessagingPayload_$6211_memory_ptr","typeString":"struct ICrossSyncGateway.MessagingPayload memory"}],"expression":{"id":5624,"name":"IMessagingImpl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6325,"src":"12537:14:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMessagingImpl_$6325_$","typeString":"type(contract IMessagingImpl)"}},"id":5625,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12552:23:28","memberName":"ICrossSyncMessagingData","nodeType":"MemberAccess","referencedDeclaration":6284,"src":"12537:38:28","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_ICrossSyncMessagingData_$6284_storage_ptr_$","typeString":"type(struct IMessagingImpl.ICrossSyncMessagingData storage pointer)"}},"id":5649,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12537:378:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_ICrossSyncMessagingData_$6284_memory_ptr","typeString":"struct IMessagingImpl.ICrossSyncMessagingData memory"}},"nodeType":"VariableDeclarationStatement","src":"12472:443:28"},{"expression":{"id":5661,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"baseExpression":{"id":5651,"name":"sentUserNonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4840,"src":"12926:13:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_uint256_$_$_$","typeString":"mapping(address => mapping(uint256 => mapping(uint256 => uint256)))"}},"id":5657,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":5652,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[5987],"referencedDeclaration":5987,"src":"12940:10:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5653,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12940:12:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12926:27:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(uint256 => uint256))"}},"id":5658,"indexExpression":{"expression":{"id":5654,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"12954:5:28","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":5655,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12960:7:28","memberName":"chainid","nodeType":"MemberAccess","src":"12954:13:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12926:42:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":5659,"indexExpression":{"id":5656,"name":"_destinationChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5536,"src":"12969:19:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12926:63:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":5660,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12993:1:28","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12926:68:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5662,"nodeType":"ExpressionStatement","src":"12926:68:28"},{"assignments":[5665],"declarations":[{"constant":false,"id":5665,"mutability":"mutable","name":"messenger","nameLocation":"13020:9:28","nodeType":"VariableDeclaration","scope":5682,"src":"13005:24:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IMessagingImpl_$6325","typeString":"contract IMessagingImpl"},"typeName":{"id":5664,"nodeType":"UserDefinedTypeName","pathNode":{"id":5663,"name":"IMessagingImpl","nameLocations":["13005:14:28"],"nodeType":"IdentifierPath","referencedDeclaration":6325,"src":"13005:14:28"},"referencedDeclaration":6325,"src":"13005:14:28","typeDescriptions":{"typeIdentifier":"t_contract$_IMessagingImpl_$6325","typeString":"contract IMessagingImpl"}},"visibility":"internal"}],"id":5672,"initialValue":{"arguments":[{"expression":{"baseExpression":{"id":5667,"name":"routes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4828,"src":"13047:6:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_RouteData_$4823_storage_$","typeString":"mapping(uint256 => struct CrossSyncGateway.RouteData storage ref)"}},"id":5669,"indexExpression":{"id":5668,"name":"_routeId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5538,"src":"13054:8:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13047:16:28","typeDescriptions":{"typeIdentifier":"t_struct$_RouteData_$4823_storage","typeString":"struct CrossSyncGateway.RouteData storage ref"}},"id":5670,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13064:12:28","memberName":"routeAddress","nodeType":"MemberAccess","referencedDeclaration":4818,"src":"13047:29:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5666,"name":"IMessagingImpl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6325,"src":"13032:14:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMessagingImpl_$6325_$","typeString":"type(contract IMessagingImpl)"}},"id":5671,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13032:45:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IMessagingImpl_$6325","typeString":"contract IMessagingImpl"}},"nodeType":"VariableDeclarationStatement","src":"13005:72:28"},{"expression":{"arguments":[{"id":5678,"name":"crossSyncPayload","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5623,"src":"13137:16:28","typeDescriptions":{"typeIdentifier":"t_struct$_ICrossSyncMessagingData_$6284_memory_ptr","typeString":"struct IMessagingImpl.ICrossSyncMessagingData memory"}},{"id":5679,"name":"_gasLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5543,"src":"13155:9:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_ICrossSyncMessagingData_$6284_memory_ptr","typeString":"struct IMessagingImpl.ICrossSyncMessagingData memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_ICrossSyncMessagingData_$6284_memory_ptr","typeString":"struct IMessagingImpl.ICrossSyncMessagingData memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5673,"name":"messenger","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5665,"src":"13087:9:28","typeDescriptions":{"typeIdentifier":"t_contract$_IMessagingImpl_$6325","typeString":"contract IMessagingImpl"}},"id":5675,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13097:18:28","memberName":"executeSendMessage","nodeType":"MemberAccess","referencedDeclaration":6314,"src":"13087:28:28","typeDescriptions":{"typeIdentifier":"t_function_external_payable$_t_struct$_ICrossSyncMessagingData_$6284_memory_ptr_$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (struct IMessagingImpl.ICrossSyncMessagingData memory,uint256) payable external returns (bytes memory)"}},"id":5677,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":5676,"name":"messengerFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5604,"src":"13123:12:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"13087:49:28","typeDescriptions":{"typeIdentifier":"t_function_external_payable$_t_struct$_ICrossSyncMessagingData_$6284_memory_ptr_$_t_uint256_$returns$_t_bytes_memory_ptr_$value","typeString":"function (struct IMessagingImpl.ICrossSyncMessagingData memory,uint256) payable external returns (bytes memory)"}},"id":5680,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13087:78:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":5681,"nodeType":"ExpressionStatement","src":"13087:78:28"}]},"functionSelector":"5c96a561","id":5683,"implemented":true,"kind":"function","modifiers":[],"name":"sendMessage","nameLocation":"11525:11:28","nodeType":"FunctionDefinition","overrides":{"id":5547,"nodeType":"OverrideSpecifier","overrides":[],"src":"11715:8:28"},"parameters":{"id":5546,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5536,"mutability":"mutable","name":"_destinationChainId","nameLocation":"11546:19:28","nodeType":"VariableDeclaration","scope":5683,"src":"11538:27:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5535,"name":"uint256","nodeType":"ElementaryTypeName","src":"11538:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5538,"mutability":"mutable","name":"_routeId","nameLocation":"11583:8:28","nodeType":"VariableDeclaration","scope":5683,"src":"11575:16:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5537,"name":"uint256","nodeType":"ElementaryTypeName","src":"11575:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5541,"mutability":"mutable","name":"_payload","nameLocation":"11643:8:28","nodeType":"VariableDeclaration","scope":5683,"src":"11601:50:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_MessagingPayload_$6211_memory_ptr","typeString":"struct ICrossSyncGateway.MessagingPayload"},"typeName":{"id":5540,"nodeType":"UserDefinedTypeName","pathNode":{"id":5539,"name":"ICrossSyncGateway.MessagingPayload","nameLocations":["11601:17:28","11619:16:28"],"nodeType":"IdentifierPath","referencedDeclaration":6211,"src":"11601:34:28"},"referencedDeclaration":6211,"src":"11601:34:28","typeDescriptions":{"typeIdentifier":"t_struct$_MessagingPayload_$6211_storage_ptr","typeString":"struct ICrossSyncGateway.MessagingPayload"}},"visibility":"internal"},{"constant":false,"id":5543,"mutability":"mutable","name":"_gasLimit","nameLocation":"11669:9:28","nodeType":"VariableDeclaration","scope":5683,"src":"11661:17:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5542,"name":"uint256","nodeType":"ElementaryTypeName","src":"11661:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5545,"mutability":"mutable","name":"_routeData","nameLocation":"11703:10:28","nodeType":"VariableDeclaration","scope":5683,"src":"11688:25:28","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":5544,"name":"bytes","nodeType":"ElementaryTypeName","src":"11688:5:28","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"11536:178:28"},"returnParameters":{"id":5548,"nodeType":"ParameterList","parameters":[],"src":"11740:0:28"},"scope":6068,"src":"11516:1656:28","stateMutability":"payable","virtual":false,"visibility":"public"},{"baseFunctions":[6239],"body":{"id":5801,"nodeType":"Block","src":"13379:1071:28","statements":[{"expression":{"arguments":[{"expression":{"baseExpression":{"id":5699,"name":"routes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4828,"src":"13397:6:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_RouteData_$4823_storage_$","typeString":"mapping(uint256 => struct CrossSyncGateway.RouteData storage ref)"}},"id":5701,"indexExpression":{"id":5700,"name":"_routeId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5687,"src":"13404:8:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13397:16:28","typeDescriptions":{"typeIdentifier":"t_struct$_RouteData_$4823_storage","typeString":"struct CrossSyncGateway.RouteData storage ref"}},"id":5702,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13414:7:28","memberName":"isValid","nodeType":"MemberAccess","referencedDeclaration":4820,"src":"13397:24:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"526f75746520446f6573204e6f74204578697374","id":5703,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13423:22:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_335d8ed5e469b11a1eeb83fe09ff6e5511b4fb0ade2fa5d9f761385eda995778","typeString":"literal_string \"Route Does Not Exist\""},"value":"Route Does Not Exist"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_335d8ed5e469b11a1eeb83fe09ff6e5511b4fb0ade2fa5d9f761385eda995778","typeString":"literal_string \"Route Does Not Exist\""}],"id":5698,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"13389:7:28","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5704,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13389:57:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5705,"nodeType":"ExpressionStatement","src":"13389:57:28"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5713,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5707,"name":"_payload","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5690,"src":"13464:8:28","typeDescriptions":{"typeIdentifier":"t_struct$_MessagingPayload_$6211_calldata_ptr","typeString":"struct ICrossSyncGateway.MessagingPayload calldata"}},"id":5708,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13473:2:28","memberName":"to","nodeType":"MemberAccess","referencedDeclaration":6208,"src":"13464:11:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":5711,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13487:1:28","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5710,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13479:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5709,"name":"address","nodeType":"ElementaryTypeName","src":"13479:7:28","typeDescriptions":{}}},"id":5712,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13479:10:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"13464:25:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4164647265737320302050726f7669646564","id":5714,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13491:20:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_2df9c0582a7db5c520a44442f99074a0a5e79761041b0d05eff67ab98ae7e90f","typeString":"literal_string \"Address 0 Provided\""},"value":"Address 0 Provided"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2df9c0582a7db5c520a44442f99074a0a5e79761041b0d05eff67ab98ae7e90f","typeString":"literal_string \"Address 0 Provided\""}],"id":5706,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"13456:7:28","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5715,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13456:56:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5716,"nodeType":"ExpressionStatement","src":"13456:56:28"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5721,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5718,"name":"_destinationChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5685,"src":"13530:19:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":5719,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"13553:5:28","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":5720,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13559:7:28","memberName":"chainid","nodeType":"MemberAccess","src":"13553:13:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13530:36:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"536f7572636520616e642044657374696e6174696f6e20436861696e20496473206172652073616d65","id":5722,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13568:43:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_4a6a94b79dd551392a9696eb28a17ef4a2572b10f9947b689cf02cb6df84071a","typeString":"literal_string \"Source and Destination Chain Ids are same\""},"value":"Source and Destination Chain Ids are same"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_4a6a94b79dd551392a9696eb28a17ef4a2572b10f9947b689cf02cb6df84071a","typeString":"literal_string \"Source and Destination Chain Ids are same\""}],"id":5717,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"13522:7:28","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5723,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13522:90:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5724,"nodeType":"ExpressionStatement","src":"13522:90:28"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5733,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":5726,"name":"destChainGatewayAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4832,"src":"13630:23:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":5728,"indexExpression":{"id":5727,"name":"_destinationChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5685,"src":"13654:19:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13630:44:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":5731,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13686:1:28","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5730,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13678:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5729,"name":"address","nodeType":"ElementaryTypeName","src":"13678:7:28","typeDescriptions":{}}},"id":5732,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13678:10:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"13630:58:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"44657374696e6174696f6e20436861696e20476174657761792041646472657373206973206e6f7420736574","id":5734,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13690:46:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_3eb0fd498a5b295e44f6a1eeac24c97b9bcab846ebbc7eee4a7aadfc106bc1a4","typeString":"literal_string \"Destination Chain Gateway Address is not set\""},"value":"Destination Chain Gateway Address is not set"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3eb0fd498a5b295e44f6a1eeac24c97b9bcab846ebbc7eee4a7aadfc106bc1a4","typeString":"literal_string \"Destination Chain Gateway Address is not set\""}],"id":5725,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"13622:7:28","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5735,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13622:115:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5736,"nodeType":"ExpressionStatement","src":"13622:115:28"},{"assignments":[5741],"declarations":[{"constant":false,"id":5741,"mutability":"mutable","name":"crossSyncPayload","nameLocation":"13794:16:28","nodeType":"VariableDeclaration","scope":5801,"src":"13748:62:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_ICrossSyncMessagingData_$6284_memory_ptr","typeString":"struct IMessagingImpl.ICrossSyncMessagingData"},"typeName":{"id":5740,"nodeType":"UserDefinedTypeName","pathNode":{"id":5739,"name":"IMessagingImpl.ICrossSyncMessagingData","nameLocations":["13748:14:28","13763:23:28"],"nodeType":"IdentifierPath","referencedDeclaration":6284,"src":"13748:38:28"},"referencedDeclaration":6284,"src":"13748:38:28","typeDescriptions":{"typeIdentifier":"t_struct$_ICrossSyncMessagingData_$6284_storage_ptr","typeString":"struct IMessagingImpl.ICrossSyncMessagingData"}},"visibility":"internal"}],"id":5768,"initialValue":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":5744,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[5987],"referencedDeclaration":5987,"src":"13865:10:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5745,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13865:12:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"baseExpression":{"baseExpression":{"id":5746,"name":"sentUserNonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4840,"src":"13891:13:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_uint256_$_$_$","typeString":"mapping(address => mapping(uint256 => mapping(uint256 => uint256)))"}},"id":5749,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":5747,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[5987],"referencedDeclaration":5987,"src":"13905:10:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5748,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13905:12:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13891:27:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(uint256 => uint256))"}},"id":5752,"indexExpression":{"expression":{"id":5750,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"13919:5:28","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":5751,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13925:7:28","memberName":"chainid","nodeType":"MemberAccess","src":"13919:13:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13891:42:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":5754,"indexExpression":{"id":5753,"name":"_destinationChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5685,"src":"13934:19:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13891:63:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5755,"name":"_routeId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5687,"src":"13968:8:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":5756,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"13990:5:28","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":5757,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13996:7:28","memberName":"chainid","nodeType":"MemberAccess","src":"13990:13:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5758,"name":"_destinationChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5685,"src":"14017:19:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":5761,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"14058:4:28","typeDescriptions":{"typeIdentifier":"t_contract$_CrossSyncGateway_$6068","typeString":"contract CrossSyncGateway"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_CrossSyncGateway_$6068","typeString":"contract CrossSyncGateway"}],"id":5760,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14050:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5759,"name":"address","nodeType":"ElementaryTypeName","src":"14050:7:28","typeDescriptions":{}}},"id":5762,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14050:13:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":5763,"name":"destChainGatewayAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4832,"src":"14077:23:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":5765,"indexExpression":{"id":5764,"name":"_destinationChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5685,"src":"14101:19:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"14077:44:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5766,"name":"_payload","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5690,"src":"14135:8:28","typeDescriptions":{"typeIdentifier":"t_struct$_MessagingPayload_$6211_calldata_ptr","typeString":"struct ICrossSyncGateway.MessagingPayload calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_struct$_MessagingPayload_$6211_calldata_ptr","typeString":"struct ICrossSyncGateway.MessagingPayload calldata"}],"expression":{"id":5742,"name":"IMessagingImpl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6325,"src":"13813:14:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMessagingImpl_$6325_$","typeString":"type(contract IMessagingImpl)"}},"id":5743,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13828:23:28","memberName":"ICrossSyncMessagingData","nodeType":"MemberAccess","referencedDeclaration":6284,"src":"13813:38:28","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_ICrossSyncMessagingData_$6284_storage_ptr_$","typeString":"type(struct IMessagingImpl.ICrossSyncMessagingData storage pointer)"}},"id":5767,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13813:340:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_ICrossSyncMessagingData_$6284_memory_ptr","typeString":"struct IMessagingImpl.ICrossSyncMessagingData memory"}},"nodeType":"VariableDeclarationStatement","src":"13748:405:28"},{"assignments":[5771],"declarations":[{"constant":false,"id":5771,"mutability":"mutable","name":"messenger","nameLocation":"14180:9:28","nodeType":"VariableDeclaration","scope":5801,"src":"14165:24:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IMessagingImpl_$6325","typeString":"contract IMessagingImpl"},"typeName":{"id":5770,"nodeType":"UserDefinedTypeName","pathNode":{"id":5769,"name":"IMessagingImpl","nameLocations":["14165:14:28"],"nodeType":"IdentifierPath","referencedDeclaration":6325,"src":"14165:14:28"},"referencedDeclaration":6325,"src":"14165:14:28","typeDescriptions":{"typeIdentifier":"t_contract$_IMessagingImpl_$6325","typeString":"contract IMessagingImpl"}},"visibility":"internal"}],"id":5778,"initialValue":{"arguments":[{"expression":{"baseExpression":{"id":5773,"name":"routes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4828,"src":"14207:6:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_RouteData_$4823_storage_$","typeString":"mapping(uint256 => struct CrossSyncGateway.RouteData storage ref)"}},"id":5775,"indexExpression":{"id":5774,"name":"_routeId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5687,"src":"14214:8:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"14207:16:28","typeDescriptions":{"typeIdentifier":"t_struct$_RouteData_$4823_storage","typeString":"struct CrossSyncGateway.RouteData storage ref"}},"id":5776,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"14224:12:28","memberName":"routeAddress","nodeType":"MemberAccess","referencedDeclaration":4818,"src":"14207:29:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5772,"name":"IMessagingImpl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6325,"src":"14192:14:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMessagingImpl_$6325_$","typeString":"type(contract IMessagingImpl)"}},"id":5777,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14192:45:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IMessagingImpl_$6325","typeString":"contract IMessagingImpl"}},"nodeType":"VariableDeclarationStatement","src":"14165:72:28"},{"assignments":[5780],"declarations":[{"constant":false,"id":5780,"mutability":"mutable","name":"messengerFee","nameLocation":"14255:12:28","nodeType":"VariableDeclaration","scope":5801,"src":"14247:20:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5779,"name":"uint256","nodeType":"ElementaryTypeName","src":"14247:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5786,"initialValue":{"arguments":[{"id":5783,"name":"crossSyncPayload","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5741,"src":"14287:16:28","typeDescriptions":{"typeIdentifier":"t_struct$_ICrossSyncMessagingData_$6284_memory_ptr","typeString":"struct IMessagingImpl.ICrossSyncMessagingData memory"}},{"id":5784,"name":"_gasLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5692,"src":"14305:9:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_ICrossSyncMessagingData_$6284_memory_ptr","typeString":"struct IMessagingImpl.ICrossSyncMessagingData memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5781,"name":"messenger","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5771,"src":"14270:9:28","typeDescriptions":{"typeIdentifier":"t_contract$_IMessagingImpl_$6325","typeString":"contract IMessagingImpl"}},"id":5782,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14280:6:28","memberName":"getFee","nodeType":"MemberAccess","referencedDeclaration":6324,"src":"14270:16:28","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_struct$_ICrossSyncMessagingData_$6284_memory_ptr_$_t_uint256_$returns$_t_uint256_$","typeString":"function (struct IMessagingImpl.ICrossSyncMessagingData memory,uint256) view external returns (uint256)"}},"id":5785,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14270:45:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"14247:68:28"},{"assignments":[5788],"declarations":[{"constant":false,"id":5788,"mutability":"mutable","name":"syncFee","nameLocation":"14333:7:28","nodeType":"VariableDeclaration","scope":5801,"src":"14325:15:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5787,"name":"uint256","nodeType":"ElementaryTypeName","src":"14325:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5792,"initialValue":{"arguments":[{"id":5790,"name":"messengerFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5780,"src":"14354:12:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5789,"name":"getSyncFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5821,"src":"14343:10:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view returns (uint256)"}},"id":5791,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14343:24:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"14325:42:28"},{"assignments":[5794],"declarations":[{"constant":false,"id":5794,"mutability":"mutable","name":"finalFee","nameLocation":"14385:8:28","nodeType":"VariableDeclaration","scope":5801,"src":"14377:16:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5793,"name":"uint256","nodeType":"ElementaryTypeName","src":"14377:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5798,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5797,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5795,"name":"messengerFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5780,"src":"14396:12:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":5796,"name":"syncFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5788,"src":"14411:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14396:22:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"14377:41:28"},{"expression":{"id":5799,"name":"finalFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5794,"src":"14435:8:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5697,"id":5800,"nodeType":"Return","src":"14428:15:28"}]},"functionSelector":"c50189b8","id":5802,"implemented":true,"kind":"function","modifiers":[],"name":"getFee","nameLocation":"13195:6:28","nodeType":"FunctionDefinition","overrides":{"id":5694,"nodeType":"OverrideSpecifier","overrides":[],"src":"13349:8:28"},"parameters":{"id":5693,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5685,"mutability":"mutable","name":"_destinationChainId","nameLocation":"13219:19:28","nodeType":"VariableDeclaration","scope":5802,"src":"13211:27:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5684,"name":"uint256","nodeType":"ElementaryTypeName","src":"13211:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5687,"mutability":"mutable","name":"_routeId","nameLocation":"13256:8:28","nodeType":"VariableDeclaration","scope":5802,"src":"13248:16:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5686,"name":"uint256","nodeType":"ElementaryTypeName","src":"13248:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5690,"mutability":"mutable","name":"_payload","nameLocation":"13300:8:28","nodeType":"VariableDeclaration","scope":5802,"src":"13274:34:28","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_MessagingPayload_$6211_calldata_ptr","typeString":"struct ICrossSyncGateway.MessagingPayload"},"typeName":{"id":5689,"nodeType":"UserDefinedTypeName","pathNode":{"id":5688,"name":"MessagingPayload","nameLocations":["13274:16:28"],"nodeType":"IdentifierPath","referencedDeclaration":6211,"src":"13274:16:28"},"referencedDeclaration":6211,"src":"13274:16:28","typeDescriptions":{"typeIdentifier":"t_struct$_MessagingPayload_$6211_storage_ptr","typeString":"struct ICrossSyncGateway.MessagingPayload"}},"visibility":"internal"},{"constant":false,"id":5692,"mutability":"mutable","name":"_gasLimit","nameLocation":"13326:9:28","nodeType":"VariableDeclaration","scope":5802,"src":"13318:17:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5691,"name":"uint256","nodeType":"ElementaryTypeName","src":"13318:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13201:140:28"},"returnParameters":{"id":5697,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5696,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5802,"src":"13371:7:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5695,"name":"uint256","nodeType":"ElementaryTypeName","src":"13371:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13370:9:28"},"scope":6068,"src":"13186:1264:28","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":5820,"nodeType":"Block","src":"14528:200:28","statements":[{"assignments":[5810],"declarations":[{"constant":false,"id":5810,"mutability":"mutable","name":"syncFee","nameLocation":"14585:7:28","nodeType":"VariableDeclaration","scope":5820,"src":"14577:15:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5809,"name":"uint256","nodeType":"ElementaryTypeName","src":"14577:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5817,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5816,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5813,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5811,"name":"messengerFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5804,"src":"14596:12:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":5812,"name":"crossSyncFeePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4850,"src":"14611:19:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14596:34:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5814,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"14595:36:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"3130303030","id":5815,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14634:5:28","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"value":"10000"},"src":"14595:44:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"14577:62:28"},{"expression":{"id":5818,"name":"syncFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5810,"src":"14714:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5808,"id":5819,"nodeType":"Return","src":"14707:14:28"}]},"functionSelector":"9ef42cbb","id":5821,"implemented":true,"kind":"function","modifiers":[],"name":"getSyncFee","nameLocation":"14465:10:28","nodeType":"FunctionDefinition","parameters":{"id":5805,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5804,"mutability":"mutable","name":"messengerFee","nameLocation":"14484:12:28","nodeType":"VariableDeclaration","scope":5821,"src":"14476:20:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5803,"name":"uint256","nodeType":"ElementaryTypeName","src":"14476:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14475:22:28"},"returnParameters":{"id":5808,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5807,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5821,"src":"14519:7:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5806,"name":"uint256","nodeType":"ElementaryTypeName","src":"14519:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14518:9:28"},"scope":6068,"src":"14456:272:28","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":5861,"nodeType":"Block","src":"14872:270:28","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5840,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5835,"name":"crossSyncFeeAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4852,"src":"14890:19:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":5838,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14921:1:28","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5837,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14913:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5836,"name":"address","nodeType":"ElementaryTypeName","src":"14913:7:28","typeDescriptions":{}}},"id":5839,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14913:10:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"14890:33:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"43726f737353796e634665652041646472657373204973205a65726f2041646472657373","id":5841,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"14925:38:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_38d1ece48de7e0308613161a9fceb257d928aeac6b207e5b25ad22ac84363979","typeString":"literal_string \"CrossSyncFee Address Is Zero Address\""},"value":"CrossSyncFee Address Is Zero Address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_38d1ece48de7e0308613161a9fceb257d928aeac6b207e5b25ad22ac84363979","typeString":"literal_string \"CrossSyncFee Address Is Zero Address\""}],"id":5834,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"14882:7:28","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5842,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14882:82:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5843,"nodeType":"ExpressionStatement","src":"14882:82:28"},{"expression":{"arguments":[{"id":5849,"name":"_crossSyncFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5831,"src":"15012:13:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":5846,"name":"crossSyncFeeAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4852,"src":"14982:19:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5845,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14974:8:28","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":5844,"name":"address","nodeType":"ElementaryTypeName","src":"14974:8:28","stateMutability":"payable","typeDescriptions":{}}},"id":5847,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14974:28:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":5848,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"15003:8:28","memberName":"transfer","nodeType":"MemberAccess","src":"14974:37:28","typeDescriptions":{"typeIdentifier":"t_function_transfer_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":5850,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14974:52:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5851,"nodeType":"ExpressionStatement","src":"14974:52:28"},{"eventCall":{"arguments":[{"id":5853,"name":"_from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5823,"src":"15058:5:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5854,"name":"_crossSyncFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5831,"src":"15065:13:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5855,"name":"crossSyncFeeAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4852,"src":"15080:19:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5856,"name":"_destChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5825,"src":"15101:12:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5857,"name":"_routeId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5827,"src":"15115:8:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5858,"name":"_gasLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5829,"src":"15125:9:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5852,"name":"SyncFeeCollected","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5487,"src":"15041:16:28","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,address,uint256,uint256,uint256)"}},"id":5859,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15041:94:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5860,"nodeType":"EmitStatement","src":"15036:99:28"}]},"id":5862,"implemented":true,"kind":"function","modifiers":[],"name":"_transferNativeSyncFee","nameLocation":"14743:22:28","nodeType":"FunctionDefinition","parameters":{"id":5832,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5823,"mutability":"mutable","name":"_from","nameLocation":"14774:5:28","nodeType":"VariableDeclaration","scope":5862,"src":"14766:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5822,"name":"address","nodeType":"ElementaryTypeName","src":"14766:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5825,"mutability":"mutable","name":"_destChainId","nameLocation":"14789:12:28","nodeType":"VariableDeclaration","scope":5862,"src":"14781:20:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5824,"name":"uint256","nodeType":"ElementaryTypeName","src":"14781:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5827,"mutability":"mutable","name":"_routeId","nameLocation":"14811:8:28","nodeType":"VariableDeclaration","scope":5862,"src":"14803:16:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5826,"name":"uint256","nodeType":"ElementaryTypeName","src":"14803:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5829,"mutability":"mutable","name":"_gasLimit","nameLocation":"14829:9:28","nodeType":"VariableDeclaration","scope":5862,"src":"14821:17:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5828,"name":"uint256","nodeType":"ElementaryTypeName","src":"14821:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5831,"mutability":"mutable","name":"_crossSyncFee","nameLocation":"14848:13:28","nodeType":"VariableDeclaration","scope":5862,"src":"14840:21:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5830,"name":"uint256","nodeType":"ElementaryTypeName","src":"14840:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14765:97:28"},"returnParameters":{"id":5833,"nodeType":"ParameterList","parameters":[],"src":"14872:0:28"},"scope":6068,"src":"14734:408:28","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":5885,"nodeType":"Block","src":"15419:171:28","statements":[{"assignments":[5873],"declarations":[{"constant":false,"id":5873,"mutability":"mutable","name":"token","nameLocation":"15447:5:28","nodeType":"VariableDeclaration","scope":5885,"src":"15429:23:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1694","typeString":"contract IERC20Upgradeable"},"typeName":{"id":5872,"nodeType":"UserDefinedTypeName","pathNode":{"id":5871,"name":"IERC20Upgradeable","nameLocations":["15429:17:28"],"nodeType":"IdentifierPath","referencedDeclaration":1694,"src":"15429:17:28"},"referencedDeclaration":1694,"src":"15429:17:28","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1694","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"}],"id":5877,"initialValue":{"arguments":[{"id":5875,"name":"_tokenAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5866,"src":"15473:13:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5874,"name":"IERC20Upgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1694,"src":"15455:17:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20Upgradeable_$1694_$","typeString":"type(contract IERC20Upgradeable)"}},"id":5876,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15455:32:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1694","typeString":"contract IERC20Upgradeable"}},"nodeType":"VariableDeclarationStatement","src":"15429:58:28"},{"expression":{"arguments":[{"id":5881,"name":"_spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5864,"src":"15511:8:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5882,"name":"_tokenAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5868,"src":"15521:12:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5878,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5873,"src":"15497:5:28","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1694","typeString":"contract IERC20Upgradeable"}},"id":5880,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"15503:7:28","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":1681,"src":"15497:13:28","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":5883,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15497:37:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5884,"nodeType":"ExpressionStatement","src":"15497:37:28"}]},"id":5886,"implemented":true,"kind":"function","modifiers":[],"name":"_giveTokenApproval","nameLocation":"15328:18:28","nodeType":"FunctionDefinition","parameters":{"id":5869,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5864,"mutability":"mutable","name":"_spender","nameLocation":"15355:8:28","nodeType":"VariableDeclaration","scope":5886,"src":"15347:16:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5863,"name":"address","nodeType":"ElementaryTypeName","src":"15347:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5866,"mutability":"mutable","name":"_tokenAddress","nameLocation":"15373:13:28","nodeType":"VariableDeclaration","scope":5886,"src":"15365:21:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5865,"name":"address","nodeType":"ElementaryTypeName","src":"15365:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5868,"mutability":"mutable","name":"_tokenAmount","nameLocation":"15396:12:28","nodeType":"VariableDeclaration","scope":5886,"src":"15388:20:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5867,"name":"uint256","nodeType":"ElementaryTypeName","src":"15388:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"15346:63:28"},"returnParameters":{"id":5870,"nodeType":"ParameterList","parameters":[],"src":"15419:0:28"},"scope":6068,"src":"15319:271:28","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":5935,"nodeType":"Block","src":"15702:350:28","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5902,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5897,"name":"_from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5888,"src":"15715:5:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":5900,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"15732:4:28","typeDescriptions":{"typeIdentifier":"t_contract$_CrossSyncGateway_$6068","typeString":"contract CrossSyncGateway"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_CrossSyncGateway_$6068","typeString":"contract CrossSyncGateway"}],"id":5899,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15724:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5898,"name":"address","nodeType":"ElementaryTypeName","src":"15724:7:28","typeDescriptions":{}}},"id":5901,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15724:13:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"15715:22:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":5933,"nodeType":"Block","src":"15889:157:28","statements":[{"assignments":[5920],"declarations":[{"constant":false,"id":5920,"mutability":"mutable","name":"transferAsset","nameLocation":"15921:13:28","nodeType":"VariableDeclaration","scope":5933,"src":"15903:31:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1694","typeString":"contract IERC20Upgradeable"},"typeName":{"id":5919,"nodeType":"UserDefinedTypeName","pathNode":{"id":5918,"name":"IERC20Upgradeable","nameLocations":["15903:17:28"],"nodeType":"IdentifierPath","referencedDeclaration":1694,"src":"15903:17:28"},"referencedDeclaration":1694,"src":"15903:17:28","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1694","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"}],"id":5924,"initialValue":{"arguments":[{"id":5922,"name":"_tokenAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5892,"src":"15955:13:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5921,"name":"IERC20Upgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1694,"src":"15937:17:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20Upgradeable_$1694_$","typeString":"type(contract IERC20Upgradeable)"}},"id":5923,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15937:32:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1694","typeString":"contract IERC20Upgradeable"}},"nodeType":"VariableDeclarationStatement","src":"15903:66:28"},{"expression":{"arguments":[{"id":5928,"name":"_from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5888,"src":"16010:5:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5929,"name":"_to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5890,"src":"16017:3:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5930,"name":"_tokenAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5894,"src":"16022:12:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5925,"name":"transferAsset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5920,"src":"15983:13:28","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1694","typeString":"contract IERC20Upgradeable"}},"id":5927,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"15997:12:28","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":1693,"src":"15983:26:28","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) external returns (bool)"}},"id":5931,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15983:52:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5932,"nodeType":"ExpressionStatement","src":"15983:52:28"}]},"id":5934,"nodeType":"IfStatement","src":"15712:334:28","trueBody":{"id":5917,"nodeType":"Block","src":"15738:146:28","statements":[{"assignments":[5905],"declarations":[{"constant":false,"id":5905,"mutability":"mutable","name":"transferAsset","nameLocation":"15770:13:28","nodeType":"VariableDeclaration","scope":5917,"src":"15752:31:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1694","typeString":"contract IERC20Upgradeable"},"typeName":{"id":5904,"nodeType":"UserDefinedTypeName","pathNode":{"id":5903,"name":"IERC20Upgradeable","nameLocations":["15752:17:28"],"nodeType":"IdentifierPath","referencedDeclaration":1694,"src":"15752:17:28"},"referencedDeclaration":1694,"src":"15752:17:28","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1694","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"}],"id":5909,"initialValue":{"arguments":[{"id":5907,"name":"_tokenAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5892,"src":"15804:13:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5906,"name":"IERC20Upgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1694,"src":"15786:17:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20Upgradeable_$1694_$","typeString":"type(contract IERC20Upgradeable)"}},"id":5908,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15786:32:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1694","typeString":"contract IERC20Upgradeable"}},"nodeType":"VariableDeclarationStatement","src":"15752:66:28"},{"expression":{"arguments":[{"id":5913,"name":"_to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5890,"src":"15855:3:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5914,"name":"_tokenAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5894,"src":"15860:12:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5910,"name":"transferAsset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5905,"src":"15832:13:28","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1694","typeString":"contract IERC20Upgradeable"}},"id":5912,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"15846:8:28","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":1661,"src":"15832:22:28","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":5915,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15832:41:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5916,"nodeType":"ExpressionStatement","src":"15832:41:28"}]}}]},"id":5936,"implemented":true,"kind":"function","modifiers":[],"name":"_transferToken","nameLocation":"15605:14:28","nodeType":"FunctionDefinition","parameters":{"id":5895,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5888,"mutability":"mutable","name":"_from","nameLocation":"15628:5:28","nodeType":"VariableDeclaration","scope":5936,"src":"15620:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5887,"name":"address","nodeType":"ElementaryTypeName","src":"15620:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5890,"mutability":"mutable","name":"_to","nameLocation":"15643:3:28","nodeType":"VariableDeclaration","scope":5936,"src":"15635:11:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5889,"name":"address","nodeType":"ElementaryTypeName","src":"15635:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5892,"mutability":"mutable","name":"_tokenAddress","nameLocation":"15656:13:28","nodeType":"VariableDeclaration","scope":5936,"src":"15648:21:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5891,"name":"address","nodeType":"ElementaryTypeName","src":"15648:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5894,"mutability":"mutable","name":"_tokenAmount","nameLocation":"15679:12:28","nodeType":"VariableDeclaration","scope":5936,"src":"15671:20:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5893,"name":"uint256","nodeType":"ElementaryTypeName","src":"15671:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"15619:73:28"},"returnParameters":{"id":5896,"nodeType":"ParameterList","parameters":[],"src":"15702:0:28"},"scope":6068,"src":"15596:456:28","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":5959,"nodeType":"Block","src":"16304:123:28","statements":[{"assignments":[5946],"declarations":[{"constant":false,"id":5946,"mutability":"mutable","name":"signer","nameLocation":"16322:6:28","nodeType":"VariableDeclaration","scope":5959,"src":"16314:14:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5945,"name":"address","nodeType":"ElementaryTypeName","src":"16314:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":5952,"initialValue":{"arguments":[{"id":5949,"name":"digest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5938,"src":"16356:6:28","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":5950,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5940,"src":"16364:9:28","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":5947,"name":"ECDSAUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2810,"src":"16331:16:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ECDSAUpgradeable_$2810_$","typeString":"type(library ECDSAUpgradeable)"}},"id":5948,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"16348:7:28","memberName":"recover","nodeType":"MemberAccess","referencedDeclaration":2571,"src":"16331:24:28","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$","typeString":"function (bytes32,bytes memory) pure returns (address)"}},"id":5951,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16331:43:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"16314:60:28"},{"expression":{"components":[{"arguments":[{"id":5954,"name":"ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4802,"src":"16400:10:28","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":5955,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5946,"src":"16412:6:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":5953,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":239,"src":"16392:7:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":5956,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16392:27:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":5957,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"16391:29:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":5944,"id":5958,"nodeType":"Return","src":"16384:36:28"}]},"id":5960,"implemented":true,"kind":"function","modifiers":[],"name":"_verifyAdmin","nameLocation":"16222:12:28","nodeType":"FunctionDefinition","parameters":{"id":5941,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5938,"mutability":"mutable","name":"digest","nameLocation":"16243:6:28","nodeType":"VariableDeclaration","scope":5960,"src":"16235:14:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5937,"name":"bytes32","nodeType":"ElementaryTypeName","src":"16235:7:28","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5940,"mutability":"mutable","name":"signature","nameLocation":"16264:9:28","nodeType":"VariableDeclaration","scope":5960,"src":"16251:22:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5939,"name":"bytes","nodeType":"ElementaryTypeName","src":"16251:5:28","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"16234:40:28"},"returnParameters":{"id":5944,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5943,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5960,"src":"16298:4:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5942,"name":"bool","nodeType":"ElementaryTypeName","src":"16298:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"16297:6:28"},"scope":6068,"src":"16213:214:28","stateMutability":"view","virtual":false,"visibility":"internal"},{"baseFunctions":[2090,6136],"body":{"id":5986,"nodeType":"Block","src":"16697:395:28","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5977,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"expression":{"id":5969,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"16730:3:28","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5970,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"16734:6:28","memberName":"sender","nodeType":"MemberAccess","src":"16730:10:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5968,"name":"isTrustedForwarder","nodeType":"Identifier","overloadedDeclarations":[6109],"referencedDeclaration":6109,"src":"16711:18:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":5971,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16711:30:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5976,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":5972,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"16745:3:28","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5973,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"16749:4:28","memberName":"data","nodeType":"MemberAccess","src":"16745:8:28","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":5974,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"16754:6:28","memberName":"length","nodeType":"MemberAccess","src":"16745:15:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"3230","id":5975,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16764:2:28","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"src":"16745:21:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"16711:55:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":5984,"nodeType":"Block","src":"17036:50:28","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5980,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"17057:5:28","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_CrossSyncGateway_$6068_$","typeString":"type(contract super CrossSyncGateway)"}},"id":5981,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"17063:10:28","memberName":"_msgSender","nodeType":"MemberAccess","referencedDeclaration":6136,"src":"17057:16:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5982,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17057:18:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":5967,"id":5983,"nodeType":"Return","src":"17050:25:28"}]},"id":5985,"nodeType":"IfStatement","src":"16707:379:28","trueBody":{"id":5979,"nodeType":"Block","src":"16768:262:28","statements":[{"AST":{"nodeType":"YulBlock","src":"16932:88:28","statements":[{"nodeType":"YulAssignment","src":"16950:56:28","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16964:2:28","type":"","value":"96"},{"arguments":[{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nodeType":"YulIdentifier","src":"16985:12:28"},"nodeType":"YulFunctionCall","src":"16985:14:28"},{"kind":"number","nodeType":"YulLiteral","src":"17001:2:28","type":"","value":"20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"16981:3:28"},"nodeType":"YulFunctionCall","src":"16981:23:28"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"16968:12:28"},"nodeType":"YulFunctionCall","src":"16968:37:28"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"16960:3:28"},"nodeType":"YulFunctionCall","src":"16960:46:28"},"variableNames":[{"name":"sender","nodeType":"YulIdentifier","src":"16950:6:28"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":5966,"isOffset":false,"isSlot":false,"src":"16950:6:28","valueSize":1}],"id":5978,"nodeType":"InlineAssembly","src":"16923:97:28"}]}}]},"id":5987,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"16590:10:28","nodeType":"FunctionDefinition","overrides":{"id":5964,"nodeType":"OverrideSpecifier","overrides":[{"id":5962,"name":"ContextUpgradeable","nameLocations":["16634:18:28"],"nodeType":"IdentifierPath","referencedDeclaration":2105,"src":"16634:18:28"},{"id":5963,"name":"ERC2771Recipient","nameLocations":["16654:16:28"],"nodeType":"IdentifierPath","referencedDeclaration":6171,"src":"16654:16:28"}],"src":"16625:46:28"},"parameters":{"id":5961,"nodeType":"ParameterList","parameters":[],"src":"16600:2:28"},"returnParameters":{"id":5967,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5966,"mutability":"mutable","name":"sender","nameLocation":"16689:6:28","nodeType":"VariableDeclaration","scope":5987,"src":"16681:14:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5965,"name":"address","nodeType":"ElementaryTypeName","src":"16681:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"16680:16:28"},"scope":6068,"src":"16581:511:28","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[2099,6170],"body":{"id":6021,"nodeType":"Block","src":"17212:194:28","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":6004,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"expression":{"id":5996,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"17245:3:28","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5997,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"17249:6:28","memberName":"sender","nodeType":"MemberAccess","src":"17245:10:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5995,"name":"isTrustedForwarder","nodeType":"Identifier","overloadedDeclarations":[6109],"referencedDeclaration":6109,"src":"17226:18:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":5998,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17226:30:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6003,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":5999,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"17260:3:28","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6000,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"17264:4:28","memberName":"data","nodeType":"MemberAccess","src":"17260:8:28","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":6001,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"17269:6:28","memberName":"length","nodeType":"MemberAccess","src":"17260:15:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"3230","id":6002,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17279:2:28","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"src":"17260:21:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"17226:55:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":6019,"nodeType":"Block","src":"17352:48:28","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":6015,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"17373:5:28","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_CrossSyncGateway_$6068_$","typeString":"type(contract super CrossSyncGateway)"}},"id":6016,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"17379:8:28","memberName":"_msgData","nodeType":"MemberAccess","referencedDeclaration":6170,"src":"17373:14:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes_calldata_ptr_$","typeString":"function () view returns (bytes calldata)"}},"id":6017,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17373:16:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":5994,"id":6018,"nodeType":"Return","src":"17366:23:28"}]},"id":6020,"nodeType":"IfStatement","src":"17222:178:28","trueBody":{"id":6014,"nodeType":"Block","src":"17283:63:28","statements":[{"expression":{"baseExpression":{"expression":{"id":6005,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"17304:3:28","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6006,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"17308:4:28","memberName":"data","nodeType":"MemberAccess","src":"17304:8:28","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"endExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6011,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":6007,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"17314:3:28","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6008,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"17318:4:28","memberName":"data","nodeType":"MemberAccess","src":"17314:8:28","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":6009,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"17323:6:28","memberName":"length","nodeType":"MemberAccess","src":"17314:15:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"3230","id":6010,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17332:2:28","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"src":"17314:20:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6012,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexRangeAccess","src":"17304:31:28","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr_slice","typeString":"bytes calldata slice"}},"functionReturnParameters":5994,"id":6013,"nodeType":"Return","src":"17297:38:28"}]}}]},"id":6022,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"17107:8:28","nodeType":"FunctionDefinition","overrides":{"id":5991,"nodeType":"OverrideSpecifier","overrides":[{"id":5989,"name":"ContextUpgradeable","nameLocations":["17149:18:28"],"nodeType":"IdentifierPath","referencedDeclaration":2105,"src":"17149:18:28"},{"id":5990,"name":"ERC2771Recipient","nameLocations":["17169:16:28"],"nodeType":"IdentifierPath","referencedDeclaration":6171,"src":"17169:16:28"}],"src":"17140:46:28"},"parameters":{"id":5988,"nodeType":"ParameterList","parameters":[],"src":"17115:2:28"},"returnParameters":{"id":5994,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5993,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6022,"src":"17196:14:28","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":5992,"name":"bytes","nodeType":"ElementaryTypeName","src":"17196:5:28","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"17195:16:28"},"scope":6068,"src":"17098:308:28","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[1399],"body":{"id":6030,"nodeType":"Block","src":"17525:2:28","statements":[]},"id":6031,"implemented":true,"kind":"function","modifiers":[{"id":6027,"kind":"modifierInvocation","modifierName":{"id":6026,"name":"onlyUpgrader","nameLocations":["17491:12:28"],"nodeType":"IdentifierPath","referencedDeclaration":4975,"src":"17491:12:28"},"nodeType":"ModifierInvocation","src":"17491:12:28"}],"name":"_authorizeUpgrade","nameLocation":"17421:17:28","nodeType":"FunctionDefinition","overrides":{"id":6028,"nodeType":"OverrideSpecifier","overrides":[],"src":"17512:8:28"},"parameters":{"id":6025,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6024,"mutability":"mutable","name":"newImplementation","nameLocation":"17447:17:28","nodeType":"VariableDeclaration","scope":6031,"src":"17439:25:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6023,"name":"address","nodeType":"ElementaryTypeName","src":"17439:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"17438:27:28"},"returnParameters":{"id":6029,"nodeType":"ParameterList","parameters":[],"src":"17525:0:28"},"scope":6068,"src":"17412:115:28","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":6047,"nodeType":"Block","src":"17580:97:28","statements":[{"expression":{"arguments":[{"id":6039,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6033,"src":"17615:6:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":6036,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"17591:5:28","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_CrossSyncGateway_$6068_$","typeString":"type(contract super CrossSyncGateway)"}},"id":6038,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"17597:17:28","memberName":"transferOwnership","nodeType":"MemberAccess","referencedDeclaration":684,"src":"17591:23:28","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":6040,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17591:31:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6041,"nodeType":"ExpressionStatement","src":"17591:31:28"},{"expression":{"arguments":[{"id":6043,"name":"DEFAULT_ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":187,"src":"17643:18:28","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":6044,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6033,"src":"17663:6:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":6042,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":443,"src":"17632:10:28","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":6045,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17632:38:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6046,"nodeType":"ExpressionStatement","src":"17632:38:28"}]},"id":6048,"implemented":true,"kind":"function","modifiers":[],"name":"__setOwner__","nameLocation":"17542:12:28","nodeType":"FunctionDefinition","parameters":{"id":6034,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6033,"mutability":"mutable","name":"_owner","nameLocation":"17563:6:28","nodeType":"VariableDeclaration","scope":6048,"src":"17555:14:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6032,"name":"address","nodeType":"ElementaryTypeName","src":"17555:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"17554:16:28"},"returnParameters":{"id":6035,"nodeType":"ParameterList","parameters":[],"src":"17580:0:28"},"scope":6068,"src":"17533:144:28","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[220],"body":{"id":6062,"nodeType":"Block","src":"17805:60:28","statements":[{"expression":{"arguments":[{"id":6059,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6050,"src":"17846:11:28","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":6057,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"17822:5:28","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_CrossSyncGateway_$6068_$","typeString":"type(contract super CrossSyncGateway)"}},"id":6058,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"17828:17:28","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":220,"src":"17822:23:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":6060,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17822:36:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":6056,"id":6061,"nodeType":"Return","src":"17815:43:28"}]},"functionSelector":"01ffc9a7","id":6063,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"17697:17:28","nodeType":"FunctionDefinition","overrides":{"id":6053,"nodeType":"OverrideSpecifier","overrides":[{"id":6052,"name":"AccessControlUpgradeable","nameLocations":["17764:24:28"],"nodeType":"IdentifierPath","referencedDeclaration":480,"src":"17764:24:28"}],"src":"17755:34:28"},"parameters":{"id":6051,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6050,"mutability":"mutable","name":"interfaceId","nameLocation":"17722:11:28","nodeType":"VariableDeclaration","scope":6063,"src":"17715:18:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":6049,"name":"bytes4","nodeType":"ElementaryTypeName","src":"17715:6:28","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"17714:20:28"},"returnParameters":{"id":6056,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6055,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6063,"src":"17799:4:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6054,"name":"bool","nodeType":"ElementaryTypeName","src":"17799:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"17798:6:28"},"scope":6068,"src":"17688:177:28","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":6066,"nodeType":"Block","src":"17896:2:28","statements":[]},"id":6067,"implemented":true,"kind":"receive","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":6064,"nodeType":"ParameterList","parameters":[],"src":"17876:2:28"},"returnParameters":{"id":6065,"nodeType":"ParameterList","parameters":[],"src":"17896:0:28"},"scope":6068,"src":"17869:29:28","stateMutability":"payable","virtual":false,"visibility":"external"}],"scope":6069,"src":"1359:16542:28","usedErrors":[]}],"src":"33:17868:28"},"id":28},"contracts/helpers/ERC2771Recipient.sol":{"ast":{"absolutePath":"contracts/helpers/ERC2771Recipient.sol","exportedSymbols":{"ERC2771Recipient":[6171],"IERC2771Recipient":[6200]},"id":6172,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":6070,"literals":["solidity",">=","0.6",".9"],"nodeType":"PragmaDirective","src":"70:24:29"},{"absolutePath":"contracts/helpers/IERC2771Recipient.sol","file":"./IERC2771Recipient.sol","id":6071,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6172,"sourceUnit":6201,"src":"96:33:29","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":6073,"name":"IERC2771Recipient","nameLocations":["533:17:29"],"nodeType":"IdentifierPath","referencedDeclaration":6200,"src":"533:17:29"},"id":6074,"nodeType":"InheritanceSpecifier","src":"533:17:29"}],"canonicalName":"ERC2771Recipient","contractDependencies":[],"contractKind":"contract","documentation":{"id":6072,"nodeType":"StructuredDocumentation","src":"131:363:29","text":" @title The ERC-2771 Recipient Base Abstract Class - Implementation\n @notice Note that this contract was called `BaseRelayRecipient` in the previous revision of the GSN.\n @notice A base contract to be inherited by any contract that want to receive relayed transactions.\n @notice A subclass must use `_msgSender()` instead of `msg.sender`."},"fullyImplemented":true,"id":6171,"linearizedBaseContracts":[6171,6200],"name":"ERC2771Recipient","nameLocation":"513:16:29","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":6076,"mutability":"mutable","name":"_trustedForwarder","nameLocation":"637:17:29","nodeType":"VariableDeclaration","scope":6171,"src":"621:33:29","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6075,"name":"address","nodeType":"ElementaryTypeName","src":"621:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"body":{"id":6084,"nodeType":"Block","src":"1085:41:29","statements":[{"expression":{"id":6082,"name":"_trustedForwarder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6076,"src":"1102:17:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":6081,"id":6083,"nodeType":"Return","src":"1095:24:29"}]},"documentation":{"id":6077,"nodeType":"StructuredDocumentation","src":"661:341:29","text":" :warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.\n @notice Method is not a required method to allow Recipients to trust multiple Forwarders. Not recommended yet.\n @return forwarder The address of the Forwarder contract that is being used."},"functionSelector":"ce1b815f","id":6085,"implemented":true,"kind":"function","modifiers":[],"name":"getTrustedForwarder","nameLocation":"1016:19:29","nodeType":"FunctionDefinition","parameters":{"id":6078,"nodeType":"ParameterList","parameters":[],"src":"1035:2:29"},"returnParameters":{"id":6081,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6080,"mutability":"mutable","name":"forwarder","nameLocation":"1075:9:29","nodeType":"VariableDeclaration","scope":6085,"src":"1067:17:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6079,"name":"address","nodeType":"ElementaryTypeName","src":"1067:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1066:19:29"},"scope":6171,"src":"1007:119:29","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":6094,"nodeType":"Block","src":"1191:47:29","statements":[{"expression":{"id":6092,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6090,"name":"_trustedForwarder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6076,"src":"1201:17:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":6091,"name":"_forwarder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6087,"src":"1221:10:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1201:30:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":6093,"nodeType":"ExpressionStatement","src":"1201:30:29"}]},"id":6095,"implemented":true,"kind":"function","modifiers":[],"name":"_setTrustedForwarder","nameLocation":"1141:20:29","nodeType":"FunctionDefinition","parameters":{"id":6088,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6087,"mutability":"mutable","name":"_forwarder","nameLocation":"1170:10:29","nodeType":"VariableDeclaration","scope":6095,"src":"1162:18:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6086,"name":"address","nodeType":"ElementaryTypeName","src":"1162:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1161:20:29"},"returnParameters":{"id":6089,"nodeType":"ParameterList","parameters":[],"src":"1191:0:29"},"scope":6171,"src":"1132:106:29","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[6182],"body":{"id":6108,"nodeType":"Block","src":"1372:54:29","statements":[{"expression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":6106,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6104,"name":"forwarder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6098,"src":"1389:9:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":6105,"name":"_trustedForwarder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6076,"src":"1402:17:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1389:30:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":6103,"id":6107,"nodeType":"Return","src":"1382:37:29"}]},"documentation":{"id":6096,"nodeType":"StructuredDocumentation","src":"1244:33:29","text":"@inheritdoc IERC2771Recipient"},"functionSelector":"572b6c05","id":6109,"implemented":true,"kind":"function","modifiers":[],"name":"isTrustedForwarder","nameLocation":"1291:18:29","nodeType":"FunctionDefinition","overrides":{"id":6100,"nodeType":"OverrideSpecifier","overrides":[],"src":"1344:8:29"},"parameters":{"id":6099,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6098,"mutability":"mutable","name":"forwarder","nameLocation":"1318:9:29","nodeType":"VariableDeclaration","scope":6109,"src":"1310:17:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6097,"name":"address","nodeType":"ElementaryTypeName","src":"1310:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1309:19:29"},"returnParameters":{"id":6103,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6102,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6109,"src":"1366:4:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6101,"name":"bool","nodeType":"ElementaryTypeName","src":"1366:4:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1365:6:29"},"scope":6171,"src":"1282:144:29","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[6188],"body":{"id":6135,"nodeType":"Block","src":"1545:472:29","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":6125,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6120,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":6116,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1559:3:29","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6117,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1563:4:29","memberName":"data","nodeType":"MemberAccess","src":"1559:8:29","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":6118,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1568:6:29","memberName":"length","nodeType":"MemberAccess","src":"1559:15:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"3230","id":6119,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1578:2:29","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"src":"1559:21:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"arguments":[{"expression":{"id":6122,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1603:3:29","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6123,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1607:6:29","memberName":"sender","nodeType":"MemberAccess","src":"1603:10:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6121,"name":"isTrustedForwarder","nodeType":"Identifier","overloadedDeclarations":[6109],"referencedDeclaration":6109,"src":"1584:18:29","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":6124,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1584:30:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1559:55:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":6133,"nodeType":"Block","src":"1970:41:29","statements":[{"expression":{"id":6131,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6128,"name":"ret","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6114,"src":"1984:3:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":6129,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1990:3:29","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6130,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1994:6:29","memberName":"sender","nodeType":"MemberAccess","src":"1990:10:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1984:16:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":6132,"nodeType":"ExpressionStatement","src":"1984:16:29"}]},"id":6134,"nodeType":"IfStatement","src":"1555:456:29","trueBody":{"id":6127,"nodeType":"Block","src":"1616:348:29","statements":[{"AST":{"nodeType":"YulBlock","src":"1871:83:29","statements":[{"nodeType":"YulAssignment","src":"1889:51:29","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1900:2:29","type":"","value":"96"},{"arguments":[{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nodeType":"YulIdentifier","src":"1920:12:29"},"nodeType":"YulFunctionCall","src":"1920:14:29"},{"kind":"number","nodeType":"YulLiteral","src":"1935:2:29","type":"","value":"20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1916:3:29"},"nodeType":"YulFunctionCall","src":"1916:22:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1903:12:29"},"nodeType":"YulFunctionCall","src":"1903:36:29"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"1896:3:29"},"nodeType":"YulFunctionCall","src":"1896:44:29"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"1889:3:29"}]}]},"evmVersion":"london","externalReferences":[{"declaration":6114,"isOffset":false,"isSlot":false,"src":"1889:3:29","valueSize":1}],"id":6126,"nodeType":"InlineAssembly","src":"1862:92:29"}]}}]},"documentation":{"id":6110,"nodeType":"StructuredDocumentation","src":"1432:33:29","text":"@inheritdoc IERC2771Recipient"},"id":6136,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"1479:10:29","nodeType":"FunctionDefinition","overrides":{"id":6112,"nodeType":"OverrideSpecifier","overrides":[],"src":"1501:8:29"},"parameters":{"id":6111,"nodeType":"ParameterList","parameters":[],"src":"1489:2:29"},"returnParameters":{"id":6115,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6114,"mutability":"mutable","name":"ret","nameLocation":"1540:3:29","nodeType":"VariableDeclaration","scope":6136,"src":"1532:11:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6113,"name":"address","nodeType":"ElementaryTypeName","src":"1532:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1531:13:29"},"scope":6171,"src":"1470:547:29","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[6194],"body":{"id":6169,"nodeType":"Block","src":"2141:185:29","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":6152,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6147,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":6143,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2155:3:29","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6144,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2159:4:29","memberName":"data","nodeType":"MemberAccess","src":"2155:8:29","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":6145,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2164:6:29","memberName":"length","nodeType":"MemberAccess","src":"2155:15:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"3230","id":6146,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2174:2:29","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"src":"2155:21:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"arguments":[{"expression":{"id":6149,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2199:3:29","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6150,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2203:6:29","memberName":"sender","nodeType":"MemberAccess","src":"2199:10:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6148,"name":"isTrustedForwarder","nodeType":"Identifier","overloadedDeclarations":[6109],"referencedDeclaration":6109,"src":"2180:18:29","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":6151,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2180:30:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2155:55:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":6167,"nodeType":"Block","src":"2280:40:29","statements":[{"expression":{"expression":{"id":6164,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2301:3:29","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6165,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2305:4:29","memberName":"data","nodeType":"MemberAccess","src":"2301:8:29","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":6142,"id":6166,"nodeType":"Return","src":"2294:15:29"}]},"id":6168,"nodeType":"IfStatement","src":"2151:169:29","trueBody":{"id":6163,"nodeType":"Block","src":"2212:62:29","statements":[{"expression":{"baseExpression":{"expression":{"id":6153,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2233:3:29","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6154,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2237:4:29","memberName":"data","nodeType":"MemberAccess","src":"2233:8:29","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"endExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6160,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":6156,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2244:3:29","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6157,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2248:4:29","memberName":"data","nodeType":"MemberAccess","src":"2244:8:29","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":6158,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2253:6:29","memberName":"length","nodeType":"MemberAccess","src":"2244:15:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"3230","id":6159,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2260:2:29","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"src":"2244:18:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6161,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexRangeAccess","src":"2233:30:29","startExpression":{"hexValue":"30","id":6155,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2242:1:29","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr_slice","typeString":"bytes calldata slice"}},"functionReturnParameters":6142,"id":6162,"nodeType":"Return","src":"2226:37:29"}]}}]},"documentation":{"id":6137,"nodeType":"StructuredDocumentation","src":"2023:33:29","text":"@inheritdoc IERC2771Recipient"},"id":6170,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"2070:8:29","nodeType":"FunctionDefinition","overrides":{"id":6139,"nodeType":"OverrideSpecifier","overrides":[],"src":"2090:8:29"},"parameters":{"id":6138,"nodeType":"ParameterList","parameters":[],"src":"2078:2:29"},"returnParameters":{"id":6142,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6141,"mutability":"mutable","name":"ret","nameLocation":"2136:3:29","nodeType":"VariableDeclaration","scope":6170,"src":"2121:18:29","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":6140,"name":"bytes","nodeType":"ElementaryTypeName","src":"2121:5:29","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2120:20:29"},"scope":6171,"src":"2061:265:29","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":6172,"src":"495:1833:29","usedErrors":[]}],"src":"70:2258:29"},"id":29},"contracts/helpers/IERC2771Recipient.sol":{"ast":{"absolutePath":"contracts/helpers/IERC2771Recipient.sol","exportedSymbols":{"IERC2771Recipient":[6200]},"id":6201,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":6173,"literals":["solidity",">=","0.6",".0"],"nodeType":"PragmaDirective","src":"32:24:30"},{"abstract":true,"baseContracts":[],"canonicalName":"IERC2771Recipient","contractDependencies":[],"contractKind":"contract","documentation":{"id":6174,"nodeType":"StructuredDocumentation","src":"58:267:30","text":" @title The ERC-2771 Recipient Base Abstract Class - Declarations\n @notice A contract must implement this interface in order to support relayed transaction.\n @notice It is recommended that your contract inherits from the ERC2771Recipient contract."},"fullyImplemented":false,"id":6200,"linearizedBaseContracts":[6200],"name":"IERC2771Recipient","nameLocation":"344:17:30","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":6175,"nodeType":"StructuredDocumentation","src":"369:342:30","text":" :warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.\n @param forwarder The address of the Forwarder contract that is being used.\n @return isTrustedForwarder `true` if the Forwarder is trusted to forward relayed transactions by this Recipient."},"functionSelector":"572b6c05","id":6182,"implemented":false,"kind":"function","modifiers":[],"name":"isTrustedForwarder","nameLocation":"725:18:30","nodeType":"FunctionDefinition","parameters":{"id":6178,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6177,"mutability":"mutable","name":"forwarder","nameLocation":"752:9:30","nodeType":"VariableDeclaration","scope":6182,"src":"744:17:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6176,"name":"address","nodeType":"ElementaryTypeName","src":"744:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"743:19:30"},"returnParameters":{"id":6181,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6180,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6182,"src":"791:4:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6179,"name":"bool","nodeType":"ElementaryTypeName","src":"791:4:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"790:6:30"},"scope":6200,"src":"716:81:30","stateMutability":"view","virtual":true,"visibility":"public"},{"documentation":{"id":6183,"nodeType":"StructuredDocumentation","src":"803:338:30","text":" @notice Use this method the contract anywhere instead of msg.sender to support relayed transactions.\n @return sender The real sender of this call.\n For a call that came through the Forwarder the real sender is extracted from the last 20 bytes of the `msg.data`.\n Otherwise simply returns `msg.sender`."},"id":6188,"implemented":false,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"1155:10:30","nodeType":"FunctionDefinition","parameters":{"id":6184,"nodeType":"ParameterList","parameters":[],"src":"1165:2:30"},"returnParameters":{"id":6187,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6186,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6188,"src":"1199:7:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6185,"name":"address","nodeType":"ElementaryTypeName","src":"1199:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1198:9:30"},"scope":6200,"src":"1146:62:30","stateMutability":"view","virtual":true,"visibility":"internal"},{"documentation":{"id":6189,"nodeType":"StructuredDocumentation","src":"1214:473:30","text":" @notice Use this method in the contract instead of `msg.data` when difference matters (hashing, signature, etc.)\n @return data The real `msg.data` of this call.\n For a call that came through the Forwarder, the real sender address was appended as the last 20 bytes\n of the `msg.data` - so this method will strip those 20 bytes off.\n Otherwise (if the call was made directly and not through the forwarder) simply returns `msg.data`."},"id":6194,"implemented":false,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"1701:8:30","nodeType":"FunctionDefinition","parameters":{"id":6190,"nodeType":"ParameterList","parameters":[],"src":"1709:2:30"},"returnParameters":{"id":6193,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6192,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6194,"src":"1743:14:30","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":6191,"name":"bytes","nodeType":"ElementaryTypeName","src":"1743:5:30","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1742:16:30"},"scope":6200,"src":"1692:67:30","stateMutability":"view","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":6195,"nodeType":"StructuredDocumentation","src":"1765:254:30","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":6199,"mutability":"mutable","name":"__gap","nameLocation":"2044:5:30","nodeType":"VariableDeclaration","scope":6200,"src":"2024:25:30","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":6196,"name":"uint256","nodeType":"ElementaryTypeName","src":"2024:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6198,"length":{"hexValue":"3530","id":6197,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2032:2:30","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"2024:11:30","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"}],"scope":6201,"src":"326:1726:30","usedErrors":[]}],"src":"32:2020:30"},"id":30},"contracts/interfaces/ICrossSyncGateway.sol":{"ast":{"absolutePath":"contracts/interfaces/ICrossSyncGateway.sol","exportedSymbols":{"ICrossSyncGateway":[6240],"ICrossSyncReceiver":[6249]},"id":6241,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":6202,"literals":["solidity","^","0.8",".17"],"nodeType":"PragmaDirective","src":"33:24:31"},{"id":6203,"literals":["abicoder","v2"],"nodeType":"PragmaDirective","src":"58:19:31"},{"absolutePath":"contracts/interfaces/ICrossSyncReceiver.sol","file":"./ICrossSyncReceiver.sol","id":6204,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6241,"sourceUnit":6250,"src":"79:34:31","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":6205,"name":"ICrossSyncReceiver","nameLocations":["146:18:31"],"nodeType":"IdentifierPath","referencedDeclaration":6249,"src":"146:18:31"},"id":6206,"nodeType":"InheritanceSpecifier","src":"146:18:31"}],"canonicalName":"ICrossSyncGateway","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":6240,"linearizedBaseContracts":[6240,6249],"name":"ICrossSyncGateway","nameLocation":"125:17:31","nodeType":"ContractDefinition","nodes":[{"canonicalName":"ICrossSyncGateway.MessagingPayload","id":6211,"members":[{"constant":false,"id":6208,"mutability":"mutable","name":"to","nameLocation":"213:2:31","nodeType":"VariableDeclaration","scope":6211,"src":"205:10:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6207,"name":"address","nodeType":"ElementaryTypeName","src":"205:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6210,"mutability":"mutable","name":"data","nameLocation":"231:4:31","nodeType":"VariableDeclaration","scope":6211,"src":"225:10:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":6209,"name":"bytes","nodeType":"ElementaryTypeName","src":"225:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"MessagingPayload","nameLocation":"179:16:31","nodeType":"StructDefinition","scope":6240,"src":"172:70:31","visibility":"public"},{"functionSelector":"5c96a561","id":6225,"implemented":false,"kind":"function","modifiers":[],"name":"sendMessage","nameLocation":"257:11:31","nodeType":"FunctionDefinition","parameters":{"id":6223,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6213,"mutability":"mutable","name":"_destinationChainId","nameLocation":"286:19:31","nodeType":"VariableDeclaration","scope":6225,"src":"278:27:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6212,"name":"uint256","nodeType":"ElementaryTypeName","src":"278:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6215,"mutability":"mutable","name":"_routeId","nameLocation":"323:8:31","nodeType":"VariableDeclaration","scope":6225,"src":"315:16:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6214,"name":"uint256","nodeType":"ElementaryTypeName","src":"315:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6218,"mutability":"mutable","name":"_payload","nameLocation":"367:8:31","nodeType":"VariableDeclaration","scope":6225,"src":"341:34:31","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_MessagingPayload_$6211_calldata_ptr","typeString":"struct ICrossSyncGateway.MessagingPayload"},"typeName":{"id":6217,"nodeType":"UserDefinedTypeName","pathNode":{"id":6216,"name":"MessagingPayload","nameLocations":["341:16:31"],"nodeType":"IdentifierPath","referencedDeclaration":6211,"src":"341:16:31"},"referencedDeclaration":6211,"src":"341:16:31","typeDescriptions":{"typeIdentifier":"t_struct$_MessagingPayload_$6211_storage_ptr","typeString":"struct ICrossSyncGateway.MessagingPayload"}},"visibility":"internal"},{"constant":false,"id":6220,"mutability":"mutable","name":"gasLimit","nameLocation":"393:8:31","nodeType":"VariableDeclaration","scope":6225,"src":"385:16:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6219,"name":"uint256","nodeType":"ElementaryTypeName","src":"385:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6222,"mutability":"mutable","name":"_routeData","nameLocation":"426:10:31","nodeType":"VariableDeclaration","scope":6225,"src":"411:25:31","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":6221,"name":"bytes","nodeType":"ElementaryTypeName","src":"411:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"268:174:31"},"returnParameters":{"id":6224,"nodeType":"ParameterList","parameters":[],"src":"459:0:31"},"scope":6240,"src":"248:212:31","stateMutability":"payable","virtual":false,"visibility":"external"},{"functionSelector":"c50189b8","id":6239,"implemented":false,"kind":"function","modifiers":[],"name":"getFee","nameLocation":"755:6:31","nodeType":"FunctionDefinition","parameters":{"id":6235,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6227,"mutability":"mutable","name":"_destinationChainId","nameLocation":"779:19:31","nodeType":"VariableDeclaration","scope":6239,"src":"771:27:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6226,"name":"uint256","nodeType":"ElementaryTypeName","src":"771:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6229,"mutability":"mutable","name":"_routeId","nameLocation":"816:8:31","nodeType":"VariableDeclaration","scope":6239,"src":"808:16:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6228,"name":"uint256","nodeType":"ElementaryTypeName","src":"808:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6232,"mutability":"mutable","name":"_payload","nameLocation":"860:8:31","nodeType":"VariableDeclaration","scope":6239,"src":"834:34:31","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_MessagingPayload_$6211_calldata_ptr","typeString":"struct ICrossSyncGateway.MessagingPayload"},"typeName":{"id":6231,"nodeType":"UserDefinedTypeName","pathNode":{"id":6230,"name":"MessagingPayload","nameLocations":["834:16:31"],"nodeType":"IdentifierPath","referencedDeclaration":6211,"src":"834:16:31"},"referencedDeclaration":6211,"src":"834:16:31","typeDescriptions":{"typeIdentifier":"t_struct$_MessagingPayload_$6211_storage_ptr","typeString":"struct ICrossSyncGateway.MessagingPayload"}},"visibility":"internal"},{"constant":false,"id":6234,"mutability":"mutable","name":"_gasLimit","nameLocation":"886:9:31","nodeType":"VariableDeclaration","scope":6239,"src":"878:17:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6233,"name":"uint256","nodeType":"ElementaryTypeName","src":"878:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"761:140:31"},"returnParameters":{"id":6238,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6237,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6239,"src":"924:7:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6236,"name":"uint256","nodeType":"ElementaryTypeName","src":"924:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"923:9:31"},"scope":6240,"src":"746:187:31","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":6241,"src":"115:833:31","usedErrors":[]}],"src":"33:915:31"},"id":31},"contracts/interfaces/ICrossSyncReceiver.sol":{"ast":{"absolutePath":"contracts/interfaces/ICrossSyncReceiver.sol","exportedSymbols":{"ICrossSyncReceiver":[6249]},"id":6250,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":6242,"literals":["solidity","^","0.8",".17"],"nodeType":"PragmaDirective","src":"33:24:32"},{"id":6243,"literals":["abicoder","v2"],"nodeType":"PragmaDirective","src":"58:19:32"},{"abstract":false,"baseContracts":[],"canonicalName":"ICrossSyncReceiver","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":6249,"linearizedBaseContracts":[6249],"name":"ICrossSyncReceiver","nameLocation":"90:18:32","nodeType":"ContractDefinition","nodes":[{"functionSelector":"e34381a1","id":6248,"implemented":false,"kind":"function","modifiers":[],"name":"handleReceive","nameLocation":"125:13:32","nodeType":"FunctionDefinition","parameters":{"id":6246,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6245,"mutability":"mutable","name":"_payload","nameLocation":"163:8:32","nodeType":"VariableDeclaration","scope":6248,"src":"148:23:32","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":6244,"name":"bytes","nodeType":"ElementaryTypeName","src":"148:5:32","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"138:39:32"},"returnParameters":{"id":6247,"nodeType":"ParameterList","parameters":[],"src":"186:0:32"},"scope":6249,"src":"116:71:32","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":6250,"src":"80:112:32","usedErrors":[]}],"src":"33:159:32"},"id":32},"contracts/interfaces/ICrossSyncReceiverImplementer.sol":{"ast":{"absolutePath":"contracts/interfaces/ICrossSyncReceiverImplementer.sol","exportedSymbols":{"ICrossSyncReceiverImplementer":[6262]},"id":6263,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":6251,"literals":["solidity","^","0.8",".17"],"nodeType":"PragmaDirective","src":"33:24:33"},{"id":6252,"literals":["abicoder","v2"],"nodeType":"PragmaDirective","src":"58:19:33"},{"abstract":false,"baseContracts":[],"canonicalName":"ICrossSyncReceiverImplementer","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":6262,"linearizedBaseContracts":[6262],"name":"ICrossSyncReceiverImplementer","nameLocation":"89:29:33","nodeType":"ContractDefinition","nodes":[{"functionSelector":"1885c2f9","id":6261,"implemented":false,"kind":"function","modifiers":[],"name":"receiveMessage","nameLocation":"135:14:33","nodeType":"FunctionDefinition","parameters":{"id":6259,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6254,"mutability":"mutable","name":"_sourceChainId","nameLocation":"167:14:33","nodeType":"VariableDeclaration","scope":6261,"src":"159:22:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6253,"name":"uint256","nodeType":"ElementaryTypeName","src":"159:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6256,"mutability":"mutable","name":"_sourceAddress","nameLocation":"199:14:33","nodeType":"VariableDeclaration","scope":6261,"src":"191:22:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6255,"name":"address","nodeType":"ElementaryTypeName","src":"191:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6258,"mutability":"mutable","name":"_payload","nameLocation":"238:8:33","nodeType":"VariableDeclaration","scope":6261,"src":"223:23:33","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":6257,"name":"bytes","nodeType":"ElementaryTypeName","src":"223:5:33","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"149:103:33"},"returnParameters":{"id":6260,"nodeType":"ParameterList","parameters":[],"src":"270:0:33"},"scope":6262,"src":"126:145:33","stateMutability":"payable","virtual":false,"visibility":"external"}],"scope":6263,"src":"79:210:33","usedErrors":[]}],"src":"33:256:33"},"id":33},"contracts/interfaces/IMessagingImpl.sol":{"ast":{"absolutePath":"contracts/interfaces/IMessagingImpl.sol","exportedSymbols":{"ICrossSyncGateway":[6240],"ICrossSyncReceiver":[6249],"IMessagingImpl":[6325]},"id":6326,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":6264,"literals":["solidity","^","0.8",".17"],"nodeType":"PragmaDirective","src":"33:24:34"},{"id":6265,"literals":["abicoder","v2"],"nodeType":"PragmaDirective","src":"58:19:34"},{"absolutePath":"contracts/interfaces/ICrossSyncGateway.sol","file":"./ICrossSyncGateway.sol","id":6266,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6326,"sourceUnit":6241,"src":"79:33:34","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"IMessagingImpl","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":6325,"linearizedBaseContracts":[6325],"name":"IMessagingImpl","nameLocation":"124:14:34","nodeType":"ContractDefinition","nodes":[{"canonicalName":"IMessagingImpl.ICrossSyncMessagingData","id":6284,"members":[{"constant":false,"id":6268,"mutability":"mutable","name":"sender","nameLocation":"195:6:34","nodeType":"VariableDeclaration","scope":6284,"src":"187:14:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6267,"name":"address","nodeType":"ElementaryTypeName","src":"187:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6270,"mutability":"mutable","name":"nonce","nameLocation":"219:5:34","nodeType":"VariableDeclaration","scope":6284,"src":"211:13:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6269,"name":"uint256","nodeType":"ElementaryTypeName","src":"211:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6272,"mutability":"mutable","name":"messagingRouteId","nameLocation":"242:16:34","nodeType":"VariableDeclaration","scope":6284,"src":"234:24:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6271,"name":"uint256","nodeType":"ElementaryTypeName","src":"234:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6274,"mutability":"mutable","name":"sourceChainId","nameLocation":"276:13:34","nodeType":"VariableDeclaration","scope":6284,"src":"268:21:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6273,"name":"uint256","nodeType":"ElementaryTypeName","src":"268:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6276,"mutability":"mutable","name":"destinationChainId","nameLocation":"307:18:34","nodeType":"VariableDeclaration","scope":6284,"src":"299:26:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6275,"name":"uint256","nodeType":"ElementaryTypeName","src":"299:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6278,"mutability":"mutable","name":"sourceGatewayAddress","nameLocation":"343:20:34","nodeType":"VariableDeclaration","scope":6284,"src":"335:28:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6277,"name":"address","nodeType":"ElementaryTypeName","src":"335:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6280,"mutability":"mutable","name":"destinationGatewayAddress","nameLocation":"381:25:34","nodeType":"VariableDeclaration","scope":6284,"src":"373:33:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6279,"name":"address","nodeType":"ElementaryTypeName","src":"373:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6283,"mutability":"mutable","name":"payload","nameLocation":"451:7:34","nodeType":"VariableDeclaration","scope":6284,"src":"416:42:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_MessagingPayload_$6211_storage_ptr","typeString":"struct ICrossSyncGateway.MessagingPayload"},"typeName":{"id":6282,"nodeType":"UserDefinedTypeName","pathNode":{"id":6281,"name":"ICrossSyncGateway.MessagingPayload","nameLocations":["416:17:34","434:16:34"],"nodeType":"IdentifierPath","referencedDeclaration":6211,"src":"416:34:34"},"referencedDeclaration":6211,"src":"416:34:34","typeDescriptions":{"typeIdentifier":"t_struct$_MessagingPayload_$6211_storage_ptr","typeString":"struct ICrossSyncGateway.MessagingPayload"}},"visibility":"internal"}],"name":"ICrossSyncMessagingData","nameLocation":"153:23:34","nodeType":"StructDefinition","scope":6325,"src":"146:319:34","visibility":"public"},{"canonicalName":"IMessagingImpl.ICrossSyncMultiHopMessagingData","id":6304,"members":[{"constant":false,"id":6286,"mutability":"mutable","name":"sender","nameLocation":"528:6:34","nodeType":"VariableDeclaration","scope":6304,"src":"520:14:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6285,"name":"address","nodeType":"ElementaryTypeName","src":"520:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6288,"mutability":"mutable","name":"nonce","nameLocation":"552:5:34","nodeType":"VariableDeclaration","scope":6304,"src":"544:13:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6287,"name":"uint256","nodeType":"ElementaryTypeName","src":"544:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6291,"mutability":"mutable","name":"messagingRouteIds","nameLocation":"577:17:34","nodeType":"VariableDeclaration","scope":6304,"src":"567:27:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":6289,"name":"uint256","nodeType":"ElementaryTypeName","src":"567:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6290,"nodeType":"ArrayTypeName","src":"567:9:34","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":6293,"mutability":"mutable","name":"sourceChainId","nameLocation":"612:13:34","nodeType":"VariableDeclaration","scope":6304,"src":"604:21:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6292,"name":"uint256","nodeType":"ElementaryTypeName","src":"604:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6296,"mutability":"mutable","name":"destinationChainIds","nameLocation":"645:19:34","nodeType":"VariableDeclaration","scope":6304,"src":"635:29:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":6294,"name":"uint256","nodeType":"ElementaryTypeName","src":"635:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6295,"nodeType":"ArrayTypeName","src":"635:9:34","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":6298,"mutability":"mutable","name":"sourceGatewayAddress","nameLocation":"682:20:34","nodeType":"VariableDeclaration","scope":6304,"src":"674:28:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6297,"name":"address","nodeType":"ElementaryTypeName","src":"674:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6300,"mutability":"mutable","name":"destinationGatewayAddress","nameLocation":"720:25:34","nodeType":"VariableDeclaration","scope":6304,"src":"712:33:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6299,"name":"address","nodeType":"ElementaryTypeName","src":"712:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6303,"mutability":"mutable","name":"payload","nameLocation":"790:7:34","nodeType":"VariableDeclaration","scope":6304,"src":"755:42:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_MessagingPayload_$6211_storage_ptr","typeString":"struct ICrossSyncGateway.MessagingPayload"},"typeName":{"id":6302,"nodeType":"UserDefinedTypeName","pathNode":{"id":6301,"name":"ICrossSyncGateway.MessagingPayload","nameLocations":["755:17:34","773:16:34"],"nodeType":"IdentifierPath","referencedDeclaration":6211,"src":"755:34:34"},"referencedDeclaration":6211,"src":"755:34:34","typeDescriptions":{"typeIdentifier":"t_struct$_MessagingPayload_$6211_storage_ptr","typeString":"struct ICrossSyncGateway.MessagingPayload"}},"visibility":"internal"}],"name":"ICrossSyncMultiHopMessagingData","nameLocation":"478:31:34","nodeType":"StructDefinition","scope":6325,"src":"471:333:34","visibility":"public"},{"functionSelector":"36c5eda4","id":6314,"implemented":false,"kind":"function","modifiers":[],"name":"executeSendMessage","nameLocation":"819:18:34","nodeType":"FunctionDefinition","parameters":{"id":6310,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6307,"mutability":"mutable","name":"_data","nameLocation":"880:5:34","nodeType":"VariableDeclaration","scope":6314,"src":"847:38:34","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_ICrossSyncMessagingData_$6284_calldata_ptr","typeString":"struct IMessagingImpl.ICrossSyncMessagingData"},"typeName":{"id":6306,"nodeType":"UserDefinedTypeName","pathNode":{"id":6305,"name":"ICrossSyncMessagingData","nameLocations":["847:23:34"],"nodeType":"IdentifierPath","referencedDeclaration":6284,"src":"847:23:34"},"referencedDeclaration":6284,"src":"847:23:34","typeDescriptions":{"typeIdentifier":"t_struct$_ICrossSyncMessagingData_$6284_storage_ptr","typeString":"struct IMessagingImpl.ICrossSyncMessagingData"}},"visibility":"internal"},{"constant":false,"id":6309,"mutability":"mutable","name":"_gasLimit","nameLocation":"895:9:34","nodeType":"VariableDeclaration","scope":6314,"src":"887:17:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6308,"name":"uint256","nodeType":"ElementaryTypeName","src":"887:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"837:68:34"},"returnParameters":{"id":6313,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6312,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6314,"src":"931:14:34","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":6311,"name":"bytes","nodeType":"ElementaryTypeName","src":"931:5:34","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"930:16:34"},"scope":6325,"src":"810:138:34","stateMutability":"payable","virtual":false,"visibility":"external"},{"functionSelector":"604a172c","id":6324,"implemented":false,"kind":"function","modifiers":[],"name":"getFee","nameLocation":"1133:6:34","nodeType":"FunctionDefinition","parameters":{"id":6320,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6317,"mutability":"mutable","name":"_data","nameLocation":"1173:5:34","nodeType":"VariableDeclaration","scope":6324,"src":"1140:38:34","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_ICrossSyncMessagingData_$6284_calldata_ptr","typeString":"struct IMessagingImpl.ICrossSyncMessagingData"},"typeName":{"id":6316,"nodeType":"UserDefinedTypeName","pathNode":{"id":6315,"name":"ICrossSyncMessagingData","nameLocations":["1140:23:34"],"nodeType":"IdentifierPath","referencedDeclaration":6284,"src":"1140:23:34"},"referencedDeclaration":6284,"src":"1140:23:34","typeDescriptions":{"typeIdentifier":"t_struct$_ICrossSyncMessagingData_$6284_storage_ptr","typeString":"struct IMessagingImpl.ICrossSyncMessagingData"}},"visibility":"internal"},{"constant":false,"id":6319,"mutability":"mutable","name":"_gasLimit","nameLocation":"1188:9:34","nodeType":"VariableDeclaration","scope":6324,"src":"1180:17:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6318,"name":"uint256","nodeType":"ElementaryTypeName","src":"1180:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1139:59:34"},"returnParameters":{"id":6323,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6322,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6324,"src":"1221:7:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6321,"name":"uint256","nodeType":"ElementaryTypeName","src":"1221:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1220:9:34"},"scope":6325,"src":"1124:106:34","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":6326,"src":"114:1123:34","usedErrors":[]}],"src":"33:1204:34"},"id":34}},"contracts":{"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol":{"AccessControlEnumerableUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"getRoleMember","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleMemberCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Extension of {AccessControl} that allows enumerating the members of each role.","kind":"dev","methods":{"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"getRoleMember(bytes32,uint256)":{"details":"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."},"getRoleMemberCount(bytes32)":{"details":"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"DEFAULT_ADMIN_ROLE()":"a217fddf","getRoleAdmin(bytes32)":"248a9ca3","getRoleMember(bytes32,uint256)":"9010d07c","getRoleMemberCount(bytes32)":"ca15c873","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Extension of {AccessControl} that allows enumerating the members of each role.\",\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\":\"AccessControlEnumerableUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"./AccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\\n    function __AccessControlEnumerable_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControlEnumerable_init_unchained() internal onlyInitializing {\\n    }\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc2dfd6ba9449f61b6b03b262182faf302f093a8c05dd10792aeecb4ed1663c0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xfeefb24d068524440e1ba885efdf105d91f83504af3c2d745ffacc4595396831\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7acbc538aad6eb4614e26612a8c5c0149bb8808db95e2638d245a8365f63e572\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x1c65595a26548a1b2263315b08a56334a2d7087319814437559c3c96025e939f\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1107,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:AccessControlEnumerableUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":1110,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:AccessControlEnumerableUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":2104,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:AccessControlEnumerableUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":3137,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:AccessControlEnumerableUpgradeable","label":"__gap","offset":0,"slot":"51","type":"t_array(t_uint256)50_storage"},{"astId":184,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:AccessControlEnumerableUpgradeable","label":"_roles","offset":0,"slot":"101","type":"t_mapping(t_bytes32,t_struct(RoleData)179_storage)"},{"astId":479,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:AccessControlEnumerableUpgradeable","label":"__gap","offset":0,"slot":"102","type":"t_array(t_uint256)49_storage"},{"astId":33,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:AccessControlEnumerableUpgradeable","label":"_roleMembers","offset":0,"slot":"151","type":"t_mapping(t_bytes32,t_struct(AddressSet)4447_storage)"},{"astId":143,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:AccessControlEnumerableUpgradeable","label":"__gap","offset":0,"slot":"152","type":"t_array(t_uint256)49_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_bytes32)dyn_storage":{"base":"t_bytes32","encoding":"dynamic_array","label":"bytes32[]","numberOfBytes":"32"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_bytes32,t_struct(AddressSet)4447_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)","numberOfBytes":"32","value":"t_struct(AddressSet)4447_storage"},"t_mapping(t_bytes32,t_struct(RoleData)179_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData)","numberOfBytes":"32","value":"t_struct(RoleData)179_storage"},"t_mapping(t_bytes32,t_uint256)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_struct(AddressSet)4447_storage":{"encoding":"inplace","label":"struct EnumerableSetUpgradeable.AddressSet","members":[{"astId":4446,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:AccessControlEnumerableUpgradeable","label":"_inner","offset":0,"slot":"0","type":"t_struct(Set)4132_storage"}],"numberOfBytes":"64"},"t_struct(RoleData)179_storage":{"encoding":"inplace","label":"struct AccessControlUpgradeable.RoleData","members":[{"astId":176,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:AccessControlEnumerableUpgradeable","label":"members","offset":0,"slot":"0","type":"t_mapping(t_address,t_bool)"},{"astId":178,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:AccessControlEnumerableUpgradeable","label":"adminRole","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"},"t_struct(Set)4132_storage":{"encoding":"inplace","label":"struct EnumerableSetUpgradeable.Set","members":[{"astId":4127,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:AccessControlEnumerableUpgradeable","label":"_values","offset":0,"slot":"0","type":"t_array(t_bytes32)dyn_storage"},{"astId":4131,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:AccessControlEnumerableUpgradeable","label":"_indexes","offset":0,"slot":"1","type":"t_mapping(t_bytes32,t_uint256)"}],"numberOfBytes":"64"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol":{"AccessControlUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Contract module that allows children to implement role-based access control mechanisms. This is a lightweight version that doesn't allow enumerating role members except through off-chain means by accessing the contract event logs. Some applications may benefit from on-chain enumerability, for those cases see {AccessControlEnumerable}. Roles are referred to by their `bytes32` identifier. These should be exposed in the external API and be unique. The best way to achieve this is by using `public constant` hash digests: ```solidity bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\"); ``` Roles can be used to represent a set of permissions. To restrict access to a function call, use {hasRole}: ```solidity function foo() public {     require(hasRole(MY_ROLE, msg.sender));     ... } ``` Roles can be granted and revoked dynamically via the {grantRole} and {revokeRole} functions. Each role has an associated admin role, and only accounts that have a role's admin role can call {grantRole} and {revokeRole}. By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means that only accounts with this role will be able to grant or revoke other roles. More complex role relationships can be created by using {_setRoleAdmin}. WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to grant and revoke this role. Extra precautions should be taken to secure accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules} to enforce additional security measures for this role.","kind":"dev","methods":{"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"DEFAULT_ADMIN_ROLE()":"a217fddf","getRoleAdmin(bytes32)":"248a9ca3","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module that allows children to implement role-based access control mechanisms. This is a lightweight version that doesn't allow enumerating role members except through off-chain means by accessing the contract event logs. Some applications may benefit from on-chain enumerability, for those cases see {AccessControlEnumerable}. Roles are referred to by their `bytes32` identifier. These should be exposed in the external API and be unique. The best way to achieve this is by using `public constant` hash digests: ```solidity bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\"); ``` Roles can be used to represent a set of permissions. To restrict access to a function call, use {hasRole}: ```solidity function foo() public {     require(hasRole(MY_ROLE, msg.sender));     ... } ``` Roles can be granted and revoked dynamically via the {grantRole} and {revokeRole} functions. Each role has an associated admin role, and only accounts that have a role's admin role can call {grantRole} and {revokeRole}. By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means that only accounts with this role will be able to grant or revoke other roles. More complex role relationships can be created by using {_setRoleAdmin}. WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to grant and revoke this role. Extra precautions should be taken to secure accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules} to enforce additional security measures for this role.\",\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":\"AccessControlUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xfeefb24d068524440e1ba885efdf105d91f83504af3c2d745ffacc4595396831\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1107,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":1110,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":2104,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":3137,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable","label":"__gap","offset":0,"slot":"51","type":"t_array(t_uint256)50_storage"},{"astId":184,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable","label":"_roles","offset":0,"slot":"101","type":"t_mapping(t_bytes32,t_struct(RoleData)179_storage)"},{"astId":479,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable","label":"__gap","offset":0,"slot":"102","type":"t_array(t_uint256)49_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_bytes32,t_struct(RoleData)179_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData)","numberOfBytes":"32","value":"t_struct(RoleData)179_storage"},"t_struct(RoleData)179_storage":{"encoding":"inplace","label":"struct AccessControlUpgradeable.RoleData","members":[{"astId":176,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable","label":"members","offset":0,"slot":"0","type":"t_mapping(t_address,t_bool)"},{"astId":178,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable","label":"adminRole","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol":{"IAccessControlEnumerableUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"getRoleMember","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleMemberCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"External interface of AccessControlEnumerable declared to support ERC165 detection.","kind":"dev","methods":{"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}."},"getRoleMember(bytes32,uint256)":{"details":"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."},"getRoleMemberCount(bytes32)":{"details":"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"getRoleAdmin(bytes32)":"248a9ca3","getRoleMember(bytes32,uint256)":"9010d07c","getRoleMemberCount(bytes32)":"ca15c873","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"External interface of AccessControlEnumerable declared to support ERC165 detection.\",\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\":\"IAccessControlEnumerableUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7acbc538aad6eb4614e26612a8c5c0149bb8808db95e2638d245a8365f63e572\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol":{"IAccessControlUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"External interface of AccessControl declared to support ERC165 detection.","events":{"RoleAdminChanged(bytes32,bytes32,bytes32)":{"details":"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"},"RoleGranted(bytes32,address,address)":{"details":"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."},"RoleRevoked(bytes32,address,address)":{"details":"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"}},"kind":"dev","methods":{"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"getRoleAdmin(bytes32)":"248a9ca3","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"External interface of AccessControl declared to support ERC165 detection.\",\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":\"IAccessControlUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol":{"OwnableUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.","kind":"dev","methods":{"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":\"OwnableUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1107,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":1110,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":2104,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":589,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"_owner","offset":0,"slot":"51","type":"t_address"},{"astId":709,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"__gap","offset":0,"slot":"52","type":"t_array(t_uint256)49_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol":{"IERC1967Upgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"previousAdmin","type":"address"},{"indexed":false,"internalType":"address","name":"newAdmin","type":"address"}],"name":"AdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"beacon","type":"address"}],"name":"BeaconUpgraded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"implementation","type":"address"}],"name":"Upgraded","type":"event"}],"devdoc":{"details":"ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC. _Available since v4.8.3._","events":{"AdminChanged(address,address)":{"details":"Emitted when the admin account has changed."},"BeaconUpgraded(address)":{"details":"Emitted when the beacon is changed."},"Upgraded(address)":{"details":"Emitted when the implementation is upgraded."}},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC. _Available since v4.8.3._\",\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":\"IERC1967Upgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x47d6e06872b12e72c79d1b5eb55842f860b5fb1207b2317c2358d2766b950a7b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/interfaces/IERC5267Upgradeable.sol":{"IERC5267Upgradeable":{"abi":[{"anonymous":false,"inputs":[],"name":"EIP712DomainChanged","type":"event"},{"inputs":[],"name":"eip712Domain","outputs":[{"internalType":"bytes1","name":"fields","type":"bytes1"},{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"version","type":"string"},{"internalType":"uint256","name":"chainId","type":"uint256"},{"internalType":"address","name":"verifyingContract","type":"address"},{"internalType":"bytes32","name":"salt","type":"bytes32"},{"internalType":"uint256[]","name":"extensions","type":"uint256[]"}],"stateMutability":"view","type":"function"}],"devdoc":{"events":{"EIP712DomainChanged()":{"details":"MAY be emitted to signal that the domain could have changed."}},"kind":"dev","methods":{"eip712Domain()":{"details":"returns the fields and values that describe the domain separator used by this contract for EIP-712 signature."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"eip712Domain()":"84b0196e"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"}},\"kind\":\"dev\",\"methods\":{\"eip712Domain()\":{\"details\":\"returns the fields and values that describe the domain separator used by this contract for EIP-712 signature.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/interfaces/IERC5267Upgradeable.sol\":\"IERC5267Upgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/interfaces/IERC5267Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC5267Upgradeable {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\",\"keccak256\":\"0xe562dab443278837fa50faddb76743399e942181881db8dccaea3bd1712994db\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol":{"IERC1822ProxiableUpgradeable":{"abi":[{"inputs":[],"name":"proxiableUUID","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified proxy whose upgrades are fully controlled by the current implementation.","kind":"dev","methods":{"proxiableUUID()":{"details":"Returns the storage slot that the proxiable contract assumes is being used to store the implementation address. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"proxiableUUID()":"52d1902d"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified proxy whose upgrades are fully controlled by the current implementation.\",\"kind\":\"dev\",\"methods\":{\"proxiableUUID()\":{\"details\":\"Returns the storage slot that the proxiable contract assumes is being used to store the implementation address. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":\"IERC1822ProxiableUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol":{"ERC1967UpgradeUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"previousAdmin","type":"address"},{"indexed":false,"internalType":"address","name":"newAdmin","type":"address"}],"name":"AdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"beacon","type":"address"}],"name":"BeaconUpgraded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"implementation","type":"address"}],"name":"Upgraded","type":"event"}],"devdoc":{"details":"This abstract contract provides getters and event emitting update functions for https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots. _Available since v4.1._","kind":"dev","methods":{},"stateVariables":{"_ADMIN_SLOT":{"details":"Storage slot with the admin of the contract. This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is validated in the constructor."},"_BEACON_SLOT":{"details":"The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy. This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor."},"_IMPLEMENTATION_SLOT":{"details":"Storage slot with the address of the current implementation. This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is validated in the constructor."},"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"This abstract contract provides getters and event emitting update functions for https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots. _Available since v4.1._\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_ADMIN_SLOT\":{\"details\":\"Storage slot with the admin of the contract. This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is validated in the constructor.\"},\"_BEACON_SLOT\":{\"details\":\"The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy. This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\"},\"_IMPLEMENTATION_SLOT\":{\"details\":\"Storage slot with the address of the current implementation. This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is validated in the constructor.\"},\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":\"ERC1967UpgradeUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x47d6e06872b12e72c79d1b5eb55842f860b5fb1207b2317c2358d2766b950a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x584ebdf9c1118a7c773f98788e3f3ede01982bdf8932aa06f5acc7d54876e161\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x07ac95acad040f1fb1f6120dd0aa5f702db69446e95f82613721879d30de0908\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1107,"contract":"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":1110,"contract":"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":1089,"contract":"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"}],"types":{"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol":{"IBeaconUpgradeable":{"abi":[{"inputs":[],"name":"implementation","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This is the interface that {BeaconProxy} expects of its beacon.","kind":"dev","methods":{"implementation()":{"details":"Must return an address that can be used as a delegate call target. {BeaconProxy} will check that this address is a contract."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"implementation()":"5c60da1b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This is the interface that {BeaconProxy} expects of its beacon.\",\"kind\":\"dev\",\"methods\":{\"implementation()\":{\"details\":\"Must return an address that can be used as a delegate call target. {BeaconProxy} will check that this address is a contract.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":\"IBeaconUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"Initializable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"}],"devdoc":{"custom:oz-upgrades-unsafe-allow":"constructor constructor() {     _disableInitializers(); } ``` ====","details":"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ```solidity contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\"MyToken\", \"MTK\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\"MyToken\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```","events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{},"stateVariables":{"_initialized":{"custom:oz-retyped-from":"bool","details":"Indicates that the contract has been initialized."},"_initializing":{"details":"Indicates that the contract is in the process of being initialized."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor constructor() {     _disableInitializers(); } ``` ====\",\"details\":\"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ```solidity contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\\\"MyToken\\\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_initialized\":{\"custom:oz-retyped-from\":\"bool\",\"details\":\"Indicates that the contract has been initialized.\"},\"_initializing\":{\"details\":\"Indicates that the contract is in the process of being initialized.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":\"Initializable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1107,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":1110,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"}],"types":{"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol":{"UUPSUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"previousAdmin","type":"address"},{"indexed":false,"internalType":"address","name":"newAdmin","type":"address"}],"name":"AdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"beacon","type":"address"}],"name":"BeaconUpgraded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"implementation","type":"address"}],"name":"Upgraded","type":"event"},{"inputs":[],"name":"proxiableUUID","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newImplementation","type":"address"}],"name":"upgradeTo","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newImplementation","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"upgradeToAndCall","outputs":[],"stateMutability":"payable","type":"function"}],"devdoc":{"details":"An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy. A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing `UUPSUpgradeable` with a custom implementation of upgrades. The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism. _Available since v4.1._","kind":"dev","methods":{"proxiableUUID()":{"details":"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."},"upgradeTo(address)":{"custom:oz-upgrades-unsafe-allow-reachable":"delegatecall","details":"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."},"upgradeToAndCall(address,bytes)":{"custom:oz-upgrades-unsafe-allow-reachable":"delegatecall","details":"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"__self":{"custom:oz-upgrades-unsafe-allow":"state-variable-immutable state-variable-assignment"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"proxiableUUID()":"52d1902d","upgradeTo(address)":"3659cfe6","upgradeToAndCall(address,bytes)":"4f1ef286"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy. A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing `UUPSUpgradeable` with a custom implementation of upgrades. The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism. _Available since v4.1._\",\"kind\":\"dev\",\"methods\":{\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"upgradeTo(address)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"},\"__self\":{\"custom:oz-upgrades-unsafe-allow\":\"state-variable-immutable state-variable-assignment\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":\"UUPSUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x47d6e06872b12e72c79d1b5eb55842f860b5fb1207b2317c2358d2766b950a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x584ebdf9c1118a7c773f98788e3f3ede01982bdf8932aa06f5acc7d54876e161\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb607cb94c27e89750f5ae2ccebcb94e654e926f6125f4fd4c6262c89875118ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x07ac95acad040f1fb1f6120dd0aa5f702db69446e95f82613721879d30de0908\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1107,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":1110,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":1089,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":1404,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable","label":"__gap","offset":0,"slot":"51","type":"t_array(t_uint256)50_storage"}],"types":{"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol":{"PausableUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Contract module which allows children to implement an emergency stop mechanism that can be triggered by an authorized account. This module is used through inheritance. It will make available the modifiers `whenNotPaused` and `whenPaused`, which can be applied to the functions of your contract. Note that they will not be pausable by simply including this module, only once the modifiers are put in place.","events":{"Paused(address)":{"details":"Emitted when the pause is triggered by `account`."},"Unpaused(address)":{"details":"Emitted when the pause is lifted by `account`."}},"kind":"dev","methods":{"paused()":{"details":"Returns true if the contract is paused, and false otherwise."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"paused()":"5c975abb"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which allows children to implement an emergency stop mechanism that can be triggered by an authorized account. This module is used through inheritance. It will make available the modifiers `whenNotPaused` and `whenPaused`, which can be applied to the functions of your contract. Note that they will not be pausable by simply including this module, only once the modifiers are put in place.\",\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":\"PausableUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1107,"contract":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":1110,"contract":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":2104,"contract":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":1426,"contract":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable","label":"_paused","offset":0,"slot":"51","type":"t_bool"},{"astId":1531,"contract":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable","label":"__gap","offset":0,"slot":"52","type":"t_array(t_uint256)49_storage"}],"types":{"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol":{"ReentrancyGuardUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"}],"devdoc":{"details":"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].","kind":"dev","methods":{},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":\"ReentrancyGuardUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb82ef33f43b6b96109687d91b39c94573fdccaaa423fe28e8ba0977b31c023e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1107,"contract":"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":1110,"contract":"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":1546,"contract":"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable","label":"_status","offset":0,"slot":"1","type":"t_uint256"},{"astId":1615,"contract":"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable","label":"__gap","offset":0,"slot":"2","type":"t_array(t_uint256)49_storage"}],"types":{"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol":{"IERC20Upgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 standard as defined in the EIP.","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":\"IERC20Upgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol":{"IERC20PermitUpgradeable":{"abi":[{"inputs":[],"name":"DOMAIN_SEPARATOR","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"nonces","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permit","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.","kind":"dev","methods":{"DOMAIN_SEPARATOR()":{"details":"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."},"nonces(address)":{"details":"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."},"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":{"details":"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"DOMAIN_SEPARATOR()":"3644e515","nonces(address)":"7ecebe00","permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":"d505accf"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section].\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\":\"IERC20PermitUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xd60f939a3ca0199014d079b4dd66aa757954334947d81eb5c1d35d7a83061ab3\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"AddressUpgradeable":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea2646970667358221220b1e3be4c5b3b88c3c0cf80d5016514a1a8cec2d1065e8003ff831c61f49c62db64736f6c63430008110033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB1 0xE3 0xBE 0x4C JUMPDEST EXTCODESIZE DUP9 0xC3 0xC0 0xCF DUP1 0xD5 ADD PUSH6 0x14A1A8CEC2D1 MOD 0x5E DUP1 SUB SELFDESTRUCT DUP4 SHR PUSH2 0xF49C PUSH3 0xDB6473 PUSH16 0x6C634300081100330000000000000000 ","sourceMap":"194:9180:17:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"600080fdfea2646970667358221220b1e3be4c5b3b88c3c0cf80d5016514a1a8cec2d1065e8003ff831c61f49c62db64736f6c63430008110033","opcodes":"PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB1 0xE3 0xBE 0x4C JUMPDEST EXTCODESIZE DUP9 0xC3 0xC0 0xCF DUP1 0xD5 ADD PUSH6 0x14A1A8CEC2D1 MOD 0x5E DUP1 SUB SELFDESTRUCT DUP4 SHR PUSH2 0xF49C PUSH3 0xDB6473 PUSH16 0x6C634300081100330000000000000000 ","sourceMap":"194:9180:17:-:0;;"},"gasEstimates":{"creation":{"codeDepositCost":"11600","executionCost":"infinite","totalCost":"infinite"},"internal":{"_revert(bytes memory,string memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionDelegateCall(address,bytes memory)":"infinite","functionDelegateCall(address,bytes memory,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory,string memory)":"infinite","verifyCallResultFromTarget(address,bool,bytes memory,string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":\"AddressUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"ContextUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"}],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":\"ContextUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1107,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":1110,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":2104,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"}],"types":{"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol":{"StorageSlotUpgradeable":{"abi":[],"devdoc":{"details":"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ```solidity contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._ _Available since v4.9 for `string`, `bytes`._","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea2646970667358221220d5316a15c9aedf1238b60ad56577f4a69cfc811a6b1f01726800648dfd510cb364736f6c63430008110033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD5 BALANCE PUSH11 0x15C9AEDF1238B60AD56577 DELEGATECALL 0xA6 SWAP13 0xFC DUP2 BYTE PUSH12 0x1F01726800648DFD510CB364 PUSH20 0x6F6C634300081100330000000000000000000000 ","sourceMap":"1420:2696:19:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"600080fdfea2646970667358221220d5316a15c9aedf1238b60ad56577f4a69cfc811a6b1f01726800648dfd510cb364736f6c63430008110033","opcodes":"PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD5 BALANCE PUSH11 0x15C9AEDF1238B60AD56577 DELEGATECALL 0xA6 SWAP13 0xFC DUP2 BYTE PUSH12 0x1F01726800648DFD510CB364 PUSH20 0x6F6C634300081100330000000000000000000000 ","sourceMap":"1420:2696:19:-:0;;"},"gasEstimates":{"creation":{"codeDepositCost":"11600","executionCost":"infinite","totalCost":"infinite"},"internal":{"getAddressSlot(bytes32)":"infinite","getBooleanSlot(bytes32)":"infinite","getBytes32Slot(bytes32)":"infinite","getBytesSlot(bytes storage pointer)":"infinite","getBytesSlot(bytes32)":"infinite","getStringSlot(bytes32)":"infinite","getStringSlot(string storage pointer)":"infinite","getUint256Slot(bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ```solidity contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._ _Available since v4.9 for `string`, `bytes`._\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":\"StorageSlotUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x07ac95acad040f1fb1f6120dd0aa5f702db69446e95f82613721879d30de0908\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol":{"StringsUpgradeable":{"abi":[],"devdoc":{"details":"String operations.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea2646970667358221220b7f8fb8824c12d5bad06367daa996c883bc33c6736527d46971e652d5fb9a66e64736f6c63430008110033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB7 0xF8 0xFB DUP9 0x24 0xC1 0x2D JUMPDEST 0xAD MOD CALLDATASIZE PUSH30 0xAA996C883BC33C6736527D46971E652D5FB9A66E64736F6C634300081100 CALLER ","sourceMap":"242:2603:20:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"600080fdfea2646970667358221220b7f8fb8824c12d5bad06367daa996c883bc33c6736527d46971e652d5fb9a66e64736f6c63430008110033","opcodes":"PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB7 0xF8 0xFB DUP9 0x24 0xC1 0x2D JUMPDEST 0xAD MOD CALLDATASIZE PUSH30 0xAA996C883BC33C6736527D46971E652D5FB9A66E64736F6C634300081100 CALLER ","sourceMap":"242:2603:20:-:0;;"},"gasEstimates":{"creation":{"codeDepositCost":"11600","executionCost":"infinite","totalCost":"infinite"},"internal":{"equal(string memory,string memory)":"infinite","toHexString(address)":"infinite","toHexString(uint256)":"infinite","toHexString(uint256,uint256)":"infinite","toString(int256)":"infinite","toString(uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":\"StringsUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol":{"ECDSAUpgradeable":{"abi":[],"devdoc":{"details":"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea264697066735822122011874f7edb9187a2e11e42a8cc1c92bfdb42e17a726b6672174c63602727b31d64736f6c63430008110033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 GT DUP8 0x4F PUSH31 0xDB9187A2E11E42A8CC1C92BFDB42E17A726B6672174C63602727B31D64736F PUSH13 0x63430008110033000000000000 ","sourceMap":"380:8783:21:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"600080fdfea264697066735822122011874f7edb9187a2e11e42a8cc1c92bfdb42e17a726b6672174c63602727b31d64736f6c63430008110033","opcodes":"PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 GT DUP8 0x4F PUSH31 0xDB9187A2E11E42A8CC1C92BFDB42E17A726B6672174C63602727B31D64736F PUSH13 0x63430008110033000000000000 ","sourceMap":"380:8783:21:-:0;;"},"gasEstimates":{"creation":{"codeDepositCost":"11600","executionCost":"infinite","totalCost":"infinite"},"internal":{"_throwError(enum ECDSAUpgradeable.RecoverError)":"infinite","recover(bytes32,bytes memory)":"infinite","recover(bytes32,bytes32,bytes32)":"infinite","recover(bytes32,uint8,bytes32,bytes32)":"infinite","toDataWithIntendedValidatorHash(address,bytes memory)":"infinite","toEthSignedMessageHash(bytes memory)":"infinite","toEthSignedMessageHash(bytes32)":"infinite","toTypedDataHash(bytes32,bytes32)":"infinite","tryRecover(bytes32,bytes memory)":"infinite","tryRecover(bytes32,bytes32,bytes32)":"infinite","tryRecover(bytes32,uint8,bytes32,bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":\"ECDSAUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0xa014f65d84b02827055d99993ccdbfb4b56b2c9e91eb278d82a93330659d06e4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol":{"EIP712Upgradeable":{"abi":[{"anonymous":false,"inputs":[],"name":"EIP712DomainChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"inputs":[],"name":"eip712Domain","outputs":[{"internalType":"bytes1","name":"fields","type":"bytes1"},{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"version","type":"string"},{"internalType":"uint256","name":"chainId","type":"uint256"},{"internalType":"address","name":"verifyingContract","type":"address"},{"internalType":"bytes32","name":"salt","type":"bytes32"},{"internalType":"uint256[]","name":"extensions","type":"uint256[]"}],"stateMutability":"view","type":"function"}],"devdoc":{"custom:storage-size":"52","details":"https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data. The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible, thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in their contracts using a combination of `abi.encode` and `keccak256`. This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA ({_hashTypedDataV4}). The implementation of the domain separator was designed to be as efficient as possible while still properly updating the chain id to protect against replay attacks on an eventual fork of the chain. NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask]. NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain separator of the implementation contract. This will cause the `_domainSeparatorV4` function to always rebuild the separator from the immutable values, which is cheaper than accessing a cached version in cold storage. _Available since v3.4._","kind":"dev","methods":{"eip712Domain()":{"details":"See {EIP-5267}. _Available since v4.9._"}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"_hashedName":{"custom:oz-renamed-from":"_HASHED_NAME"},"_hashedVersion":{"custom:oz-renamed-from":"_HASHED_VERSION"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"eip712Domain()":"84b0196e"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"custom:storage-size\":\"52\",\"details\":\"https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data. The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible, thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in their contracts using a combination of `abi.encode` and `keccak256`. This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA ({_hashTypedDataV4}). The implementation of the domain separator was designed to be as efficient as possible while still properly updating the chain id to protect against replay attacks on an eventual fork of the chain. NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask]. NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain separator of the implementation contract. This will cause the `_domainSeparatorV4` function to always rebuild the separator from the immutable values, which is cheaper than accessing a cached version in cold storage. _Available since v3.4._\",\"kind\":\"dev\",\"methods\":{\"eip712Domain()\":{\"details\":\"See {EIP-5267}. _Available since v4.9._\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"},\"_hashedName\":{\"custom:oz-renamed-from\":\"_HASHED_NAME\"},\"_hashedVersion\":{\"custom:oz-renamed-from\":\"_HASHED_VERSION\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":\"EIP712Upgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/interfaces/IERC5267Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC5267Upgradeable {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\",\"keccak256\":\"0xe562dab443278837fa50faddb76743399e942181881db8dccaea3bd1712994db\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0xa014f65d84b02827055d99993ccdbfb4b56b2c9e91eb278d82a93330659d06e4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"./ECDSAUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC5267Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the `_domainSeparatorV4` function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * _Available since v3.4._\\n *\\n * @custom:storage-size 52\\n */\\nabstract contract EIP712Upgradeable is Initializable, IERC5267Upgradeable {\\n    bytes32 private constant _TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /// @custom:oz-renamed-from _HASHED_NAME\\n    bytes32 private _hashedName;\\n    /// @custom:oz-renamed-from _HASHED_VERSION\\n    bytes32 private _hashedVersion;\\n\\n    string private _name;\\n    string private _version;\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\\n        _name = name;\\n        _version = version;\\n\\n        // Reset prior values in storage if upgrading\\n        _hashedName = 0;\\n        _hashedVersion = 0;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator();\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash(), block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {EIP-5267}.\\n     *\\n     * _Available since v4.9._\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        override\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        // If the hashed name and version in storage are non-zero, the contract hasn't been properly initialized\\n        // and the EIP712 domain is not reliable, as it will be missing name and version.\\n        require(_hashedName == 0 && _hashedVersion == 0, \\\"EIP712: Uninitialized\\\");\\n\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _EIP712Name(),\\n            _EIP712Version(),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n\\n    /**\\n     * @dev The name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712Name() internal virtual view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev The version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712Version() internal virtual view returns (string memory) {\\n        return _version;\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Name` instead.\\n     */\\n    function _EIP712NameHash() internal view returns (bytes32) {\\n        string memory name = _EIP712Name();\\n        if (bytes(name).length > 0) {\\n            return keccak256(bytes(name));\\n        } else {\\n            // If the name is empty, the contract may have been upgraded without initializing the new storage.\\n            // We return the name hash in storage if non-zero, otherwise we assume the name is empty by design.\\n            bytes32 hashedName = _hashedName;\\n            if (hashedName != 0) {\\n                return hashedName;\\n            } else {\\n                return keccak256(\\\"\\\");\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Version` instead.\\n     */\\n    function _EIP712VersionHash() internal view returns (bytes32) {\\n        string memory version = _EIP712Version();\\n        if (bytes(version).length > 0) {\\n            return keccak256(bytes(version));\\n        } else {\\n            // If the version is empty, the contract may have been upgraded without initializing the new storage.\\n            // We return the version hash in storage if non-zero, otherwise we assume the version is empty by design.\\n            bytes32 hashedVersion = _hashedVersion;\\n            if (hashedVersion != 0) {\\n                return hashedVersion;\\n            } else {\\n                return keccak256(\\\"\\\");\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[48] private __gap;\\n}\\n\",\"keccak256\":\"0xeb8d6be406a373771724922eb41b5d593bc8e2dc705daa22cd1145cfc8f5a3a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1107,"contract":"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":1110,"contract":"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":2828,"contract":"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable","label":"_hashedName","offset":0,"slot":"1","type":"t_bytes32"},{"astId":2831,"contract":"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable","label":"_hashedVersion","offset":0,"slot":"2","type":"t_bytes32"},{"astId":2833,"contract":"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable","label":"_name","offset":0,"slot":"3","type":"t_string_storage"},{"astId":2835,"contract":"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable","label":"_version","offset":0,"slot":"4","type":"t_string_storage"},{"astId":3093,"contract":"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable","label":"__gap","offset":0,"slot":"5","type":"t_array(t_uint256)48_storage"}],"types":{"t_array(t_uint256)48_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[48]","numberOfBytes":"1536"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol":{"ERC165Upgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":\"ERC165Upgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1107,"contract":"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":1110,"contract":"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":3137,"contract":"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"}],"types":{"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol":{"IERC165Upgradeable":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":\"IERC165Upgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol":{"MathUpgradeable":{"abi":[],"devdoc":{"details":"Standard math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea2646970667358221220cdf7494090c2e23219151ab356765a732e589ac7b9322b7d4016331c77a275d564736f6c63430008110033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCD 0xF7 0x49 BLOCKHASH SWAP1 0xC2 0xE2 ORIGIN NOT ISZERO BYTE 0xB3 JUMP PUSH23 0x5A732E589AC7B9322B7D4016331C77A275D564736F6C63 NUMBER STOP ADDMOD GT STOP CALLER ","sourceMap":"202:12593:25:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"600080fdfea2646970667358221220cdf7494090c2e23219151ab356765a732e589ac7b9322b7d4016331c77a275d564736f6c63430008110033","opcodes":"PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCD 0xF7 0x49 BLOCKHASH SWAP1 0xC2 0xE2 ORIGIN NOT ISZERO BYTE 0xB3 JUMP PUSH23 0x5A732E589AC7B9322B7D4016331C77A275D564736F6C63 NUMBER STOP ADDMOD GT STOP CALLER ","sourceMap":"202:12593:25:-:0;;"},"gasEstimates":{"creation":{"codeDepositCost":"11600","executionCost":"infinite","totalCost":"infinite"},"internal":{"average(uint256,uint256)":"infinite","ceilDiv(uint256,uint256)":"infinite","log10(uint256)":"infinite","log10(uint256,enum MathUpgradeable.Rounding)":"infinite","log2(uint256)":"infinite","log2(uint256,enum MathUpgradeable.Rounding)":"infinite","log256(uint256)":"infinite","log256(uint256,enum MathUpgradeable.Rounding)":"infinite","max(uint256,uint256)":"infinite","min(uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256,enum MathUpgradeable.Rounding)":"infinite","sqrt(uint256)":"infinite","sqrt(uint256,enum MathUpgradeable.Rounding)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":\"MathUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol":{"SignedMathUpgradeable":{"abi":[],"devdoc":{"details":"Standard signed math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea2646970667358221220f738e7a1587e46a97962630e1d505803f7324f8c6a72e4de4cbbef964c1b8b2564736f6c63430008110033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF7 CODESIZE 0xE7 LOG1 PC PUSH31 0x46A97962630E1D505803F7324F8C6A72E4DE4CBBEF964C1B8B2564736F6C63 NUMBER STOP ADDMOD GT STOP CALLER ","sourceMap":"215:1058:26:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"600080fdfea2646970667358221220f738e7a1587e46a97962630e1d505803f7324f8c6a72e4de4cbbef964c1b8b2564736f6c63430008110033","opcodes":"PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF7 CODESIZE 0xE7 LOG1 PC PUSH31 0x46A97962630E1D505803F7324F8C6A72E4DE4CBBEF964C1B8B2564736F6C63 NUMBER STOP ADDMOD GT STOP CALLER ","sourceMap":"215:1058:26:-:0;;"},"gasEstimates":{"creation":{"codeDepositCost":"11600","executionCost":"infinite","totalCost":"infinite"},"internal":{"abs(int256)":"infinite","average(int256,int256)":"infinite","max(int256,int256)":"infinite","min(int256,int256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard signed math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":\"SignedMathUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol":{"EnumerableSetUpgradeable":{"abi":[],"devdoc":{"details":"Library for managing https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive types. Sets have the following properties: - Elements are added, removed, and checked for existence in constant time (O(1)). - Elements are enumerated in O(n). No guarantees are made on the ordering. ```solidity contract Example {     // Add the library methods     using EnumerableSet for EnumerableSet.AddressSet;     // Declare a set state variable     EnumerableSet.AddressSet private mySet; } ``` As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`) and `uint256` (`UintSet`) are supported. [WARNING] ==== Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable. See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info. In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet. ====","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea2646970667358221220edcb0fdbfb7680d0ea3faf983ac369c65722f51561a0cfdacc75fc4ae5cdc92f64736f6c63430008110033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xED 0xCB 0xF 0xDB 0xFB PUSH23 0x80D0EA3FAF983AC369C65722F51561A0CFDACC75FC4AE5 0xCD 0xC9 0x2F PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"1329:11641:27:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"600080fdfea2646970667358221220edcb0fdbfb7680d0ea3faf983ac369c65722f51561a0cfdacc75fc4ae5cdc92f64736f6c63430008110033","opcodes":"PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xED 0xCB 0xF 0xDB 0xFB PUSH23 0x80D0EA3FAF983AC369C65722F51561A0CFDACC75FC4AE5 0xCD 0xC9 0x2F PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"1329:11641:27:-:0;;"},"gasEstimates":{"creation":{"codeDepositCost":"11600","executionCost":"infinite","totalCost":"infinite"},"internal":{"_add(struct EnumerableSetUpgradeable.Set storage pointer,bytes32)":"infinite","_at(struct EnumerableSetUpgradeable.Set storage pointer,uint256)":"infinite","_contains(struct EnumerableSetUpgradeable.Set storage pointer,bytes32)":"infinite","_length(struct EnumerableSetUpgradeable.Set storage pointer)":"infinite","_remove(struct EnumerableSetUpgradeable.Set storage pointer,bytes32)":"infinite","_values(struct EnumerableSetUpgradeable.Set storage pointer)":"infinite","add(struct EnumerableSetUpgradeable.AddressSet storage pointer,address)":"infinite","add(struct EnumerableSetUpgradeable.Bytes32Set storage pointer,bytes32)":"infinite","add(struct EnumerableSetUpgradeable.UintSet storage pointer,uint256)":"infinite","at(struct EnumerableSetUpgradeable.AddressSet storage pointer,uint256)":"infinite","at(struct EnumerableSetUpgradeable.Bytes32Set storage pointer,uint256)":"infinite","at(struct EnumerableSetUpgradeable.UintSet storage pointer,uint256)":"infinite","contains(struct EnumerableSetUpgradeable.AddressSet storage pointer,address)":"infinite","contains(struct EnumerableSetUpgradeable.Bytes32Set storage pointer,bytes32)":"infinite","contains(struct EnumerableSetUpgradeable.UintSet storage pointer,uint256)":"infinite","length(struct EnumerableSetUpgradeable.AddressSet storage pointer)":"infinite","length(struct EnumerableSetUpgradeable.Bytes32Set storage pointer)":"infinite","length(struct EnumerableSetUpgradeable.UintSet storage pointer)":"infinite","remove(struct EnumerableSetUpgradeable.AddressSet storage pointer,address)":"infinite","remove(struct EnumerableSetUpgradeable.Bytes32Set storage pointer,bytes32)":"infinite","remove(struct EnumerableSetUpgradeable.UintSet storage pointer,uint256)":"infinite","values(struct EnumerableSetUpgradeable.AddressSet storage pointer)":"infinite","values(struct EnumerableSetUpgradeable.Bytes32Set storage pointer)":"infinite","values(struct EnumerableSetUpgradeable.UintSet storage pointer)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for managing https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive types. Sets have the following properties: - Elements are added, removed, and checked for existence in constant time (O(1)). - Elements are enumerated in O(n). No guarantees are made on the ordering. ```solidity contract Example {     // Add the library methods     using EnumerableSet for EnumerableSet.AddressSet;     // Declare a set state variable     EnumerableSet.AddressSet private mySet; } ``` As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`) and `uint256` (`UintSet`) are supported. [WARNING] ==== Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable. See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info. In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet. ====\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":\"EnumerableSetUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x1c65595a26548a1b2263315b08a56334a2d7087319814437559c3c96025e939f\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/CrossSyncGateway.sol":{"CrossSyncGateway":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"previousAdmin","type":"address"},{"indexed":false,"internalType":"address","name":"newAdmin","type":"address"}],"name":"AdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"beacon","type":"address"}],"name":"BeaconUpgraded","type":"event"},{"anonymous":false,"inputs":[],"name":"EIP712DomainChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"from","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"address","name":"feeAddress","type":"address"},{"indexed":true,"internalType":"uint256","name":"destinationChainId","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"routeId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"gasLimit","type":"uint256"}],"name":"SyncFeeCollected","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"implementation","type":"address"}],"name":"Upgraded","type":"event"},{"inputs":[],"name":"ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"PAUSER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"SUPER_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"UPGRADER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_admin","type":"address"}],"name":"addAdmin","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"addPauser","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_routeId","type":"uint256"},{"internalType":"address","name":"_routeAddress","type":"address"},{"internalType":"string","name":"_routeName","type":"string"}],"name":"addRoute","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_superAdmin","type":"address"}],"name":"addSuperAdmin","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_upgrader","type":"address"}],"name":"addUpgrader","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"crossSyncFeeAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"crossSyncFeePercent","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"destChainGatewayAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"eip712Domain","outputs":[{"internalType":"bytes1","name":"fields","type":"bytes1"},{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"version","type":"string"},{"internalType":"uint256","name":"chainId","type":"uint256"},{"internalType":"address","name":"verifyingContract","type":"address"},{"internalType":"bytes32","name":"salt","type":"bytes32"},{"internalType":"uint256[]","name":"extensions","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_destinationChainId","type":"uint256"},{"internalType":"uint256","name":"_routeId","type":"uint256"},{"components":[{"internalType":"address","name":"to","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct ICrossSyncGateway.MessagingPayload","name":"_payload","type":"tuple"},{"internalType":"uint256","name":"_gasLimit","type":"uint256"}],"name":"getFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getNativeCurrencyAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getNativeWrappedCurrencyAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_routeId","type":"uint256"}],"name":"getRoute","outputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"bool","name":"","type":"bool"},{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_routeId","type":"uint256"}],"name":"getRouteAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_routeId","type":"uint256"}],"name":"getRouteName","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_routeId","type":"uint256"}],"name":"getRouteValidity","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"messengerFee","type":"uint256"}],"name":"getSyncFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTrustedForwarder","outputs":[{"internalType":"address","name":"forwarder","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"_payload","type":"bytes"}],"name":"handleReceive","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"_name","type":"string"},{"internalType":"string","name":"_version","type":"string"},{"internalType":"address","name":"_nativeCurrencyWrappedAddress","type":"address"},{"internalType":"address","name":"_nativeCurrencyAddress","type":"address"},{"internalType":"address","name":"_owner","type":"address"},{"internalType":"address","name":"_crossSyncFeeAddress","type":"address"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"forwarder","type":"address"}],"name":"isTrustedForwarder","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"nativeCurrencyAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"nativeCurrencyWrappedAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"proxiableUUID","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"}],"name":"receiveUserNonceSeen","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_admin","type":"address"}],"name":"removeAdmin","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_pauser","type":"address"}],"name":"removePauser","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_routeId","type":"uint256"}],"name":"removeRoute","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_superAdmin","type":"address"}],"name":"removeSuperAdmin","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_upgrader","type":"address"}],"name":"removeUpgrader","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_destinationChainId","type":"uint256"},{"internalType":"uint256","name":"_routeId","type":"uint256"},{"components":[{"internalType":"address","name":"to","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct ICrossSyncGateway.MessagingPayload","name":"_payload","type":"tuple"},{"internalType":"uint256","name":"_gasLimit","type":"uint256"},{"internalType":"bytes","name":"_routeData","type":"bytes"}],"name":"sendMessage","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"}],"name":"sentUserNonce","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_crossSyncFeePercent","type":"uint256"}],"name":"setCrossSyncFee","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_crossSyncFeeAddress","type":"address"}],"name":"setCrossSyncFeeAddress","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"chainId","type":"uint256"},{"internalType":"address","name":"crossSyncGatewayAddress","type":"address"}],"name":"setDestChainGatewayAddress","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_nativeCurrencyAddress","type":"address"}],"name":"setNativeCurrencyAddress","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_nativeCurrencyWrappedAddress","type":"address"}],"name":"setNativeWrappedCurrencyAddress","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_routeId","type":"uint256"},{"internalType":"address","name":"_routeAddress","type":"address"}],"name":"setRouteAddress","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_routeId","type":"uint256"},{"internalType":"string","name":"_routeName","type":"string"}],"name":"setRouteName","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_routeId","type":"uint256"},{"internalType":"bool","name":"_isValid","type":"bool"}],"name":"setRouteValidity","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_newtrustedForwarder","type":"address"}],"name":"setTrustedForwarder","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"unpause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newImplementation","type":"address"}],"name":"upgradeTo","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newImplementation","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"upgradeToAndCall","outputs":[],"stateMutability":"payable","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"kind":"dev","methods":{"constructor":{"custom:oz-upgrades-unsafe-allow":"constructor"},"eip712Domain()":{"details":"See {EIP-5267}. _Available since v4.9._"},"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"getTrustedForwarder()":{"returns":{"forwarder":"The address of the Forwarder contract that is being used."}},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"isTrustedForwarder(address)":{"params":{"forwarder":"The address of the Forwarder contract that is being used."},"returns":{"_0":"isTrustedForwarder `true` if the Forwarder is trusted to forward relayed transactions by this Recipient."}},"owner()":{"details":"Returns the address of the current owner."},"paused()":{"details":"Returns true if the contract is paused, and false otherwise."},"proxiableUUID()":{"details":"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"transferOwnership(address)":{"details":"overriding the inherited {transferOwnership} function to reflect the admin changes into the {DEFAULT_ADMIN_ROLE}"},"upgradeTo(address)":{"custom:oz-upgrades-unsafe-allow-reachable":"delegatecall","details":"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."},"upgradeToAndCall(address,bytes)":{"custom:oz-upgrades-unsafe-allow-reachable":"delegatecall","details":"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60a08060405234620000e157306080526000549060ff8260081c166200008f575060ff8082160362000053575b6040516141d59081620000e7823960805181818161228501528181612376015261286f0152f35b60ff90811916176000557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160ff8152a1386200002c565b62461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b6064820152608490fd5b600080fdfe6080604052600436101561001b575b361561001957600080fd5b005b6000803560e01c80624c7591146131aa5780625e8eef146130f657806301ffc9a71461309f57806309b7d79114612fd55780631785f53c14612f24578063196c881e14612ef05780631fa5d2e714612eb0578063248a9ca314612e835780632b33cc8714612cdb5780632f2ff15d14612c7557806332495ce114612bdc57806336568abe14612b3f5780633659cfe61461284a57806336d8261a1461125557806338073f0c146114b25780633f4ba83a146127145780634429c25f146126cf5780634460bdd6146126a65780634902e4aa146126445780634f1ef2861461233657806352d1902d1461227257806356e3008b14612199578063572b6c051461216357806359b52ca4146121305780635c96a56114611d485780635c975abb14611d225780636050cafe14611c895780636b2c0f5514611b985780637048027514611ae6578063715018a614611a8957806375b238fc14611a605780637d0517d0146119e15780637faf251c146119ad5780638262c3171461198e57806382dc1ec4146118995780638456cb591461175757806384b0196e146114dc5780638898009d146114b25780638da5cb5b1461148957806391d148541461144057806398c339041461139b5780639ef42cbb1461136c578063a217fddf14611350578063acb7176b14611326578063b3292ff01461127f578063bd826ed714611255578063c50189b814611079578063ce1b815f14611050578063d10a0da31461100d578063d264a80314610f6a578063d547741f14610f29578063da74222814610e93578063e34381a114610c9c578063e511015814610bdb578063e56f2fe41461059a578063e63ab1e914610571578063f2fde38b146103e9578063f72c0d8b146103c0578063fa66358a146103545763fde278bc146102b9575061000e565b34610351576020366003190112610351576102d26133fe565b6102da614063565b600080516020614140833981519152835260fb6020526040832060018060a01b0380921660005260205260ff604060002054168015610336575b61031d90613e4f565b6101fe91166001600160601b0360a01b82541617905580f35b5061031d816033541682610348614063565b16149050610314565b80fd5b50346103515760203660031901126103515760043581526101f960205260409020805460ff60a082901c16916001600160a01b03909116906103bc9061039c90600101613d32565b6040519384938452151560208401526060604084015260608301906135d6565b0390f35b503461035157806003193601126103515760206040516000805160206140e08339815191528152f35b50346103515760208060031936011261056d576104046133fe565b61040c613a11565b610414613a11565b6001600160a01b039080821615610519578061043261043792613a74565b61390f565b61043f614063565b91818061044a614063565b1693169283036104bd576000805260fb8152604060002083600052815260ff60406000205416610478578380f35b6000805260fb81526040600020908360005252604060002060ff1981541690556104a0614063565b169060006000805160206141608339815191528180a43880808380f35b6084906040519062461bcd60e51b82526004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152fd5b60405162461bcd60e51b815260048101849052602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b5080fd5b503461035157806003193601126103515760206040516000805160206141208339815191528152f35b50346103515760c0366003190112610351576004356001600160401b03811161056d576105cb903690600401613586565b906024356001600160401b038111610bd7576105eb903690600401613586565b9092604435916001600160a01b03918284168403610bd257606435918383168303610bd257836084351660843503610bd25760a435958487168703610bd25788549060ff8260081c16159889809a610bc5575b8015610bae575b15610b52576106de6106e69261069d60ff8e6106f0978f600184198316178355610b41575b505460081c1661067981613dd8565b61068281613dd8565b6097805460ff60a01b1916905561069881613dd8565b613dd8565b6106ad6106a8614063565b613a74565b60ff8d5460081c16966106bf88613dd8565b6106c888613dd8565b6106d188613dd8565b600161012d5536916134b1565b9336916134b1565b9261069881613dd8565b8051906001600160401b038211610b2d57819061070f61016154613cf8565b601f8111610ade575b50602090601f8311600114610a54578a92610a49575b50508160011b916000199060031b1c191617610161555b8051906001600160401b038211610a3557819061076461016254613cf8565b601f81116109db575b50602090601f8311600114610951578992610946575b50508160011b916000199060031b1c191617610162555b8561015f5585610160556107b460ff875460081c16613dd8565b6107bc613a11565b8160843516156108f2576107d1608435613a74565b6107dc60843561390f565b600080516020614180833981519152600081815260fb6020527f339ab3ab2ddf8c30d545344e713975ca6ce592a0d5bc1375bb6cfaa6563006f180546000805160206141408339815191529182905590927fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9284929190849080a4600080516020614120833981519152600081815260408120600101805490859055929080a46001600160601b0360a01b92826101f7911684825416179055816101f891168382541617905560286101fd556101fe9216908254161790556108bb5780f35b61ff001981541681557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160018152a180f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b015190503880610783565b925061016289527f29af0939a5988989bfee913a9ad10b9335cb63ebc9fd2b69e5f877d0455ac9199089935b601f19841685106109c0576001945083601f198116106109a7575b505050811b016101625561079a565b015160001960f88460031b161c19169055388080610998565b8181015183556020948501946001909301929091019061097d565b610a25906101628b527f29af0939a5988989bfee913a9ad10b9335cb63ebc9fd2b69e5f877d0455ac919601f850160051c81019160208610610a2b575b601f0160051c0190613e38565b3861076d565b9091508190610a18565b634e487b7160e01b88526041600452602488fd5b01519050388061072e565b92506101618a527fafbb1c043347995df017ce3291b765e028ad5f784d2aa00c3f5e073760a4de8b908a935b601f1984168510610ac3576001945083601f19811610610aaa575b505050811b0161016155610745565b015160001960f88460031b161c19169055388080610a9b565b81810151835560209485019460019093019290910190610a80565b610b27906101618c527fafbb1c043347995df017ce3291b765e028ad5f784d2aa00c3f5e073760a4de8b601f850160051c81019160208610610a2b57601f0160051c0190613e38565b38610718565b634e487b7160e01b89526041600452602489fd5b61ffff19166101011781553861066a565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b1580156106455750600160ff841614610645565b50600160ff84161061063e565b600080fd5b8380fd5b503461035157602036600319011261035157610bf56133fe565b610bfd613a11565b6001600160a01b0390811660008181527f775ac87777436f29b0cd5453bf5db4da15d8938d0ef70de831d2edd17651cf6760205260409020546000805160206140e0833981519152929060ff1615610c53578380f35b8260005260fb6020526040600020826000526020526040600020600160ff19825416179055610c80614063565b16916000805160206140c0833981519152600080a43880808380f35b50346103515760209081600319360112610351576001600160401b03600435818111610e8f57610cd0903690600401613586565b9361012d946002865414610e4a57600286558201918181840312610e4657803590848211610e2a570190610100928383820312610e2a5760405193840184811086821117610e3257604052610d2483613414565b845281830135828501526040830135604085015260608401926060810135845260808101356080860152610d5a60a08201613414565b60a0860152610d6b60c08201613414565b60c086015260e081013590868211610e2e57610d88929101613530565b908160e085015260018060a01b0380835116935194511691015192823b15610e2a5791610de394939186809460405197889586948593631885c2f960e01b8552600485015260248401526060604484015260648301906135d6565b03925af18015610e1f57610dfa575b826001855580f35b8111610e0b57604052600138610df2565b634e487b7160e01b82526041600452602482fd5b6040513d85823e3d90fd5b8580fd5b8780fd5b634e487b7160e01b87526041600452602487fd5b8480fd5b60405162461bcd60e51b815260048101839052601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b8280fd5b503461035157602036600319011261035157610ead6133fe565b610eb5614063565b90600080516020614140833981519152835260fb6020526040832060018060a01b03809316845260205260ff6040842054168015610f0e575b610ef790613e4f565b166001600160601b0360a01b609754161760975580f35b50610ef7826033541683610f20614063565b16149050610eee565b503461035157604036600319011261035157610f67600435610f496133e8565b9080845260fb602052610f6260016040862001546135fb565b613997565b80f35b503461035157602036600319011261035157610f846133fe565b610f8c613a11565b6000805160206140e083398151915280835260fb602090815260408085206001600160a01b0394851680875292528420549192909160ff16610fcc578380f35b82845260fb602052604084208285526020526040842060ff198154169055610ff2614063565b16916000805160206141608339815191528480a43880808380f35b50346103515760203660031901126103515761103c600160406103bc9360043581526101f96020522001613d32565b6040519182916020835260208301906135d6565b50346103515780600319360112610351576097546040516001600160a01b039091168152602090f35b503461035157600319906080368301126103515760043560243592604435906001600160401b038211610bd757604090826004019236030112610e8f578383526101f96020948186526110d560ff604087205460a01c16613ed2565b6001600160a01b0392803584811690819003611251579161119d6111cb979694926111038a97951515613e91565b61110f46871415613f15565b8588526101fa8088526111298660408b2054161515613f73565b611131614063565b968661113b614063565b168a526101fb895260408a20468b52895260408a20818b52895260408a20549189528660408b2054169187604051996111738b613428565b1689528989015284604089015246606089015260808801523060a088015260c08701523690613530565b60e085015285528352604084205416604051808096819463181285cb60e21b83526064359060048401613fd4565b03915afa918215611244578192611215575b506127106111ee6101fd5484613ca8565b0482018092116112015750604051908152f35b634e487b7160e01b81526011600452602490fd5b9091508281813d831161123d575b61122d8183613475565b8101031261056d575190386111dd565b503d611223565b50604051903d90823e3d90fd5b8680fd5b50346103515780600319360112610351576101f7546040516001600160a01b039091168152602090f35b5034610351576020366003190112610351576112996133fe565b6112a1613a11565b60008051602061414083398151915280835260fb602090815260408085206001600160a01b0394851680875292528420549192909160ff16156112e2578380f35b82845260fb6020526040842082855260205260408420600160ff1982541617905561130b614063565b16916000805160206140c08339815191528480a43880808380f35b50346103515780600319360112610351576101fe546040516001600160a01b039091168152602090f35b5034610351578060031936011261035157602090604051908152f35b50346103515760203660031901126103515760206127106113926101fd54600435613ca8565b04604051908152f35b5034610351576040366003190112610351576113b56133e8565b6113bd614063565b600080516020614140833981519152835260fb602090815260408085206001600160a01b03938416865290915283205460ff168015611425575b61140090613e4f565b60043583526101fa6020526040832091166001600160601b0360a01b82541617905580f35b50611400816033541682611437614063565b161490506113f7565b50346103515760403660031901126103515760ff60406020926114616133e8565b600435825260fb85528282206001600160a01b03909116825284522054604051911615158152f35b50346103515780600319360112610351576033546040516001600160a01b039091168152602090f35b50346103515780600319360112610351576101f8546040516001600160a01b039091168152602090f35b503461035157806003193601126103515761015f54158061174c575b1561170f57604051816101618281549461151186613cf8565b9283835260019687811690816000146116ed5750600114611690575b5061153a92500383613475565b6040519080826101629182549261155084613cf8565b8084529388811690811561166e5750600114611611575b5061157492500383613475565b60405190602090818301938385106001600160401b03861117610e0b57928287936115cd8896886040528585526115bf60405198600f60f81b8a5260e0858b015260e08a01906135d6565b9088820360408a01526135d6565b924660608801523060808801528460a088015286840360c088015251928381520195925b8281106115fe5785870386f35b83518752958101959281019284016115f1565b845250908290867f29af0939a5988989bfee913a9ad10b9335cb63ebc9fd2b69e5f877d0455ac9195b828410611654575050509060206115749282010138611567565b60209294508054838589010152019101909186859361163a565b90506020925061157494915060ff191682840152151560051b82010138611567565b845250908290857fafbb1c043347995df017ce3291b765e028ad5f784d2aa00c3f5e073760a4de8b5b8284106116d35750505090602061153a928201013861152d565b6020929450805483858901015201910190918585936116b9565b90506020925061153a94915060ff191682840152151560051b8201013861152d565b60405162461bcd60e51b81526020600482015260156024820152741152540dcc4c8e88155b9a5b9a5d1a585b1a5e9959605a1b6044820152606490fd5b5061016054156114f8565b5034610351578060031936011261035157611770614063565b600080516020614120833981519152825260fb602090815260408084206001600160a01b039384168552825283205490919060ff168015611863575b8015611848575b6117bc90613e4f565b60975460ff8160a01c166118105760ff60a01b1916600160a01b176097557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2589190611805614063565b60405191168152a180f35b60405162461bcd60e51b815260048101849052601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606490fd5b506117bc81603354168261185a614063565b161490506117b3565b5061186c614063565b600080516020614140833981519152845260fb8352816040852091168452825260ff6040842054166117ac565b50346103515760208060031936011261056d576118b46133fe565b6118bc614063565b600080516020614140833981519152845260fb835260408085206001600160a01b039283168652845284205460ff168015611973575b6118fb90613e4f565b6000805160206141208339815191529283855260fb81528160408620931692838652815260ff60408620541615611930578480f35b83855260fb815260408520908386525260408420600160ff19825416179055611957614063565b16916000805160206140c08339815191528480a4388080808480f35b506118fb816033541682611985614063565b161490506118f2565b503461035157806003193601126103515760206101fd54604051908152f35b50346103515760203660031901126103515760209060043581526101fa8252604060018060a01b0391205416604051908152f35b503461035157602036600319011261035157611a3f6119fe614063565b600080516020614140833981519152835260fb602090815260408085206001600160a01b03938416865290915283205460ff16908115611a49575b50613e4f565b6004356101fd5580f35b60335481169150611a58614063565b161438611a39565b503461035157806003193601126103515760206040516000805160206141808339815191528152f35b5034610351578060031936011261035157611aa2613a11565b603380546001600160a01b0319811690915581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b50346103515760208060031936011261056d57611b016133fe565b611b09614063565b600080516020614140833981519152845260fb835260408085206001600160a01b039283168652845284205460ff168015611b7d575b611b4890613e4f565b6000805160206141808339815191529283855260fb81528160408620931692838652815260ff60408620541615611930578480f35b50611b48816033541682611b8f614063565b16149050611b3f565b50346103515760208060031936011261056d57611bb36133fe565b611bbb614063565b600080516020614140833981519152845260fb835260408085206001600160a01b039283168652845284205460ff168015611c6e575b611bfa90613e4f565b6000805160206141208339815191529283855260fb81528160408620931692838652815260ff604086205416611c2e578480f35b83855260fb81526040852090838652526040842060ff198154169055611c52614063565b16916000805160206141608339815191528480a4388080808480f35b50611bfa816033541682611c80614063565b16149050611bf1565b503461035157602036600319011261035157611ca36133fe565b611cab614063565b600080516020614140833981519152835260fb602090815260408085206001600160a01b03938416865290915283205460ff168015611d07575b611cee90613e4f565b6101f791166001600160601b0360a01b82541617905580f35b50611cee816033541682611d19614063565b16149050611ce5565b5034610351578060031936011261035157602060ff60975460a01c166040519015158152f35b5060a0366003190112610351576044356001600160401b03811161056d57611d74903690600401613530565b6084356001600160401b038111610e8f57611d93903690600401613586565b505060243582526101f9602052611db360ff604084205460a01c16613ed2565b8051611dc9906001600160a01b03161515613e91565b611dd7466004351415613f15565b60043582526101fa6020526040822054611dfb906001600160a01b03161515613f73565b612710611e0b6101fd5434613ca8565b048034106120d75734813403116120c357611e24614063565b6101fe80546001600160a01b0316801561207257858080868194828215612069575bf11561205e5760018060a01b039054166040519160018060a01b0316825282602083015260408201526064356060820152602435907f054aafb6abefe1f281ccb11a7597dc7e2f13418168020924f176af9492821cac608060043592a3611eab614063565b916001600160a01b03611ebc614063565b1684526101fb6020526040842046855260205260408420600435855260205260408420546101fa60205260018060a01b036040862054169060405194611f0186613428565b60018060a01b031685526020850152602435604085015246606085015260043560808501523060a085015260c084015260e083015260018060a01b03611f45614063565b1683526101fb60205260408320468452602052604083206004358452602052604083208054906001820180921161204a575560243583526101f96020526040808420549051630db17b6960e21b81529284928492909183916001600160a01b0316908290611fba906064359060048401613fd4565b03923403905af1801561203f57611fcf575080f35b3d8083833e611fde8183613475565b810190602081830312610e8f578051906001600160401b038211610bd7570181601f82011215610e8f5780519061201482613496565b926120226040519485613475565b82845260208383010111610bd757602080610f67940191016135b3565b6040513d84823e3d90fd5b634e487b7160e01b85526011600452602485fd5b6040513d86823e3d90fd5b506108fc611e46565b60405162461bcd60e51b8152602060048201526024808201527f43726f737353796e634665652041646472657373204973205a65726f204164646044820152637265737360e01b6064820152608490fd5b634e487b7160e01b83526011600452602483fd5b60405162461bcd60e51b815260206004820152602b60248201527f52656c61796572286d73672e76616c75652920466565206973206c657373207460448201526a68616e2073796e6346656560a81b6064820152608490fd5b50346103515760203660031901126103515760ff604060209260043581526101f98452205460a01c166040519015158152f35b503461035157602036600319011261035157602061217f6133fe565b6097546040516001600160a01b0392831691909216148152f35b5034610351578060208060031936011261226f576004356121f76121bb614063565b600080516020614140833981519152855260fb845260408086206001600160a01b039283168752855285205460ff16908115611a495750613e4f565b8083526101f99081835261221460ff604086205460a01c16613ed2565b83528152600160408320838155019061222d8254613cf8565b908161223857505050f35b81601f85931160011461224c575050505580f35b83835281832061226791601f0160051c810190600101613e38565b812091555580f35b50fd5b50346103515780600319360112610351577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031630036122cb5760206040516000805160206141008339815191528152f35b60405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608490fd5b5060403660031901126103515761234b6133fe565b6024356001600160401b038111610e8f5761236a9036906004016134e8565b6001600160a01b0391907f000000000000000000000000000000000000000000000000000000000000000083166123a330821415613abd565b6123c0600080516020614100833981519152918583541614613b1e565b6123c8614063565b936000805160206140e0833981519152865260209460fb8652816040882091168752855260ff6040872054168015612629575b61240490613e4f565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff161561243b57505050610f679150613b7f565b8316906040516352d1902d60e01b81528581600481865afa8791816125fa575b506124bc5760405162461bcd60e51b815260048101879052602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608490fd5b94929394036125a3576124ce84613b7f565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b8580a281511580159061259b575b612508575b50505080f35b6125899284806040519461251b8661345a565b602786527f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c85870152660819985a5b195960ca1b60408701528481519101845af4903d15612592573d61256d81613496565b9061257b6040519283613475565b81528681943d92013e613c0f565b50388080612502565b60609250613c0f565b5060016124fd565b60405162461bcd60e51b815260048101839052602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608490fd5b9091508681813d8311612622575b6126128183613475565b81010312610e2e5751903861245b565b503d612608565b5061240481603354168261263b614063565b161490506123fb565b50346103515760203660031901126103515761265e6133fe565b612666613a11565b60008051602061414083398151915280835260fb602090815260408085206001600160a01b0394851680875292528420549192909160ff16610fcc578380f35b503461035157806003193601126103515760206040516000805160206141408339815191528152f35b50346103515760ff60406020926126e536613506565b6001600160a01b0390921683526101fc8652838320908352855282822090825284522054604051911615158152f35b503461035157806003193601126103515761272d614063565b600080516020614120833981519152825260fb602090815260408084206001600160a01b039384168552825283205490919060ff168015612814575b80156127f9575b61277990613e4f565b60975460ff8160a01c16156127bd5760ff60a01b19166097557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa9190611805614063565b60405162461bcd60e51b815260048101849052601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606490fd5b5061277981603354168261280b614063565b16149050612770565b5061281d614063565b600080516020614140833981519152845260fb8352816040852091168452825260ff604084205416612769565b50346103515760208060031936011261056d576128656133fe565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811661289c30821415613abd565b6128b9600080516020614100833981519152918383541614613b1e565b6128c1614063565b6000805160206140e0833981519152865260fb8552826040872091168652845260ff6040862054168015612b24575b6128f990613e4f565b60405190848201928284106001600160401b03851117610e32578360405286835260ff7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd914354166000146129545750505050610f679150613b7f565b8492939416906040516352d1902d60e01b81528681600481865afa889181612af1575b506129d85760405162461bcd60e51b815260048101889052602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608490fd5b9593949503612a9a576129ea82613b7f565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b8680a284835115801590612a93575b612a27575b505050505080f35b80612a889560405195612a398761345a565b602787527f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c86880152660819985a5b195960ca1b60408801525190845af4903d15612592573d61256d81613496565b503880808084612a1f565b5080612a1a565b60405162461bcd60e51b815260048101849052602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608490fd5b9091508781813d8311612b1d575b612b098183613475565b81010312612b1957519038612977565b8880fd5b503d612aff565b506128f9826033541683612b36614063565b161490506128f0565b503461035157604036600319011261035157612b596133e8565b6001600160a01b0380612b6a614063565b1690821603612b7f57610f6790600435613997565b60405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608490fd5b503461035157602036600319011261035157612bf66133fe565b612bfe614063565b600080516020614140833981519152835260fb602090815260408085206001600160a01b03938416865290915283205460ff168015612c5a575b612c4190613e4f565b6101f891166001600160601b0360a01b82541617905580f35b50612c41816033541682612c6c614063565b16149050612c38565b503461035157604036600319011261035157600435612c926133e8565b81835260fb602052612caa60016040852001546135fb565b81835260fb602090815260408085206001600160a01b03938416808752925284205490919060ff16156112e2578380f35b5034610351576040366003190112610351576001600160401b03600435602435828111610bd757612d109036906004016134e8565b91612d19614063565b600080516020614140833981519152855260fb602090815260408087206001600160a01b0393841688528252862054909391612d5f9160ff16908115611a495750613e4f565b8085526101f990818452612d7c60ff604088205460a01c16613ed2565b85528252600191826040862001938051928311612e6f57612d9d8554613cf8565b601f8111612e41575b5081601f8411600114612de057509282939183928794612dd5575b50501b916000199060031b1c191617905580f35b015192503880612dc1565b919083601f1981168789528489209489905b88838310612e275750505010612e0e575b505050811b01905580f35b015160001960f88460031b161c19169055388080612e03565b858701518855909601959485019487935090810190612df2565b612e6990868852838820601f860160051c810191858710610a2b57601f0160051c0190613e38565b38612da6565b634e487b7160e01b86526041600452602486fd5b50346103515760203660031901126103515760016040602092600435815260fb8452200154604051908152f35b5034610351576040602091612ec436613506565b6001600160a01b0390921683526101fb8552838320908352845282822090825283522054604051908152f35b50346103515760203660031901126103515760209060043581526101f98252604060018060a01b0391205416604051908152f35b50346103515760208060031936011261056d57612f3f6133fe565b612f47614063565b600080516020614140833981519152845260fb835260408085206001600160a01b039283168652845284205460ff168015612fba575b612f8690613e4f565b6000805160206141808339815191529283855260fb81528160408620931692838652815260ff604086205416611c2e578480f35b50612f86816033541682612fcc614063565b16149050612f7d565b503461035157604036600319011261035157600435612ff26133e8565b612ffa614063565b90600080516020614140833981519152845260fb6020526040842060018060a01b03809316855260205260ff6040852054168015613084575b61303c90613e4f565b1690613049821515613e91565b8083526101f9908160205261306760ff604086205460a01c16613ed2565b83526020526040822080546001600160a01b031916909117905580f35b5061303c826033541683613096614063565b16149050613033565b50346103515760203660031901126103515760043563ffffffff60e01b811680910361056d57602090637965db0b60e01b81149081156130e5575b506040519015158152f35b6301ffc9a760e01b149050826130da565b5034610351576040366003190112610351576004356024358015158103610e8f57610f6791613166613126614063565b600080516020614140833981519152865260fb602090815260408088206001600160a01b03938416895290915286205460ff16908115611a495750613e4f565b8084526101f9908160205261318460ff604087205460a01c16613ed2565b845260205260408320805460ff60a01b191691151560a01b60ff60a01b16919091179055565b5034610351576060366003190112610351576004356131c76133e8565b6001600160401b03604435818111610e46576131e79036906004016134e8565b926131f0614063565b90600080516020614140833981519152865260209160fb8352604087209460018060a01b0395868093168952845260ff60408920541680156133cd575b61323690613e4f565b16613242811515613e91565b8187526101f99485845260ff604089205460a01c166133915760405191606083018381108782111761337d5760409081529083526001858401818152848301998a52948a52968552882091518254935160ff60a01b90151560a01b166001600160a81b0319909416911660ff60a01b191617919091178155830193518051928311612e6f576132d18554613cf8565b601f811161334f575b5081601f841160011461330857509282939183928794612dd55750501b916000199060031b1c191617905580f35b919083601f1981168789528489209489905b888383106133355750505010612e0e57505050811b01905580f35b85870151885590960195948501948793509081019061331a565b61337790868852838820601f860160051c810191858710610a2b57601f0160051c0190613e38565b386132da565b634e487b7160e01b8a52604160045260248afd5b60405162461bcd60e51b8152600481018590526014602482015273526f75746520416c72656164792045786973747360601b6044820152606490fd5b506132368260335416836133df614063565b1614905061322d565b602435906001600160a01b0382168203610bd257565b600435906001600160a01b0382168203610bd257565b35906001600160a01b0382168203610bd257565b61010081019081106001600160401b0382111761344457604052565b634e487b7160e01b600052604160045260246000fd5b606081019081106001600160401b0382111761344457604052565b90601f801991011681019081106001600160401b0382111761344457604052565b6001600160401b03811161344457601f01601f191660200190565b9291926134bd82613496565b916134cb6040519384613475565b829481845281830111610bd2578281602093846000960137010152565b9080601f83011215610bd257816020613503933591016134b1565b90565b6060906003190112610bd2576004356001600160a01b0381168103610bd257906024359060443590565b919091604081840312610bd25760408051916001600160401b039183018281118482101761344457604052829461356682613414565b84526020820135928311610bd25760209261358192016134e8565b910152565b9181601f84011215610bd2578235916001600160401b038311610bd25760208381860195010111610bd257565b60005b8381106135c65750506000910152565b81810151838201526020016135b6565b906020916135ef815180928185528580860191016135b3565b601f01601f1916010190565b613603614063565b9060009080825260209160fb83526040938482209060018060a01b031690818352845260ff858320541615613639575050505050565b8451926136458461345a565b602a845284840190863683378451156138fb57603082538451926001938410156138e7576078602187015360295b84811161387d575061383b57865192608084018481106001600160401b03821117612e6f57885260428452868401946060368737845115613827576030865384518210156138275790607860218601536041915b8183116137b957505050613777576137739386936137579361374860489461371f9a519a8b957f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008c88015251809260378801906135b3565b8401917001034b99036b4b9b9b4b733903937b6329607d1b6037840152518093868401906135b3565b01036028810187520185613475565b5192839262461bcd60e51b8452600484015260248301906135d6565b0390fd5b60648587519062461bcd60e51b825280600483015260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b909192600f81166010811015613813576f181899199a1a9b1b9c1cb0b131b232b360811b901a6137e98588613cd1565b5360041c9280156137ff576000190191906136c7565b634e487b7160e01b82526011600452602482fd5b634e487b7160e01b83526032600452602483fd5b634e487b7160e01b81526032600452602490fd5b60648688519062461bcd60e51b825280600483015260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b90600f811660108110156138d3576f181899199a1a9b1b9c1cb0b131b232b360811b901a6138ab8389613cd1565b5360041c9080156138bf5760001901613673565b634e487b7160e01b86526011600452602486fd5b634e487b7160e01b87526032600452602487fd5b634e487b7160e01b85526032600452602485fd5b634e487b7160e01b84526032600452602484fd5b6001600160a01b0390811660008181527fc88390e7e62175be0932452175b6a7222b6b094ab0ef984a5153c620345d8975602052604081205490929060ff161561395857505050565b82805260fb6020526040832082845260205260408320600160ff19825416179055613981614063565b16916000805160206140c08339815191528180a4565b600081815260fb602090815260408083206001600160a01b039586168085529252822054919390929160ff166139ce575b50505050565b6000805160206141608339815191529082855260fb602052604085208486526020526040852060ff198154169055613a04614063565b169380a4388080806139c8565b6033546001600160a01b0390811690613a28614063565b1603613a3057565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b603380546001600160a01b039283166001600160a01b0319821681179092559091167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3565b15613ac457565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b6064820152608490fd5b15613b2557565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b6064820152608490fd5b803b15613bb45760008051602061410083398151915280546001600160a01b0319166001600160a01b03909216919091179055565b60405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b91929015613c715750815115613c23575090565b3b15613c2c5790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b825190915015613c845750805190602001fd5b60405162461bcd60e51b8152602060048201529081906137739060248301906135d6565b81810292918115918404141715613cbb57565b634e487b7160e01b600052601160045260246000fd5b908151811015613ce2570160200190565b634e487b7160e01b600052603260045260246000fd5b90600182811c92168015613d28575b6020831014613d1257565b634e487b7160e01b600052602260045260246000fd5b91607f1691613d07565b9060405191826000825492613d4684613cf8565b908184526001948581169081600014613db55750600114613d72575b5050613d7092500383613475565b565b9093915060005260209081600020936000915b818310613d9d575050613d7093508201013880613d62565b85548884018501529485019487945091830191613d85565b915050613d7094506020925060ff191682840152151560051b8201013880613d62565b15613ddf57565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b818110613e43575050565b60008155600101613e38565b15613e5657565b60405162461bcd60e51b8152602060048201526013602482015272556e617574686f72697a65642041636365737360681b6044820152606490fd5b15613e9857565b60405162461bcd60e51b81526020600482015260126024820152711059191c995cdcc80c08141c9bdd9a59195960721b6044820152606490fd5b15613ed957565b60405162461bcd60e51b8152602060048201526014602482015273149bdd5d1948111bd95cc8139bdd08115e1a5cdd60621b6044820152606490fd5b15613f1c57565b60405162461bcd60e51b815260206004820152602960248201527f536f7572636520616e642044657374696e6174696f6e20436861696e20496473604482015268206172652073616d6560b81b6064820152608490fd5b15613f7a57565b60405162461bcd60e51b815260206004820152602c60248201527f44657374696e6174696f6e20436861696e20476174657761792041646472657360448201526b1cc81a5cc81b9bdd081cd95d60a21b6064820152608490fd5b92919061405e602080926040875260018060a01b0380825116604089015282820151606089015260408201516080890152606082015160a0890152608082015160c08901528060a08301511660e089015260e08160c0840151169261010093848b0152015191610120890152815116610140880152015160406101608701526101808601906135d6565b930152565b6097546001600160a01b0316331480806140b4575b1561408a575036601319013560601c90565b601436101590816140ac575b50156140a85736601319013560601c90565b3390565b905038614096565b50601436101561407856fe2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e3360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a7613a25ecc738585a232ad50a301178f12b3ba8887d13e138b523c4269c47689f6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171ba49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775a264697066735822122090d6fe61fa80136e820181ed88db8d56993eeea8e19061c528182372f6de83f464736f6c63430008110033","opcodes":"PUSH1 0xA0 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH3 0xE1 JUMPI ADDRESS PUSH1 0x80 MSTORE PUSH1 0x0 SLOAD SWAP1 PUSH1 0xFF DUP3 PUSH1 0x8 SHR AND PUSH3 0x8F JUMPI POP PUSH1 0xFF DUP1 DUP3 AND SUB PUSH3 0x53 JUMPI JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x41D5 SWAP1 DUP2 PUSH3 0xE7 DUP3 CODECOPY PUSH1 0x80 MLOAD DUP2 DUP2 DUP2 PUSH2 0x2285 ADD MSTORE DUP2 DUP2 PUSH2 0x2376 ADD MSTORE PUSH2 0x286F ADD MSTORE RETURN JUMPDEST PUSH1 0xFF SWAP1 DUP2 NOT AND OR PUSH1 0x0 SSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0xFF DUP2 MSTORE LOG1 CODESIZE PUSH3 0x2C JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320696E697469 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x616C697A696E67 PUSH1 0xC8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x1B JUMPI JUMPDEST CALLDATASIZE ISZERO PUSH2 0x19 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST STOP JUMPDEST PUSH1 0x0 DUP1 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH3 0x4C7591 EQ PUSH2 0x31AA JUMPI DUP1 PUSH3 0x5E8EEF EQ PUSH2 0x30F6 JUMPI DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x309F JUMPI DUP1 PUSH4 0x9B7D791 EQ PUSH2 0x2FD5 JUMPI DUP1 PUSH4 0x1785F53C EQ PUSH2 0x2F24 JUMPI DUP1 PUSH4 0x196C881E EQ PUSH2 0x2EF0 JUMPI DUP1 PUSH4 0x1FA5D2E7 EQ PUSH2 0x2EB0 JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x2E83 JUMPI DUP1 PUSH4 0x2B33CC87 EQ PUSH2 0x2CDB JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x2C75 JUMPI DUP1 PUSH4 0x32495CE1 EQ PUSH2 0x2BDC JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x2B3F JUMPI DUP1 PUSH4 0x3659CFE6 EQ PUSH2 0x284A JUMPI DUP1 PUSH4 0x36D8261A EQ PUSH2 0x1255 JUMPI DUP1 PUSH4 0x38073F0C EQ PUSH2 0x14B2 JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x2714 JUMPI DUP1 PUSH4 0x4429C25F EQ PUSH2 0x26CF JUMPI DUP1 PUSH4 0x4460BDD6 EQ PUSH2 0x26A6 JUMPI DUP1 PUSH4 0x4902E4AA EQ PUSH2 0x2644 JUMPI DUP1 PUSH4 0x4F1EF286 EQ PUSH2 0x2336 JUMPI DUP1 PUSH4 0x52D1902D EQ PUSH2 0x2272 JUMPI DUP1 PUSH4 0x56E3008B EQ PUSH2 0x2199 JUMPI DUP1 PUSH4 0x572B6C05 EQ PUSH2 0x2163 JUMPI DUP1 PUSH4 0x59B52CA4 EQ PUSH2 0x2130 JUMPI DUP1 PUSH4 0x5C96A561 EQ PUSH2 0x1D48 JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x1D22 JUMPI DUP1 PUSH4 0x6050CAFE EQ PUSH2 0x1C89 JUMPI DUP1 PUSH4 0x6B2C0F55 EQ PUSH2 0x1B98 JUMPI DUP1 PUSH4 0x70480275 EQ PUSH2 0x1AE6 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x1A89 JUMPI DUP1 PUSH4 0x75B238FC EQ PUSH2 0x1A60 JUMPI DUP1 PUSH4 0x7D0517D0 EQ PUSH2 0x19E1 JUMPI DUP1 PUSH4 0x7FAF251C EQ PUSH2 0x19AD JUMPI DUP1 PUSH4 0x8262C317 EQ PUSH2 0x198E JUMPI DUP1 PUSH4 0x82DC1EC4 EQ PUSH2 0x1899 JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x1757 JUMPI DUP1 PUSH4 0x84B0196E EQ PUSH2 0x14DC JUMPI DUP1 PUSH4 0x8898009D EQ PUSH2 0x14B2 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x1489 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x1440 JUMPI DUP1 PUSH4 0x98C33904 EQ PUSH2 0x139B JUMPI DUP1 PUSH4 0x9EF42CBB EQ PUSH2 0x136C JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x1350 JUMPI DUP1 PUSH4 0xACB7176B EQ PUSH2 0x1326 JUMPI DUP1 PUSH4 0xB3292FF0 EQ PUSH2 0x127F JUMPI DUP1 PUSH4 0xBD826ED7 EQ PUSH2 0x1255 JUMPI DUP1 PUSH4 0xC50189B8 EQ PUSH2 0x1079 JUMPI DUP1 PUSH4 0xCE1B815F EQ PUSH2 0x1050 JUMPI DUP1 PUSH4 0xD10A0DA3 EQ PUSH2 0x100D JUMPI DUP1 PUSH4 0xD264A803 EQ PUSH2 0xF6A JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0xF29 JUMPI DUP1 PUSH4 0xDA742228 EQ PUSH2 0xE93 JUMPI DUP1 PUSH4 0xE34381A1 EQ PUSH2 0xC9C JUMPI DUP1 PUSH4 0xE5110158 EQ PUSH2 0xBDB JUMPI DUP1 PUSH4 0xE56F2FE4 EQ PUSH2 0x59A JUMPI DUP1 PUSH4 0xE63AB1E9 EQ PUSH2 0x571 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x3E9 JUMPI DUP1 PUSH4 0xF72C0D8B EQ PUSH2 0x3C0 JUMPI DUP1 PUSH4 0xFA66358A EQ PUSH2 0x354 JUMPI PUSH4 0xFDE278BC EQ PUSH2 0x2B9 JUMPI POP PUSH2 0xE JUMP JUMPDEST CALLVALUE PUSH2 0x351 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x351 JUMPI PUSH2 0x2D2 PUSH2 0x33FE JUMP JUMPDEST PUSH2 0x2DA PUSH2 0x4063 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4140 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 MSTORE PUSH1 0xFB PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 SWAP3 AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND DUP1 ISZERO PUSH2 0x336 JUMPI JUMPDEST PUSH2 0x31D SWAP1 PUSH2 0x3E4F JUMP JUMPDEST PUSH2 0x1FE SWAP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL DUP3 SLOAD AND OR SWAP1 SSTORE DUP1 RETURN JUMPDEST POP PUSH2 0x31D DUP2 PUSH1 0x33 SLOAD AND DUP3 PUSH2 0x348 PUSH2 0x4063 JUMP JUMPDEST AND EQ SWAP1 POP PUSH2 0x314 JUMP JUMPDEST DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x351 JUMPI PUSH1 0x4 CALLDATALOAD DUP2 MSTORE PUSH2 0x1F9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF PUSH1 0xA0 DUP3 SWAP1 SHR AND SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH2 0x3BC SWAP1 PUSH2 0x39C SWAP1 PUSH1 0x1 ADD PUSH2 0x3D32 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP4 DUP5 SWAP4 DUP5 MSTORE ISZERO ISZERO PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x60 DUP4 ADD SWAP1 PUSH2 0x35D6 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x351 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x40E0 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x56D JUMPI PUSH2 0x404 PUSH2 0x33FE JUMP JUMPDEST PUSH2 0x40C PUSH2 0x3A11 JUMP JUMPDEST PUSH2 0x414 PUSH2 0x3A11 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP1 DUP3 AND ISZERO PUSH2 0x519 JUMPI DUP1 PUSH2 0x432 PUSH2 0x437 SWAP3 PUSH2 0x3A74 JUMP JUMPDEST PUSH2 0x390F JUMP JUMPDEST PUSH2 0x43F PUSH2 0x4063 JUMP JUMPDEST SWAP2 DUP2 DUP1 PUSH2 0x44A PUSH2 0x4063 JUMP JUMPDEST AND SWAP4 AND SWAP3 DUP4 SUB PUSH2 0x4BD JUMPI PUSH1 0x0 DUP1 MSTORE PUSH1 0xFB DUP2 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP4 PUSH1 0x0 MSTORE DUP2 MSTORE PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH2 0x478 JUMPI DUP4 DUP1 RETURN JUMPDEST PUSH1 0x0 DUP1 MSTORE PUSH1 0xFB DUP2 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 DUP4 PUSH1 0x0 MSTORE MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0xFF NOT DUP2 SLOAD AND SWAP1 SSTORE PUSH2 0x4A0 PUSH2 0x4063 JUMP JUMPDEST AND SWAP1 PUSH1 0x0 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4160 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 DUP1 LOG4 CODESIZE DUP1 DUP1 DUP4 DUP1 RETURN JUMPDEST PUSH1 0x84 SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x44 DUP3 ADD MSTORE PUSH15 0x103937B632B9903337B91039B2B633 PUSH1 0x89 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST POP DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x351 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4120 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI PUSH1 0xC0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x351 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x56D JUMPI PUSH2 0x5CB SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x3586 JUMP JUMPDEST SWAP1 PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0xBD7 JUMPI PUSH2 0x5EB SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x3586 JUMP JUMPDEST SWAP1 SWAP3 PUSH1 0x44 CALLDATALOAD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 DUP5 AND DUP5 SUB PUSH2 0xBD2 JUMPI PUSH1 0x64 CALLDATALOAD SWAP2 DUP4 DUP4 AND DUP4 SUB PUSH2 0xBD2 JUMPI DUP4 PUSH1 0x84 CALLDATALOAD AND PUSH1 0x84 CALLDATALOAD SUB PUSH2 0xBD2 JUMPI PUSH1 0xA4 CALLDATALOAD SWAP6 DUP5 DUP8 AND DUP8 SUB PUSH2 0xBD2 JUMPI DUP9 SLOAD SWAP1 PUSH1 0xFF DUP3 PUSH1 0x8 SHR AND ISZERO SWAP9 DUP10 DUP1 SWAP11 PUSH2 0xBC5 JUMPI JUMPDEST DUP1 ISZERO PUSH2 0xBAE JUMPI JUMPDEST ISZERO PUSH2 0xB52 JUMPI PUSH2 0x6DE PUSH2 0x6E6 SWAP3 PUSH2 0x69D PUSH1 0xFF DUP15 PUSH2 0x6F0 SWAP8 DUP16 PUSH1 0x1 DUP5 NOT DUP4 AND OR DUP4 SSTORE PUSH2 0xB41 JUMPI JUMPDEST POP SLOAD PUSH1 0x8 SHR AND PUSH2 0x679 DUP2 PUSH2 0x3DD8 JUMP JUMPDEST PUSH2 0x682 DUP2 PUSH2 0x3DD8 JUMP JUMPDEST PUSH1 0x97 DUP1 SLOAD PUSH1 0xFF PUSH1 0xA0 SHL NOT AND SWAP1 SSTORE PUSH2 0x698 DUP2 PUSH2 0x3DD8 JUMP JUMPDEST PUSH2 0x3DD8 JUMP JUMPDEST PUSH2 0x6AD PUSH2 0x6A8 PUSH2 0x4063 JUMP JUMPDEST PUSH2 0x3A74 JUMP JUMPDEST PUSH1 0xFF DUP14 SLOAD PUSH1 0x8 SHR AND SWAP7 PUSH2 0x6BF DUP9 PUSH2 0x3DD8 JUMP JUMPDEST PUSH2 0x6C8 DUP9 PUSH2 0x3DD8 JUMP JUMPDEST PUSH2 0x6D1 DUP9 PUSH2 0x3DD8 JUMP JUMPDEST PUSH1 0x1 PUSH2 0x12D SSTORE CALLDATASIZE SWAP2 PUSH2 0x34B1 JUMP JUMPDEST SWAP4 CALLDATASIZE SWAP2 PUSH2 0x34B1 JUMP JUMPDEST SWAP3 PUSH2 0x698 DUP2 PUSH2 0x3DD8 JUMP JUMPDEST DUP1 MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0xB2D JUMPI DUP2 SWAP1 PUSH2 0x70F PUSH2 0x161 SLOAD PUSH2 0x3CF8 JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0xADE JUMPI JUMPDEST POP PUSH1 0x20 SWAP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0xA54 JUMPI DUP11 SWAP3 PUSH2 0xA49 JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR PUSH2 0x161 SSTORE JUMPDEST DUP1 MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0xA35 JUMPI DUP2 SWAP1 PUSH2 0x764 PUSH2 0x162 SLOAD PUSH2 0x3CF8 JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0x9DB JUMPI JUMPDEST POP PUSH1 0x20 SWAP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0x951 JUMPI DUP10 SWAP3 PUSH2 0x946 JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR PUSH2 0x162 SSTORE JUMPDEST DUP6 PUSH2 0x15F SSTORE DUP6 PUSH2 0x160 SSTORE PUSH2 0x7B4 PUSH1 0xFF DUP8 SLOAD PUSH1 0x8 SHR AND PUSH2 0x3DD8 JUMP JUMPDEST PUSH2 0x7BC PUSH2 0x3A11 JUMP JUMPDEST DUP2 PUSH1 0x84 CALLDATALOAD AND ISZERO PUSH2 0x8F2 JUMPI PUSH2 0x7D1 PUSH1 0x84 CALLDATALOAD PUSH2 0x3A74 JUMP JUMPDEST PUSH2 0x7DC PUSH1 0x84 CALLDATALOAD PUSH2 0x390F JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4180 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xFB PUSH1 0x20 MSTORE PUSH32 0x339AB3AB2DDF8C30D545344E713975CA6CE592A0D5BC1375BB6CFAA6563006F1 DUP1 SLOAD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4140 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 DUP3 SWAP1 SSTORE SWAP1 SWAP3 PUSH32 0xBD79B86FFE0AB8E8776151514217CD7CACD52C909F66475C3AF44E129F0B00FF SWAP3 DUP5 SWAP3 SWAP2 SWAP1 DUP5 SWAP1 DUP1 LOG4 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4120 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 ADD DUP1 SLOAD SWAP1 DUP6 SWAP1 SSTORE SWAP3 SWAP1 DUP1 LOG4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL SWAP3 DUP3 PUSH2 0x1F7 SWAP2 AND DUP5 DUP3 SLOAD AND OR SWAP1 SSTORE DUP2 PUSH2 0x1F8 SWAP2 AND DUP4 DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x28 PUSH2 0x1FD SSTORE PUSH2 0x1FE SWAP3 AND SWAP1 DUP3 SLOAD AND OR SWAP1 SSTORE PUSH2 0x8BB JUMPI DUP1 RETURN JUMPDEST PUSH2 0xFF00 NOT DUP2 SLOAD AND DUP2 SSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE LOG1 DUP1 RETURN JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH2 0x783 JUMP JUMPDEST SWAP3 POP PUSH2 0x162 DUP10 MSTORE PUSH32 0x29AF0939A5988989BFEE913A9AD10B9335CB63EBC9FD2B69E5F877D0455AC919 SWAP1 DUP10 SWAP4 JUMPDEST PUSH1 0x1F NOT DUP5 AND DUP6 LT PUSH2 0x9C0 JUMPI PUSH1 0x1 SWAP5 POP DUP4 PUSH1 0x1F NOT DUP2 AND LT PUSH2 0x9A7 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH2 0x162 SSTORE PUSH2 0x79A JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH2 0x998 JUMP JUMPDEST DUP2 DUP2 ADD MLOAD DUP4 SSTORE PUSH1 0x20 SWAP5 DUP6 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP4 ADD SWAP3 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x97D JUMP JUMPDEST PUSH2 0xA25 SWAP1 PUSH2 0x162 DUP12 MSTORE PUSH32 0x29AF0939A5988989BFEE913A9AD10B9335CB63EBC9FD2B69E5F877D0455AC919 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD SWAP2 PUSH1 0x20 DUP7 LT PUSH2 0xA2B JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP1 PUSH2 0x3E38 JUMP JUMPDEST CODESIZE PUSH2 0x76D JUMP JUMPDEST SWAP1 SWAP2 POP DUP2 SWAP1 PUSH2 0xA18 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP9 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP9 REVERT JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH2 0x72E JUMP JUMPDEST SWAP3 POP PUSH2 0x161 DUP11 MSTORE PUSH32 0xAFBB1C043347995DF017CE3291B765E028AD5F784D2AA00C3F5E073760A4DE8B SWAP1 DUP11 SWAP4 JUMPDEST PUSH1 0x1F NOT DUP5 AND DUP6 LT PUSH2 0xAC3 JUMPI PUSH1 0x1 SWAP5 POP DUP4 PUSH1 0x1F NOT DUP2 AND LT PUSH2 0xAAA JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH2 0x161 SSTORE PUSH2 0x745 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH2 0xA9B JUMP JUMPDEST DUP2 DUP2 ADD MLOAD DUP4 SSTORE PUSH1 0x20 SWAP5 DUP6 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP4 ADD SWAP3 SWAP1 SWAP2 ADD SWAP1 PUSH2 0xA80 JUMP JUMPDEST PUSH2 0xB27 SWAP1 PUSH2 0x161 DUP13 MSTORE PUSH32 0xAFBB1C043347995DF017CE3291B765E028AD5F784D2AA00C3F5E073760A4DE8B PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD SWAP2 PUSH1 0x20 DUP7 LT PUSH2 0xA2B JUMPI PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP1 PUSH2 0x3E38 JUMP JUMPDEST CODESIZE PUSH2 0x718 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP10 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP10 REVERT JUMPDEST PUSH2 0xFFFF NOT AND PUSH2 0x101 OR DUP2 SSTORE CODESIZE PUSH2 0x66A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x191E481A5B9A5D1A585B1A5E9959 PUSH1 0x92 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST POP ADDRESS EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x645 JUMPI POP PUSH1 0x1 PUSH1 0xFF DUP5 AND EQ PUSH2 0x645 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0xFF DUP5 AND LT PUSH2 0x63E JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x351 JUMPI PUSH2 0xBF5 PUSH2 0x33FE JUMP JUMPDEST PUSH2 0xBFD PUSH2 0x3A11 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH32 0x775AC87777436F29B0CD5453BF5DB4DA15D8938D0EF70DE831D2EDD17651CF67 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x40E0 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP3 SWAP1 PUSH1 0xFF AND ISZERO PUSH2 0xC53 JUMPI DUP4 DUP1 RETURN JUMPDEST DUP3 PUSH1 0x0 MSTORE PUSH1 0xFB PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP3 PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x1 PUSH1 0xFF NOT DUP3 SLOAD AND OR SWAP1 SSTORE PUSH2 0xC80 PUSH2 0x4063 JUMP JUMPDEST AND SWAP2 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x40C0 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x0 DUP1 LOG4 CODESIZE DUP1 DUP1 DUP4 DUP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI PUSH1 0x20 SWAP1 DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x351 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0x4 CALLDATALOAD DUP2 DUP2 GT PUSH2 0xE8F JUMPI PUSH2 0xCD0 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x3586 JUMP JUMPDEST SWAP4 PUSH2 0x12D SWAP5 PUSH1 0x2 DUP7 SLOAD EQ PUSH2 0xE4A JUMPI PUSH1 0x2 DUP7 SSTORE DUP3 ADD SWAP2 DUP2 DUP2 DUP5 SUB SLT PUSH2 0xE46 JUMPI DUP1 CALLDATALOAD SWAP1 DUP5 DUP3 GT PUSH2 0xE2A JUMPI ADD SWAP1 PUSH2 0x100 SWAP3 DUP4 DUP4 DUP3 SUB SLT PUSH2 0xE2A JUMPI PUSH1 0x40 MLOAD SWAP4 DUP5 ADD DUP5 DUP2 LT DUP7 DUP3 GT OR PUSH2 0xE32 JUMPI PUSH1 0x40 MSTORE PUSH2 0xD24 DUP4 PUSH2 0x3414 JUMP JUMPDEST DUP5 MSTORE DUP2 DUP4 ADD CALLDATALOAD DUP3 DUP6 ADD MSTORE PUSH1 0x40 DUP4 ADD CALLDATALOAD PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x60 DUP5 ADD SWAP3 PUSH1 0x60 DUP2 ADD CALLDATALOAD DUP5 MSTORE PUSH1 0x80 DUP2 ADD CALLDATALOAD PUSH1 0x80 DUP7 ADD MSTORE PUSH2 0xD5A PUSH1 0xA0 DUP3 ADD PUSH2 0x3414 JUMP JUMPDEST PUSH1 0xA0 DUP7 ADD MSTORE PUSH2 0xD6B PUSH1 0xC0 DUP3 ADD PUSH2 0x3414 JUMP JUMPDEST PUSH1 0xC0 DUP7 ADD MSTORE PUSH1 0xE0 DUP2 ADD CALLDATALOAD SWAP1 DUP7 DUP3 GT PUSH2 0xE2E JUMPI PUSH2 0xD88 SWAP3 SWAP2 ADD PUSH2 0x3530 JUMP JUMPDEST SWAP1 DUP2 PUSH1 0xE0 DUP6 ADD MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 DUP4 MLOAD AND SWAP4 MLOAD SWAP5 MLOAD AND SWAP2 ADD MLOAD SWAP3 DUP3 EXTCODESIZE ISZERO PUSH2 0xE2A JUMPI SWAP2 PUSH2 0xDE3 SWAP5 SWAP4 SWAP2 DUP7 DUP1 SWAP5 PUSH1 0x40 MLOAD SWAP8 DUP9 SWAP6 DUP7 SWAP5 DUP6 SWAP4 PUSH4 0x1885C2F9 PUSH1 0xE0 SHL DUP6 MSTORE PUSH1 0x4 DUP6 ADD MSTORE PUSH1 0x24 DUP5 ADD MSTORE PUSH1 0x60 PUSH1 0x44 DUP5 ADD MSTORE PUSH1 0x64 DUP4 ADD SWAP1 PUSH2 0x35D6 JUMP JUMPDEST SUB SWAP3 GAS CALL DUP1 ISZERO PUSH2 0xE1F JUMPI PUSH2 0xDFA JUMPI JUMPDEST DUP3 PUSH1 0x1 DUP6 SSTORE DUP1 RETURN JUMPDEST DUP2 GT PUSH2 0xE0B JUMPI PUSH1 0x40 MSTORE PUSH1 0x1 CODESIZE PUSH2 0xDF2 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP3 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP3 REVERT JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP6 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP6 DUP1 REVERT JUMPDEST DUP8 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP8 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP8 REVERT JUMPDEST DUP5 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST DUP3 DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x351 JUMPI PUSH2 0xEAD PUSH2 0x33FE JUMP JUMPDEST PUSH2 0xEB5 PUSH2 0x4063 JUMP JUMPDEST SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4140 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 MSTORE PUSH1 0xFB PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 SWAP4 AND DUP5 MSTORE PUSH1 0x20 MSTORE PUSH1 0xFF PUSH1 0x40 DUP5 KECCAK256 SLOAD AND DUP1 ISZERO PUSH2 0xF0E JUMPI JUMPDEST PUSH2 0xEF7 SWAP1 PUSH2 0x3E4F JUMP JUMPDEST AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL PUSH1 0x97 SLOAD AND OR PUSH1 0x97 SSTORE DUP1 RETURN JUMPDEST POP PUSH2 0xEF7 DUP3 PUSH1 0x33 SLOAD AND DUP4 PUSH2 0xF20 PUSH2 0x4063 JUMP JUMPDEST AND EQ SWAP1 POP PUSH2 0xEEE JUMP JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x351 JUMPI PUSH2 0xF67 PUSH1 0x4 CALLDATALOAD PUSH2 0xF49 PUSH2 0x33E8 JUMP JUMPDEST SWAP1 DUP1 DUP5 MSTORE PUSH1 0xFB PUSH1 0x20 MSTORE PUSH2 0xF62 PUSH1 0x1 PUSH1 0x40 DUP7 KECCAK256 ADD SLOAD PUSH2 0x35FB JUMP JUMPDEST PUSH2 0x3997 JUMP JUMPDEST DUP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x351 JUMPI PUSH2 0xF84 PUSH2 0x33FE JUMP JUMPDEST PUSH2 0xF8C PUSH2 0x3A11 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x40E0 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 DUP4 MSTORE PUSH1 0xFB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP6 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND DUP1 DUP8 MSTORE SWAP3 MSTORE DUP5 KECCAK256 SLOAD SWAP2 SWAP3 SWAP1 SWAP2 PUSH1 0xFF AND PUSH2 0xFCC JUMPI DUP4 DUP1 RETURN JUMPDEST DUP3 DUP5 MSTORE PUSH1 0xFB PUSH1 0x20 MSTORE PUSH1 0x40 DUP5 KECCAK256 DUP3 DUP6 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP5 KECCAK256 PUSH1 0xFF NOT DUP2 SLOAD AND SWAP1 SSTORE PUSH2 0xFF2 PUSH2 0x4063 JUMP JUMPDEST AND SWAP2 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4160 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 DUP1 LOG4 CODESIZE DUP1 DUP1 DUP4 DUP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x351 JUMPI PUSH2 0x103C PUSH1 0x1 PUSH1 0x40 PUSH2 0x3BC SWAP4 PUSH1 0x4 CALLDATALOAD DUP2 MSTORE PUSH2 0x1F9 PUSH1 0x20 MSTORE KECCAK256 ADD PUSH2 0x3D32 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 PUSH1 0x20 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP1 PUSH2 0x35D6 JUMP JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x351 JUMPI PUSH1 0x97 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI PUSH1 0x3 NOT SWAP1 PUSH1 0x80 CALLDATASIZE DUP4 ADD SLT PUSH2 0x351 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x24 CALLDATALOAD SWAP3 PUSH1 0x44 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0xBD7 JUMPI PUSH1 0x40 SWAP1 DUP3 PUSH1 0x4 ADD SWAP3 CALLDATASIZE SUB ADD SLT PUSH2 0xE8F JUMPI DUP4 DUP4 MSTORE PUSH2 0x1F9 PUSH1 0x20 SWAP5 DUP2 DUP7 MSTORE PUSH2 0x10D5 PUSH1 0xFF PUSH1 0x40 DUP8 KECCAK256 SLOAD PUSH1 0xA0 SHR AND PUSH2 0x3ED2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP1 CALLDATALOAD DUP5 DUP2 AND SWAP1 DUP2 SWAP1 SUB PUSH2 0x1251 JUMPI SWAP2 PUSH2 0x119D PUSH2 0x11CB SWAP8 SWAP7 SWAP5 SWAP3 PUSH2 0x1103 DUP11 SWAP8 SWAP6 ISZERO ISZERO PUSH2 0x3E91 JUMP JUMPDEST PUSH2 0x110F CHAINID DUP8 EQ ISZERO PUSH2 0x3F15 JUMP JUMPDEST DUP6 DUP9 MSTORE PUSH2 0x1FA DUP1 DUP9 MSTORE PUSH2 0x1129 DUP7 PUSH1 0x40 DUP12 KECCAK256 SLOAD AND ISZERO ISZERO PUSH2 0x3F73 JUMP JUMPDEST PUSH2 0x1131 PUSH2 0x4063 JUMP JUMPDEST SWAP7 DUP7 PUSH2 0x113B PUSH2 0x4063 JUMP JUMPDEST AND DUP11 MSTORE PUSH2 0x1FB DUP10 MSTORE PUSH1 0x40 DUP11 KECCAK256 CHAINID DUP12 MSTORE DUP10 MSTORE PUSH1 0x40 DUP11 KECCAK256 DUP2 DUP12 MSTORE DUP10 MSTORE PUSH1 0x40 DUP11 KECCAK256 SLOAD SWAP2 DUP10 MSTORE DUP7 PUSH1 0x40 DUP12 KECCAK256 SLOAD AND SWAP2 DUP8 PUSH1 0x40 MLOAD SWAP10 PUSH2 0x1173 DUP12 PUSH2 0x3428 JUMP JUMPDEST AND DUP10 MSTORE DUP10 DUP10 ADD MSTORE DUP5 PUSH1 0x40 DUP10 ADD MSTORE CHAINID PUSH1 0x60 DUP10 ADD MSTORE PUSH1 0x80 DUP9 ADD MSTORE ADDRESS PUSH1 0xA0 DUP9 ADD MSTORE PUSH1 0xC0 DUP8 ADD MSTORE CALLDATASIZE SWAP1 PUSH2 0x3530 JUMP JUMPDEST PUSH1 0xE0 DUP6 ADD MSTORE DUP6 MSTORE DUP4 MSTORE PUSH1 0x40 DUP5 KECCAK256 SLOAD AND PUSH1 0x40 MLOAD DUP1 DUP1 SWAP7 DUP2 SWAP5 PUSH4 0x181285CB PUSH1 0xE2 SHL DUP4 MSTORE PUSH1 0x64 CALLDATALOAD SWAP1 PUSH1 0x4 DUP5 ADD PUSH2 0x3FD4 JUMP JUMPDEST SUB SWAP2 GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0x1244 JUMPI DUP2 SWAP3 PUSH2 0x1215 JUMPI JUMPDEST POP PUSH2 0x2710 PUSH2 0x11EE PUSH2 0x1FD SLOAD DUP5 PUSH2 0x3CA8 JUMP JUMPDEST DIV DUP3 ADD DUP1 SWAP3 GT PUSH2 0x1201 JUMPI POP PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST SWAP1 SWAP2 POP DUP3 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x123D JUMPI JUMPDEST PUSH2 0x122D DUP2 DUP4 PUSH2 0x3475 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x56D JUMPI MLOAD SWAP1 CODESIZE PUSH2 0x11DD JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x1223 JUMP JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 RETURNDATASIZE SWAP1 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP7 DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x351 JUMPI PUSH2 0x1F7 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x351 JUMPI PUSH2 0x1299 PUSH2 0x33FE JUMP JUMPDEST PUSH2 0x12A1 PUSH2 0x3A11 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4140 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 DUP4 MSTORE PUSH1 0xFB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP6 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND DUP1 DUP8 MSTORE SWAP3 MSTORE DUP5 KECCAK256 SLOAD SWAP2 SWAP3 SWAP1 SWAP2 PUSH1 0xFF AND ISZERO PUSH2 0x12E2 JUMPI DUP4 DUP1 RETURN JUMPDEST DUP3 DUP5 MSTORE PUSH1 0xFB PUSH1 0x20 MSTORE PUSH1 0x40 DUP5 KECCAK256 DUP3 DUP6 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0xFF NOT DUP3 SLOAD AND OR SWAP1 SSTORE PUSH2 0x130B PUSH2 0x4063 JUMP JUMPDEST AND SWAP2 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x40C0 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 DUP1 LOG4 CODESIZE DUP1 DUP1 DUP4 DUP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x351 JUMPI PUSH2 0x1FE SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x351 JUMPI PUSH1 0x20 SWAP1 PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x351 JUMPI PUSH1 0x20 PUSH2 0x2710 PUSH2 0x1392 PUSH2 0x1FD SLOAD PUSH1 0x4 CALLDATALOAD PUSH2 0x3CA8 JUMP JUMPDEST DIV PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x351 JUMPI PUSH2 0x13B5 PUSH2 0x33E8 JUMP JUMPDEST PUSH2 0x13BD PUSH2 0x4063 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4140 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 MSTORE PUSH1 0xFB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP6 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP7 MSTORE SWAP1 SWAP2 MSTORE DUP4 KECCAK256 SLOAD PUSH1 0xFF AND DUP1 ISZERO PUSH2 0x1425 JUMPI JUMPDEST PUSH2 0x1400 SWAP1 PUSH2 0x3E4F JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD DUP4 MSTORE PUSH2 0x1FA PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 SWAP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL DUP3 SLOAD AND OR SWAP1 SSTORE DUP1 RETURN JUMPDEST POP PUSH2 0x1400 DUP2 PUSH1 0x33 SLOAD AND DUP3 PUSH2 0x1437 PUSH2 0x4063 JUMP JUMPDEST AND EQ SWAP1 POP PUSH2 0x13F7 JUMP JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x351 JUMPI PUSH1 0xFF PUSH1 0x40 PUSH1 0x20 SWAP3 PUSH2 0x1461 PUSH2 0x33E8 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD DUP3 MSTORE PUSH1 0xFB DUP6 MSTORE DUP3 DUP3 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP3 MSTORE DUP5 MSTORE KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP2 AND ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x351 JUMPI PUSH1 0x33 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x351 JUMPI PUSH2 0x1F8 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x351 JUMPI PUSH2 0x15F SLOAD ISZERO DUP1 PUSH2 0x174C JUMPI JUMPDEST ISZERO PUSH2 0x170F JUMPI PUSH1 0x40 MLOAD DUP2 PUSH2 0x161 DUP3 DUP2 SLOAD SWAP5 PUSH2 0x1511 DUP7 PUSH2 0x3CF8 JUMP JUMPDEST SWAP3 DUP4 DUP4 MSTORE PUSH1 0x1 SWAP7 DUP8 DUP2 AND SWAP1 DUP2 PUSH1 0x0 EQ PUSH2 0x16ED JUMPI POP PUSH1 0x1 EQ PUSH2 0x1690 JUMPI JUMPDEST POP PUSH2 0x153A SWAP3 POP SUB DUP4 PUSH2 0x3475 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 PUSH2 0x162 SWAP2 DUP3 SLOAD SWAP3 PUSH2 0x1550 DUP5 PUSH2 0x3CF8 JUMP JUMPDEST DUP1 DUP5 MSTORE SWAP4 DUP9 DUP2 AND SWAP1 DUP2 ISZERO PUSH2 0x166E JUMPI POP PUSH1 0x1 EQ PUSH2 0x1611 JUMPI JUMPDEST POP PUSH2 0x1574 SWAP3 POP SUB DUP4 PUSH2 0x3475 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0x20 SWAP1 DUP2 DUP4 ADD SWAP4 DUP4 DUP6 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP7 GT OR PUSH2 0xE0B JUMPI SWAP3 DUP3 DUP8 SWAP4 PUSH2 0x15CD DUP9 SWAP7 DUP9 PUSH1 0x40 MSTORE DUP6 DUP6 MSTORE PUSH2 0x15BF PUSH1 0x40 MLOAD SWAP9 PUSH1 0xF PUSH1 0xF8 SHL DUP11 MSTORE PUSH1 0xE0 DUP6 DUP12 ADD MSTORE PUSH1 0xE0 DUP11 ADD SWAP1 PUSH2 0x35D6 JUMP JUMPDEST SWAP1 DUP9 DUP3 SUB PUSH1 0x40 DUP11 ADD MSTORE PUSH2 0x35D6 JUMP JUMPDEST SWAP3 CHAINID PUSH1 0x60 DUP9 ADD MSTORE ADDRESS PUSH1 0x80 DUP9 ADD MSTORE DUP5 PUSH1 0xA0 DUP9 ADD MSTORE DUP7 DUP5 SUB PUSH1 0xC0 DUP9 ADD MSTORE MLOAD SWAP3 DUP4 DUP2 MSTORE ADD SWAP6 SWAP3 JUMPDEST DUP3 DUP2 LT PUSH2 0x15FE JUMPI DUP6 DUP8 SUB DUP7 RETURN JUMPDEST DUP4 MLOAD DUP8 MSTORE SWAP6 DUP2 ADD SWAP6 SWAP3 DUP2 ADD SWAP3 DUP5 ADD PUSH2 0x15F1 JUMP JUMPDEST DUP5 MSTORE POP SWAP1 DUP3 SWAP1 DUP7 PUSH32 0x29AF0939A5988989BFEE913A9AD10B9335CB63EBC9FD2B69E5F877D0455AC919 JUMPDEST DUP3 DUP5 LT PUSH2 0x1654 JUMPI POP POP POP SWAP1 PUSH1 0x20 PUSH2 0x1574 SWAP3 DUP3 ADD ADD CODESIZE PUSH2 0x1567 JUMP JUMPDEST PUSH1 0x20 SWAP3 SWAP5 POP DUP1 SLOAD DUP4 DUP6 DUP10 ADD ADD MSTORE ADD SWAP2 ADD SWAP1 SWAP2 DUP7 DUP6 SWAP4 PUSH2 0x163A JUMP JUMPDEST SWAP1 POP PUSH1 0x20 SWAP3 POP PUSH2 0x1574 SWAP5 SWAP2 POP PUSH1 0xFF NOT AND DUP3 DUP5 ADD MSTORE ISZERO ISZERO PUSH1 0x5 SHL DUP3 ADD ADD CODESIZE PUSH2 0x1567 JUMP JUMPDEST DUP5 MSTORE POP SWAP1 DUP3 SWAP1 DUP6 PUSH32 0xAFBB1C043347995DF017CE3291B765E028AD5F784D2AA00C3F5E073760A4DE8B JUMPDEST DUP3 DUP5 LT PUSH2 0x16D3 JUMPI POP POP POP SWAP1 PUSH1 0x20 PUSH2 0x153A SWAP3 DUP3 ADD ADD CODESIZE PUSH2 0x152D JUMP JUMPDEST PUSH1 0x20 SWAP3 SWAP5 POP DUP1 SLOAD DUP4 DUP6 DUP10 ADD ADD MSTORE ADD SWAP2 ADD SWAP1 SWAP2 DUP6 DUP6 SWAP4 PUSH2 0x16B9 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 SWAP3 POP PUSH2 0x153A SWAP5 SWAP2 POP PUSH1 0xFF NOT AND DUP3 DUP5 ADD MSTORE ISZERO ISZERO PUSH1 0x5 SHL DUP3 ADD ADD CODESIZE PUSH2 0x152D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x1152540DCC4C8E88155B9A5B9A5D1A585B1A5E9959 PUSH1 0x5A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST POP PUSH2 0x160 SLOAD ISZERO PUSH2 0x14F8 JUMP JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x351 JUMPI PUSH2 0x1770 PUSH2 0x4063 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4120 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP3 MSTORE PUSH1 0xFB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP6 MSTORE DUP3 MSTORE DUP4 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 PUSH1 0xFF AND DUP1 ISZERO PUSH2 0x1863 JUMPI JUMPDEST DUP1 ISZERO PUSH2 0x1848 JUMPI JUMPDEST PUSH2 0x17BC SWAP1 PUSH2 0x3E4F JUMP JUMPDEST PUSH1 0x97 SLOAD PUSH1 0xFF DUP2 PUSH1 0xA0 SHR AND PUSH2 0x1810 JUMPI PUSH1 0xFF PUSH1 0xA0 SHL NOT AND PUSH1 0x1 PUSH1 0xA0 SHL OR PUSH1 0x97 SSTORE PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 SWAP2 SWAP1 PUSH2 0x1805 PUSH2 0x4063 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 AND DUP2 MSTORE LOG1 DUP1 RETURN JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x14185D5CD8589B194E881C185D5CD959 PUSH1 0x82 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST POP PUSH2 0x17BC DUP2 PUSH1 0x33 SLOAD AND DUP3 PUSH2 0x185A PUSH2 0x4063 JUMP JUMPDEST AND EQ SWAP1 POP PUSH2 0x17B3 JUMP JUMPDEST POP PUSH2 0x186C PUSH2 0x4063 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4140 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 MSTORE PUSH1 0xFB DUP4 MSTORE DUP2 PUSH1 0x40 DUP6 KECCAK256 SWAP2 AND DUP5 MSTORE DUP3 MSTORE PUSH1 0xFF PUSH1 0x40 DUP5 KECCAK256 SLOAD AND PUSH2 0x17AC JUMP JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x56D JUMPI PUSH2 0x18B4 PUSH2 0x33FE JUMP JUMPDEST PUSH2 0x18BC PUSH2 0x4063 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4140 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 MSTORE PUSH1 0xFB DUP4 MSTORE PUSH1 0x40 DUP1 DUP6 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND DUP7 MSTORE DUP5 MSTORE DUP5 KECCAK256 SLOAD PUSH1 0xFF AND DUP1 ISZERO PUSH2 0x1973 JUMPI JUMPDEST PUSH2 0x18FB SWAP1 PUSH2 0x3E4F JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4120 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP3 DUP4 DUP6 MSTORE PUSH1 0xFB DUP2 MSTORE DUP2 PUSH1 0x40 DUP7 KECCAK256 SWAP4 AND SWAP3 DUP4 DUP7 MSTORE DUP2 MSTORE PUSH1 0xFF PUSH1 0x40 DUP7 KECCAK256 SLOAD AND ISZERO PUSH2 0x1930 JUMPI DUP5 DUP1 RETURN JUMPDEST DUP4 DUP6 MSTORE PUSH1 0xFB DUP2 MSTORE PUSH1 0x40 DUP6 KECCAK256 SWAP1 DUP4 DUP7 MSTORE MSTORE PUSH1 0x40 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0xFF NOT DUP3 SLOAD AND OR SWAP1 SSTORE PUSH2 0x1957 PUSH2 0x4063 JUMP JUMPDEST AND SWAP2 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x40C0 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 DUP1 LOG4 CODESIZE DUP1 DUP1 DUP1 DUP5 DUP1 RETURN JUMPDEST POP PUSH2 0x18FB DUP2 PUSH1 0x33 SLOAD AND DUP3 PUSH2 0x1985 PUSH2 0x4063 JUMP JUMPDEST AND EQ SWAP1 POP PUSH2 0x18F2 JUMP JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x351 JUMPI PUSH1 0x20 PUSH2 0x1FD SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x351 JUMPI PUSH1 0x20 SWAP1 PUSH1 0x4 CALLDATALOAD DUP2 MSTORE PUSH2 0x1FA DUP3 MSTORE PUSH1 0x40 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 KECCAK256 SLOAD AND PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x351 JUMPI PUSH2 0x1A3F PUSH2 0x19FE PUSH2 0x4063 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4140 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 MSTORE PUSH1 0xFB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP6 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP7 MSTORE SWAP1 SWAP2 MSTORE DUP4 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 DUP2 ISZERO PUSH2 0x1A49 JUMPI JUMPDEST POP PUSH2 0x3E4F JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH2 0x1FD SSTORE DUP1 RETURN JUMPDEST PUSH1 0x33 SLOAD DUP2 AND SWAP2 POP PUSH2 0x1A58 PUSH2 0x4063 JUMP JUMPDEST AND EQ CODESIZE PUSH2 0x1A39 JUMP JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x351 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4180 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x351 JUMPI PUSH2 0x1AA2 PUSH2 0x3A11 JUMP JUMPDEST PUSH1 0x33 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND SWAP1 SWAP2 SSTORE DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 DUP3 DUP1 LOG3 DUP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x56D JUMPI PUSH2 0x1B01 PUSH2 0x33FE JUMP JUMPDEST PUSH2 0x1B09 PUSH2 0x4063 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4140 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 MSTORE PUSH1 0xFB DUP4 MSTORE PUSH1 0x40 DUP1 DUP6 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND DUP7 MSTORE DUP5 MSTORE DUP5 KECCAK256 SLOAD PUSH1 0xFF AND DUP1 ISZERO PUSH2 0x1B7D JUMPI JUMPDEST PUSH2 0x1B48 SWAP1 PUSH2 0x3E4F JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4180 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP3 DUP4 DUP6 MSTORE PUSH1 0xFB DUP2 MSTORE DUP2 PUSH1 0x40 DUP7 KECCAK256 SWAP4 AND SWAP3 DUP4 DUP7 MSTORE DUP2 MSTORE PUSH1 0xFF PUSH1 0x40 DUP7 KECCAK256 SLOAD AND ISZERO PUSH2 0x1930 JUMPI DUP5 DUP1 RETURN JUMPDEST POP PUSH2 0x1B48 DUP2 PUSH1 0x33 SLOAD AND DUP3 PUSH2 0x1B8F PUSH2 0x4063 JUMP JUMPDEST AND EQ SWAP1 POP PUSH2 0x1B3F JUMP JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x56D JUMPI PUSH2 0x1BB3 PUSH2 0x33FE JUMP JUMPDEST PUSH2 0x1BBB PUSH2 0x4063 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4140 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 MSTORE PUSH1 0xFB DUP4 MSTORE PUSH1 0x40 DUP1 DUP6 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND DUP7 MSTORE DUP5 MSTORE DUP5 KECCAK256 SLOAD PUSH1 0xFF AND DUP1 ISZERO PUSH2 0x1C6E JUMPI JUMPDEST PUSH2 0x1BFA SWAP1 PUSH2 0x3E4F JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4120 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP3 DUP4 DUP6 MSTORE PUSH1 0xFB DUP2 MSTORE DUP2 PUSH1 0x40 DUP7 KECCAK256 SWAP4 AND SWAP3 DUP4 DUP7 MSTORE DUP2 MSTORE PUSH1 0xFF PUSH1 0x40 DUP7 KECCAK256 SLOAD AND PUSH2 0x1C2E JUMPI DUP5 DUP1 RETURN JUMPDEST DUP4 DUP6 MSTORE PUSH1 0xFB DUP2 MSTORE PUSH1 0x40 DUP6 KECCAK256 SWAP1 DUP4 DUP7 MSTORE MSTORE PUSH1 0x40 DUP5 KECCAK256 PUSH1 0xFF NOT DUP2 SLOAD AND SWAP1 SSTORE PUSH2 0x1C52 PUSH2 0x4063 JUMP JUMPDEST AND SWAP2 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4160 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 DUP1 LOG4 CODESIZE DUP1 DUP1 DUP1 DUP5 DUP1 RETURN JUMPDEST POP PUSH2 0x1BFA DUP2 PUSH1 0x33 SLOAD AND DUP3 PUSH2 0x1C80 PUSH2 0x4063 JUMP JUMPDEST AND EQ SWAP1 POP PUSH2 0x1BF1 JUMP JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x351 JUMPI PUSH2 0x1CA3 PUSH2 0x33FE JUMP JUMPDEST PUSH2 0x1CAB PUSH2 0x4063 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4140 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 MSTORE PUSH1 0xFB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP6 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP7 MSTORE SWAP1 SWAP2 MSTORE DUP4 KECCAK256 SLOAD PUSH1 0xFF AND DUP1 ISZERO PUSH2 0x1D07 JUMPI JUMPDEST PUSH2 0x1CEE SWAP1 PUSH2 0x3E4F JUMP JUMPDEST PUSH2 0x1F7 SWAP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL DUP3 SLOAD AND OR SWAP1 SSTORE DUP1 RETURN JUMPDEST POP PUSH2 0x1CEE DUP2 PUSH1 0x33 SLOAD AND DUP3 PUSH2 0x1D19 PUSH2 0x4063 JUMP JUMPDEST AND EQ SWAP1 POP PUSH2 0x1CE5 JUMP JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x351 JUMPI PUSH1 0x20 PUSH1 0xFF PUSH1 0x97 SLOAD PUSH1 0xA0 SHR AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST POP PUSH1 0xA0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x351 JUMPI PUSH1 0x44 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x56D JUMPI PUSH2 0x1D74 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x3530 JUMP JUMPDEST PUSH1 0x84 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0xE8F JUMPI PUSH2 0x1D93 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x3586 JUMP JUMPDEST POP POP PUSH1 0x24 CALLDATALOAD DUP3 MSTORE PUSH2 0x1F9 PUSH1 0x20 MSTORE PUSH2 0x1DB3 PUSH1 0xFF PUSH1 0x40 DUP5 KECCAK256 SLOAD PUSH1 0xA0 SHR AND PUSH2 0x3ED2 JUMP JUMPDEST DUP1 MLOAD PUSH2 0x1DC9 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO ISZERO PUSH2 0x3E91 JUMP JUMPDEST PUSH2 0x1DD7 CHAINID PUSH1 0x4 CALLDATALOAD EQ ISZERO PUSH2 0x3F15 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD DUP3 MSTORE PUSH2 0x1FA PUSH1 0x20 MSTORE PUSH1 0x40 DUP3 KECCAK256 SLOAD PUSH2 0x1DFB SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO ISZERO PUSH2 0x3F73 JUMP JUMPDEST PUSH2 0x2710 PUSH2 0x1E0B PUSH2 0x1FD SLOAD CALLVALUE PUSH2 0x3CA8 JUMP JUMPDEST DIV DUP1 CALLVALUE LT PUSH2 0x20D7 JUMPI CALLVALUE DUP2 CALLVALUE SUB GT PUSH2 0x20C3 JUMPI PUSH2 0x1E24 PUSH2 0x4063 JUMP JUMPDEST PUSH2 0x1FE DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 ISZERO PUSH2 0x2072 JUMPI DUP6 DUP1 DUP1 DUP7 DUP2 SWAP5 DUP3 DUP3 ISZERO PUSH2 0x2069 JUMPI JUMPDEST CALL ISZERO PUSH2 0x205E JUMPI PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP1 SLOAD AND PUSH1 0x40 MLOAD SWAP2 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND DUP3 MSTORE DUP3 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x64 CALLDATALOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x24 CALLDATALOAD SWAP1 PUSH32 0x54AAFB6ABEFE1F281CCB11A7597DC7E2F13418168020924F176AF9492821CAC PUSH1 0x80 PUSH1 0x4 CALLDATALOAD SWAP3 LOG3 PUSH2 0x1EAB PUSH2 0x4063 JUMP JUMPDEST SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x1EBC PUSH2 0x4063 JUMP JUMPDEST AND DUP5 MSTORE PUSH2 0x1FB PUSH1 0x20 MSTORE PUSH1 0x40 DUP5 KECCAK256 CHAINID DUP6 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP5 KECCAK256 PUSH1 0x4 CALLDATALOAD DUP6 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP5 KECCAK256 SLOAD PUSH2 0x1FA PUSH1 0x20 MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x40 DUP7 KECCAK256 SLOAD AND SWAP1 PUSH1 0x40 MLOAD SWAP5 PUSH2 0x1F01 DUP7 PUSH2 0x3428 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND DUP6 MSTORE PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0x24 CALLDATALOAD PUSH1 0x40 DUP6 ADD MSTORE CHAINID PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x4 CALLDATALOAD PUSH1 0x80 DUP6 ADD MSTORE ADDRESS PUSH1 0xA0 DUP6 ADD MSTORE PUSH1 0xC0 DUP5 ADD MSTORE PUSH1 0xE0 DUP4 ADD MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH2 0x1F45 PUSH2 0x4063 JUMP JUMPDEST AND DUP4 MSTORE PUSH2 0x1FB PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 CHAINID DUP5 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 PUSH1 0x4 CALLDATALOAD DUP5 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 DUP1 SLOAD SWAP1 PUSH1 0x1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x204A JUMPI SSTORE PUSH1 0x24 CALLDATALOAD DUP4 MSTORE PUSH2 0x1F9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SLOAD SWAP1 MLOAD PUSH4 0xDB17B69 PUSH1 0xE2 SHL DUP2 MSTORE SWAP3 DUP5 SWAP3 DUP5 SWAP3 SWAP1 SWAP2 DUP4 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP3 SWAP1 PUSH2 0x1FBA SWAP1 PUSH1 0x64 CALLDATALOAD SWAP1 PUSH1 0x4 DUP5 ADD PUSH2 0x3FD4 JUMP JUMPDEST SUB SWAP3 CALLVALUE SUB SWAP1 GAS CALL DUP1 ISZERO PUSH2 0x203F JUMPI PUSH2 0x1FCF JUMPI POP DUP1 RETURN JUMPDEST RETURNDATASIZE DUP1 DUP4 DUP4 RETURNDATACOPY PUSH2 0x1FDE DUP2 DUP4 PUSH2 0x3475 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH1 0x20 DUP2 DUP4 SUB SLT PUSH2 0xE8F JUMPI DUP1 MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0xBD7 JUMPI ADD DUP2 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0xE8F JUMPI DUP1 MLOAD SWAP1 PUSH2 0x2014 DUP3 PUSH2 0x3496 JUMP JUMPDEST SWAP3 PUSH2 0x2022 PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0x3475 JUMP JUMPDEST DUP3 DUP5 MSTORE PUSH1 0x20 DUP4 DUP4 ADD ADD GT PUSH2 0xBD7 JUMPI PUSH1 0x20 DUP1 PUSH2 0xF67 SWAP5 ADD SWAP2 ADD PUSH2 0x35B3 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP5 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP6 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 DUP6 REVERT JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP7 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST POP PUSH2 0x8FC PUSH2 0x1E46 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x43726F737353796E634665652041646472657373204973205A65726F20416464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 DUP4 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x52656C61796572286D73672E76616C75652920466565206973206C6573732074 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x68616E2073796E63466565 PUSH1 0xA8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x351 JUMPI PUSH1 0xFF PUSH1 0x40 PUSH1 0x20 SWAP3 PUSH1 0x4 CALLDATALOAD DUP2 MSTORE PUSH2 0x1F9 DUP5 MSTORE KECCAK256 SLOAD PUSH1 0xA0 SHR AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x351 JUMPI PUSH1 0x20 PUSH2 0x217F PUSH2 0x33FE JUMP JUMPDEST PUSH1 0x97 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND SWAP2 SWAP1 SWAP3 AND EQ DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI DUP1 PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x226F JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x21F7 PUSH2 0x21BB PUSH2 0x4063 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4140 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP6 MSTORE PUSH1 0xFB DUP5 MSTORE PUSH1 0x40 DUP1 DUP7 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND DUP8 MSTORE DUP6 MSTORE DUP6 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 DUP2 ISZERO PUSH2 0x1A49 JUMPI POP PUSH2 0x3E4F JUMP JUMPDEST DUP1 DUP4 MSTORE PUSH2 0x1F9 SWAP1 DUP2 DUP4 MSTORE PUSH2 0x2214 PUSH1 0xFF PUSH1 0x40 DUP7 KECCAK256 SLOAD PUSH1 0xA0 SHR AND PUSH2 0x3ED2 JUMP JUMPDEST DUP4 MSTORE DUP2 MSTORE PUSH1 0x1 PUSH1 0x40 DUP4 KECCAK256 DUP4 DUP2 SSTORE ADD SWAP1 PUSH2 0x222D DUP3 SLOAD PUSH2 0x3CF8 JUMP JUMPDEST SWAP1 DUP2 PUSH2 0x2238 JUMPI POP POP POP RETURN JUMPDEST DUP2 PUSH1 0x1F DUP6 SWAP4 GT PUSH1 0x1 EQ PUSH2 0x224C JUMPI POP POP POP SSTORE DUP1 RETURN JUMPDEST DUP4 DUP4 MSTORE DUP2 DUP4 KECCAK256 PUSH2 0x2267 SWAP2 PUSH1 0x1F ADD PUSH1 0x5 SHR DUP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x3E38 JUMP JUMPDEST DUP2 KECCAK256 SWAP2 SSTORE SSTORE DUP1 RETURN JUMPDEST POP REVERT JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x351 JUMPI PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ADDRESS SUB PUSH2 0x22CB JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4100 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 MSTORE RETURN JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x38 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x555550535570677261646561626C653A206D757374206E6F742062652063616C PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6C6564207468726F7567682064656C656761746563616C6C0000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST POP PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x351 JUMPI PUSH2 0x234B PUSH2 0x33FE JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0xE8F JUMPI PUSH2 0x236A SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x34E8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 PUSH32 0x0 DUP4 AND PUSH2 0x23A3 ADDRESS DUP3 EQ ISZERO PUSH2 0x3ABD JUMP JUMPDEST PUSH2 0x23C0 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4100 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 DUP6 DUP4 SLOAD AND EQ PUSH2 0x3B1E JUMP JUMPDEST PUSH2 0x23C8 PUSH2 0x4063 JUMP JUMPDEST SWAP4 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x40E0 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP7 MSTORE PUSH1 0x20 SWAP5 PUSH1 0xFB DUP7 MSTORE DUP2 PUSH1 0x40 DUP9 KECCAK256 SWAP2 AND DUP8 MSTORE DUP6 MSTORE PUSH1 0xFF PUSH1 0x40 DUP8 KECCAK256 SLOAD AND DUP1 ISZERO PUSH2 0x2629 JUMPI JUMPDEST PUSH2 0x2404 SWAP1 PUSH2 0x3E4F JUMP JUMPDEST PUSH32 0x4910FDFA16FED3260ED0E7147F7CC6DA11A60208B5B9406D12A635614FFD9143 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x243B JUMPI POP POP POP PUSH2 0xF67 SWAP2 POP PUSH2 0x3B7F JUMP JUMPDEST DUP4 AND SWAP1 PUSH1 0x40 MLOAD PUSH4 0x52D1902D PUSH1 0xE0 SHL DUP2 MSTORE DUP6 DUP2 PUSH1 0x4 DUP2 DUP7 GAS STATICCALL DUP8 SWAP2 DUP2 PUSH2 0x25FA JUMPI JUMPDEST POP PUSH2 0x24BC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A206E657720696D706C656D656E74617469 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x6F6E206973206E6F742055555053 PUSH1 0x90 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST SWAP5 SWAP3 SWAP4 SWAP5 SUB PUSH2 0x25A3 JUMPI PUSH2 0x24CE DUP5 PUSH2 0x3B7F JUMP JUMPDEST PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B DUP6 DUP1 LOG2 DUP2 MLOAD ISZERO DUP1 ISZERO SWAP1 PUSH2 0x259B JUMPI JUMPDEST PUSH2 0x2508 JUMPI JUMPDEST POP POP POP DUP1 RETURN JUMPDEST PUSH2 0x2589 SWAP3 DUP5 DUP1 PUSH1 0x40 MLOAD SWAP5 PUSH2 0x251B DUP7 PUSH2 0x345A JUMP JUMPDEST PUSH1 0x27 DUP7 MSTORE PUSH32 0x416464726573733A206C6F772D6C6576656C2064656C65676174652063616C6C DUP6 DUP8 ADD MSTORE PUSH7 0x819985A5B1959 PUSH1 0xCA SHL PUSH1 0x40 DUP8 ADD MSTORE DUP5 DUP2 MLOAD SWAP2 ADD DUP5 GAS DELEGATECALL SWAP1 RETURNDATASIZE ISZERO PUSH2 0x2592 JUMPI RETURNDATASIZE PUSH2 0x256D DUP2 PUSH2 0x3496 JUMP JUMPDEST SWAP1 PUSH2 0x257B PUSH1 0x40 MLOAD SWAP3 DUP4 PUSH2 0x3475 JUMP JUMPDEST DUP2 MSTORE DUP7 DUP2 SWAP5 RETURNDATASIZE SWAP3 ADD RETURNDATACOPY PUSH2 0x3C0F JUMP JUMPDEST POP CODESIZE DUP1 DUP1 PUSH2 0x2502 JUMP JUMPDEST PUSH1 0x60 SWAP3 POP PUSH2 0x3C0F JUMP JUMPDEST POP PUSH1 0x1 PUSH2 0x24FD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A20756E737570706F727465642070726F78 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x1A58589B1955555251 PUSH1 0xBA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST SWAP1 SWAP2 POP DUP7 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x2622 JUMPI JUMPDEST PUSH2 0x2612 DUP2 DUP4 PUSH2 0x3475 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0xE2E JUMPI MLOAD SWAP1 CODESIZE PUSH2 0x245B JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x2608 JUMP JUMPDEST POP PUSH2 0x2404 DUP2 PUSH1 0x33 SLOAD AND DUP3 PUSH2 0x263B PUSH2 0x4063 JUMP JUMPDEST AND EQ SWAP1 POP PUSH2 0x23FB JUMP JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x351 JUMPI PUSH2 0x265E PUSH2 0x33FE JUMP JUMPDEST PUSH2 0x2666 PUSH2 0x3A11 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4140 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 DUP4 MSTORE PUSH1 0xFB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP6 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND DUP1 DUP8 MSTORE SWAP3 MSTORE DUP5 KECCAK256 SLOAD SWAP2 SWAP3 SWAP1 SWAP2 PUSH1 0xFF AND PUSH2 0xFCC JUMPI DUP4 DUP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x351 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4140 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI PUSH1 0xFF PUSH1 0x40 PUSH1 0x20 SWAP3 PUSH2 0x26E5 CALLDATASIZE PUSH2 0x3506 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP4 MSTORE PUSH2 0x1FC DUP7 MSTORE DUP4 DUP4 KECCAK256 SWAP1 DUP4 MSTORE DUP6 MSTORE DUP3 DUP3 KECCAK256 SWAP1 DUP3 MSTORE DUP5 MSTORE KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP2 AND ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x351 JUMPI PUSH2 0x272D PUSH2 0x4063 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4120 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP3 MSTORE PUSH1 0xFB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP6 MSTORE DUP3 MSTORE DUP4 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 PUSH1 0xFF AND DUP1 ISZERO PUSH2 0x2814 JUMPI JUMPDEST DUP1 ISZERO PUSH2 0x27F9 JUMPI JUMPDEST PUSH2 0x2779 SWAP1 PUSH2 0x3E4F JUMP JUMPDEST PUSH1 0x97 SLOAD PUSH1 0xFF DUP2 PUSH1 0xA0 SHR AND ISZERO PUSH2 0x27BD JUMPI PUSH1 0xFF PUSH1 0xA0 SHL NOT AND PUSH1 0x97 SSTORE PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA SWAP2 SWAP1 PUSH2 0x1805 PUSH2 0x4063 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x14185D5CD8589B194E881B9BDD081C185D5CD959 PUSH1 0x62 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST POP PUSH2 0x2779 DUP2 PUSH1 0x33 SLOAD AND DUP3 PUSH2 0x280B PUSH2 0x4063 JUMP JUMPDEST AND EQ SWAP1 POP PUSH2 0x2770 JUMP JUMPDEST POP PUSH2 0x281D PUSH2 0x4063 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4140 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 MSTORE PUSH1 0xFB DUP4 MSTORE DUP2 PUSH1 0x40 DUP6 KECCAK256 SWAP2 AND DUP5 MSTORE DUP3 MSTORE PUSH1 0xFF PUSH1 0x40 DUP5 KECCAK256 SLOAD AND PUSH2 0x2769 JUMP JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x56D JUMPI PUSH2 0x2865 PUSH2 0x33FE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 DUP2 AND PUSH2 0x289C ADDRESS DUP3 EQ ISZERO PUSH2 0x3ABD JUMP JUMPDEST PUSH2 0x28B9 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4100 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 DUP4 DUP4 SLOAD AND EQ PUSH2 0x3B1E JUMP JUMPDEST PUSH2 0x28C1 PUSH2 0x4063 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x40E0 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP7 MSTORE PUSH1 0xFB DUP6 MSTORE DUP3 PUSH1 0x40 DUP8 KECCAK256 SWAP2 AND DUP7 MSTORE DUP5 MSTORE PUSH1 0xFF PUSH1 0x40 DUP7 KECCAK256 SLOAD AND DUP1 ISZERO PUSH2 0x2B24 JUMPI JUMPDEST PUSH2 0x28F9 SWAP1 PUSH2 0x3E4F JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP5 DUP3 ADD SWAP3 DUP3 DUP5 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP6 GT OR PUSH2 0xE32 JUMPI DUP4 PUSH1 0x40 MSTORE DUP7 DUP4 MSTORE PUSH1 0xFF PUSH32 0x4910FDFA16FED3260ED0E7147F7CC6DA11A60208B5B9406D12A635614FFD9143 SLOAD AND PUSH1 0x0 EQ PUSH2 0x2954 JUMPI POP POP POP POP PUSH2 0xF67 SWAP2 POP PUSH2 0x3B7F JUMP JUMPDEST DUP5 SWAP3 SWAP4 SWAP5 AND SWAP1 PUSH1 0x40 MLOAD PUSH4 0x52D1902D PUSH1 0xE0 SHL DUP2 MSTORE DUP7 DUP2 PUSH1 0x4 DUP2 DUP7 GAS STATICCALL DUP9 SWAP2 DUP2 PUSH2 0x2AF1 JUMPI JUMPDEST POP PUSH2 0x29D8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A206E657720696D706C656D656E74617469 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x6F6E206973206E6F742055555053 PUSH1 0x90 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST SWAP6 SWAP4 SWAP5 SWAP6 SUB PUSH2 0x2A9A JUMPI PUSH2 0x29EA DUP3 PUSH2 0x3B7F JUMP JUMPDEST PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B DUP7 DUP1 LOG2 DUP5 DUP4 MLOAD ISZERO DUP1 ISZERO SWAP1 PUSH2 0x2A93 JUMPI JUMPDEST PUSH2 0x2A27 JUMPI JUMPDEST POP POP POP POP POP DUP1 RETURN JUMPDEST DUP1 PUSH2 0x2A88 SWAP6 PUSH1 0x40 MLOAD SWAP6 PUSH2 0x2A39 DUP8 PUSH2 0x345A JUMP JUMPDEST PUSH1 0x27 DUP8 MSTORE PUSH32 0x416464726573733A206C6F772D6C6576656C2064656C65676174652063616C6C DUP7 DUP9 ADD MSTORE PUSH7 0x819985A5B1959 PUSH1 0xCA SHL PUSH1 0x40 DUP9 ADD MSTORE MLOAD SWAP1 DUP5 GAS DELEGATECALL SWAP1 RETURNDATASIZE ISZERO PUSH2 0x2592 JUMPI RETURNDATASIZE PUSH2 0x256D DUP2 PUSH2 0x3496 JUMP JUMPDEST POP CODESIZE DUP1 DUP1 DUP1 DUP5 PUSH2 0x2A1F JUMP JUMPDEST POP DUP1 PUSH2 0x2A1A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A20756E737570706F727465642070726F78 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x1A58589B1955555251 PUSH1 0xBA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST SWAP1 SWAP2 POP DUP8 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x2B1D JUMPI JUMPDEST PUSH2 0x2B09 DUP2 DUP4 PUSH2 0x3475 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x2B19 JUMPI MLOAD SWAP1 CODESIZE PUSH2 0x2977 JUMP JUMPDEST DUP9 DUP1 REVERT JUMPDEST POP RETURNDATASIZE PUSH2 0x2AFF JUMP JUMPDEST POP PUSH2 0x28F9 DUP3 PUSH1 0x33 SLOAD AND DUP4 PUSH2 0x2B36 PUSH2 0x4063 JUMP JUMPDEST AND EQ SWAP1 POP PUSH2 0x28F0 JUMP JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x351 JUMPI PUSH2 0x2B59 PUSH2 0x33E8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 PUSH2 0x2B6A PUSH2 0x4063 JUMP JUMPDEST AND SWAP1 DUP3 AND SUB PUSH2 0x2B7F JUMPI PUSH2 0xF67 SWAP1 PUSH1 0x4 CALLDATALOAD PUSH2 0x3997 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x44 DUP3 ADD MSTORE PUSH15 0x103937B632B9903337B91039B2B633 PUSH1 0x89 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x351 JUMPI PUSH2 0x2BF6 PUSH2 0x33FE JUMP JUMPDEST PUSH2 0x2BFE PUSH2 0x4063 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4140 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 MSTORE PUSH1 0xFB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP6 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP7 MSTORE SWAP1 SWAP2 MSTORE DUP4 KECCAK256 SLOAD PUSH1 0xFF AND DUP1 ISZERO PUSH2 0x2C5A JUMPI JUMPDEST PUSH2 0x2C41 SWAP1 PUSH2 0x3E4F JUMP JUMPDEST PUSH2 0x1F8 SWAP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL DUP3 SLOAD AND OR SWAP1 SSTORE DUP1 RETURN JUMPDEST POP PUSH2 0x2C41 DUP2 PUSH1 0x33 SLOAD AND DUP3 PUSH2 0x2C6C PUSH2 0x4063 JUMP JUMPDEST AND EQ SWAP1 POP PUSH2 0x2C38 JUMP JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x351 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x2C92 PUSH2 0x33E8 JUMP JUMPDEST DUP2 DUP4 MSTORE PUSH1 0xFB PUSH1 0x20 MSTORE PUSH2 0x2CAA PUSH1 0x1 PUSH1 0x40 DUP6 KECCAK256 ADD SLOAD PUSH2 0x35FB JUMP JUMPDEST DUP2 DUP4 MSTORE PUSH1 0xFB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP6 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP1 DUP8 MSTORE SWAP3 MSTORE DUP5 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 PUSH1 0xFF AND ISZERO PUSH2 0x12E2 JUMPI DUP4 DUP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x351 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0x4 CALLDATALOAD PUSH1 0x24 CALLDATALOAD DUP3 DUP2 GT PUSH2 0xBD7 JUMPI PUSH2 0x2D10 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x34E8 JUMP JUMPDEST SWAP2 PUSH2 0x2D19 PUSH2 0x4063 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4140 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP6 MSTORE PUSH1 0xFB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP8 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP9 MSTORE DUP3 MSTORE DUP7 KECCAK256 SLOAD SWAP1 SWAP4 SWAP2 PUSH2 0x2D5F SWAP2 PUSH1 0xFF AND SWAP1 DUP2 ISZERO PUSH2 0x1A49 JUMPI POP PUSH2 0x3E4F JUMP JUMPDEST DUP1 DUP6 MSTORE PUSH2 0x1F9 SWAP1 DUP2 DUP5 MSTORE PUSH2 0x2D7C PUSH1 0xFF PUSH1 0x40 DUP9 KECCAK256 SLOAD PUSH1 0xA0 SHR AND PUSH2 0x3ED2 JUMP JUMPDEST DUP6 MSTORE DUP3 MSTORE PUSH1 0x1 SWAP2 DUP3 PUSH1 0x40 DUP7 KECCAK256 ADD SWAP4 DUP1 MLOAD SWAP3 DUP4 GT PUSH2 0x2E6F JUMPI PUSH2 0x2D9D DUP6 SLOAD PUSH2 0x3CF8 JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0x2E41 JUMPI JUMPDEST POP DUP2 PUSH1 0x1F DUP5 GT PUSH1 0x1 EQ PUSH2 0x2DE0 JUMPI POP SWAP3 DUP3 SWAP4 SWAP2 DUP4 SWAP3 DUP8 SWAP5 PUSH2 0x2DD5 JUMPI JUMPDEST POP POP SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR SWAP1 SSTORE DUP1 RETURN JUMPDEST ADD MLOAD SWAP3 POP CODESIZE DUP1 PUSH2 0x2DC1 JUMP JUMPDEST SWAP2 SWAP1 DUP4 PUSH1 0x1F NOT DUP2 AND DUP8 DUP10 MSTORE DUP5 DUP10 KECCAK256 SWAP5 DUP10 SWAP1 JUMPDEST DUP9 DUP4 DUP4 LT PUSH2 0x2E27 JUMPI POP POP POP LT PUSH2 0x2E0E JUMPI JUMPDEST POP POP POP DUP2 SHL ADD SWAP1 SSTORE DUP1 RETURN JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH2 0x2E03 JUMP JUMPDEST DUP6 DUP8 ADD MLOAD DUP9 SSTORE SWAP1 SWAP7 ADD SWAP6 SWAP5 DUP6 ADD SWAP5 DUP8 SWAP4 POP SWAP1 DUP2 ADD SWAP1 PUSH2 0x2DF2 JUMP JUMPDEST PUSH2 0x2E69 SWAP1 DUP7 DUP9 MSTORE DUP4 DUP9 KECCAK256 PUSH1 0x1F DUP7 ADD PUSH1 0x5 SHR DUP2 ADD SWAP2 DUP6 DUP8 LT PUSH2 0xA2B JUMPI PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP1 PUSH2 0x3E38 JUMP JUMPDEST CODESIZE PUSH2 0x2DA6 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP7 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP7 REVERT JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x351 JUMPI PUSH1 0x1 PUSH1 0x40 PUSH1 0x20 SWAP3 PUSH1 0x4 CALLDATALOAD DUP2 MSTORE PUSH1 0xFB DUP5 MSTORE KECCAK256 ADD SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI PUSH1 0x40 PUSH1 0x20 SWAP2 PUSH2 0x2EC4 CALLDATASIZE PUSH2 0x3506 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP4 MSTORE PUSH2 0x1FB DUP6 MSTORE DUP4 DUP4 KECCAK256 SWAP1 DUP4 MSTORE DUP5 MSTORE DUP3 DUP3 KECCAK256 SWAP1 DUP3 MSTORE DUP4 MSTORE KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x351 JUMPI PUSH1 0x20 SWAP1 PUSH1 0x4 CALLDATALOAD DUP2 MSTORE PUSH2 0x1F9 DUP3 MSTORE PUSH1 0x40 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 KECCAK256 SLOAD AND PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x56D JUMPI PUSH2 0x2F3F PUSH2 0x33FE JUMP JUMPDEST PUSH2 0x2F47 PUSH2 0x4063 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4140 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 MSTORE PUSH1 0xFB DUP4 MSTORE PUSH1 0x40 DUP1 DUP6 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND DUP7 MSTORE DUP5 MSTORE DUP5 KECCAK256 SLOAD PUSH1 0xFF AND DUP1 ISZERO PUSH2 0x2FBA JUMPI JUMPDEST PUSH2 0x2F86 SWAP1 PUSH2 0x3E4F JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4180 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP3 DUP4 DUP6 MSTORE PUSH1 0xFB DUP2 MSTORE DUP2 PUSH1 0x40 DUP7 KECCAK256 SWAP4 AND SWAP3 DUP4 DUP7 MSTORE DUP2 MSTORE PUSH1 0xFF PUSH1 0x40 DUP7 KECCAK256 SLOAD AND PUSH2 0x1C2E JUMPI DUP5 DUP1 RETURN JUMPDEST POP PUSH2 0x2F86 DUP2 PUSH1 0x33 SLOAD AND DUP3 PUSH2 0x2FCC PUSH2 0x4063 JUMP JUMPDEST AND EQ SWAP1 POP PUSH2 0x2F7D JUMP JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x351 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x2FF2 PUSH2 0x33E8 JUMP JUMPDEST PUSH2 0x2FFA PUSH2 0x4063 JUMP JUMPDEST SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4140 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 MSTORE PUSH1 0xFB PUSH1 0x20 MSTORE PUSH1 0x40 DUP5 KECCAK256 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 SWAP4 AND DUP6 MSTORE PUSH1 0x20 MSTORE PUSH1 0xFF PUSH1 0x40 DUP6 KECCAK256 SLOAD AND DUP1 ISZERO PUSH2 0x3084 JUMPI JUMPDEST PUSH2 0x303C SWAP1 PUSH2 0x3E4F JUMP JUMPDEST AND SWAP1 PUSH2 0x3049 DUP3 ISZERO ISZERO PUSH2 0x3E91 JUMP JUMPDEST DUP1 DUP4 MSTORE PUSH2 0x1F9 SWAP1 DUP2 PUSH1 0x20 MSTORE PUSH2 0x3067 PUSH1 0xFF PUSH1 0x40 DUP7 KECCAK256 SLOAD PUSH1 0xA0 SHR AND PUSH2 0x3ED2 JUMP JUMPDEST DUP4 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SWAP2 OR SWAP1 SSTORE DUP1 RETURN JUMPDEST POP PUSH2 0x303C DUP3 PUSH1 0x33 SLOAD AND DUP4 PUSH2 0x3096 PUSH2 0x4063 JUMP JUMPDEST AND EQ SWAP1 POP PUSH2 0x3033 JUMP JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x351 JUMPI PUSH1 0x4 CALLDATALOAD PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL DUP2 AND DUP1 SWAP2 SUB PUSH2 0x56D JUMPI PUSH1 0x20 SWAP1 PUSH4 0x7965DB0B PUSH1 0xE0 SHL DUP2 EQ SWAP1 DUP2 ISZERO PUSH2 0x30E5 JUMPI JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL EQ SWAP1 POP DUP3 PUSH2 0x30DA JUMP JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x351 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x24 CALLDATALOAD DUP1 ISZERO ISZERO DUP2 SUB PUSH2 0xE8F JUMPI PUSH2 0xF67 SWAP2 PUSH2 0x3166 PUSH2 0x3126 PUSH2 0x4063 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4140 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP7 MSTORE PUSH1 0xFB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP9 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP10 MSTORE SWAP1 SWAP2 MSTORE DUP7 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 DUP2 ISZERO PUSH2 0x1A49 JUMPI POP PUSH2 0x3E4F JUMP JUMPDEST DUP1 DUP5 MSTORE PUSH2 0x1F9 SWAP1 DUP2 PUSH1 0x20 MSTORE PUSH2 0x3184 PUSH1 0xFF PUSH1 0x40 DUP8 KECCAK256 SLOAD PUSH1 0xA0 SHR AND PUSH2 0x3ED2 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF PUSH1 0xA0 SHL NOT AND SWAP2 ISZERO ISZERO PUSH1 0xA0 SHL PUSH1 0xFF PUSH1 0xA0 SHL AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x351 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x31C7 PUSH2 0x33E8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0x44 CALLDATALOAD DUP2 DUP2 GT PUSH2 0xE46 JUMPI PUSH2 0x31E7 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x34E8 JUMP JUMPDEST SWAP3 PUSH2 0x31F0 PUSH2 0x4063 JUMP JUMPDEST SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4140 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP7 MSTORE PUSH1 0x20 SWAP2 PUSH1 0xFB DUP4 MSTORE PUSH1 0x40 DUP8 KECCAK256 SWAP5 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP6 DUP7 DUP1 SWAP4 AND DUP10 MSTORE DUP5 MSTORE PUSH1 0xFF PUSH1 0x40 DUP10 KECCAK256 SLOAD AND DUP1 ISZERO PUSH2 0x33CD JUMPI JUMPDEST PUSH2 0x3236 SWAP1 PUSH2 0x3E4F JUMP JUMPDEST AND PUSH2 0x3242 DUP2 ISZERO ISZERO PUSH2 0x3E91 JUMP JUMPDEST DUP2 DUP8 MSTORE PUSH2 0x1F9 SWAP5 DUP6 DUP5 MSTORE PUSH1 0xFF PUSH1 0x40 DUP10 KECCAK256 SLOAD PUSH1 0xA0 SHR AND PUSH2 0x3391 JUMPI PUSH1 0x40 MLOAD SWAP2 PUSH1 0x60 DUP4 ADD DUP4 DUP2 LT DUP8 DUP3 GT OR PUSH2 0x337D JUMPI PUSH1 0x40 SWAP1 DUP2 MSTORE SWAP1 DUP4 MSTORE PUSH1 0x1 DUP6 DUP5 ADD DUP2 DUP2 MSTORE DUP5 DUP4 ADD SWAP10 DUP11 MSTORE SWAP5 DUP11 MSTORE SWAP7 DUP6 MSTORE DUP9 KECCAK256 SWAP2 MLOAD DUP3 SLOAD SWAP4 MLOAD PUSH1 0xFF PUSH1 0xA0 SHL SWAP1 ISZERO ISZERO PUSH1 0xA0 SHL AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT SWAP1 SWAP5 AND SWAP2 AND PUSH1 0xFF PUSH1 0xA0 SHL NOT AND OR SWAP2 SWAP1 SWAP2 OR DUP2 SSTORE DUP4 ADD SWAP4 MLOAD DUP1 MLOAD SWAP3 DUP4 GT PUSH2 0x2E6F JUMPI PUSH2 0x32D1 DUP6 SLOAD PUSH2 0x3CF8 JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0x334F JUMPI JUMPDEST POP DUP2 PUSH1 0x1F DUP5 GT PUSH1 0x1 EQ PUSH2 0x3308 JUMPI POP SWAP3 DUP3 SWAP4 SWAP2 DUP4 SWAP3 DUP8 SWAP5 PUSH2 0x2DD5 JUMPI POP POP SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR SWAP1 SSTORE DUP1 RETURN JUMPDEST SWAP2 SWAP1 DUP4 PUSH1 0x1F NOT DUP2 AND DUP8 DUP10 MSTORE DUP5 DUP10 KECCAK256 SWAP5 DUP10 SWAP1 JUMPDEST DUP9 DUP4 DUP4 LT PUSH2 0x3335 JUMPI POP POP POP LT PUSH2 0x2E0E JUMPI POP POP POP DUP2 SHL ADD SWAP1 SSTORE DUP1 RETURN JUMPDEST DUP6 DUP8 ADD MLOAD DUP9 SSTORE SWAP1 SWAP7 ADD SWAP6 SWAP5 DUP6 ADD SWAP5 DUP8 SWAP4 POP SWAP1 DUP2 ADD SWAP1 PUSH2 0x331A JUMP JUMPDEST PUSH2 0x3377 SWAP1 DUP7 DUP9 MSTORE DUP4 DUP9 KECCAK256 PUSH1 0x1F DUP7 ADD PUSH1 0x5 SHR DUP2 ADD SWAP2 DUP6 DUP8 LT PUSH2 0xA2B JUMPI PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP1 PUSH2 0x3E38 JUMP JUMPDEST CODESIZE PUSH2 0x32DA JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP11 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP11 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x526F75746520416C726561647920457869737473 PUSH1 0x60 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST POP PUSH2 0x3236 DUP3 PUSH1 0x33 SLOAD AND DUP4 PUSH2 0x33DF PUSH2 0x4063 JUMP JUMPDEST AND EQ SWAP1 POP PUSH2 0x322D JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0xBD2 JUMPI JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0xBD2 JUMPI JUMP JUMPDEST CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0xBD2 JUMPI JUMP JUMPDEST PUSH2 0x100 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x3444 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x60 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x3444 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x3444 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x3444 JUMPI PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP3 SWAP2 SWAP3 PUSH2 0x34BD DUP3 PUSH2 0x3496 JUMP JUMPDEST SWAP2 PUSH2 0x34CB PUSH1 0x40 MLOAD SWAP4 DUP5 PUSH2 0x3475 JUMP JUMPDEST DUP3 SWAP5 DUP2 DUP5 MSTORE DUP2 DUP4 ADD GT PUSH2 0xBD2 JUMPI DUP3 DUP2 PUSH1 0x20 SWAP4 DUP5 PUSH1 0x0 SWAP7 ADD CALLDATACOPY ADD ADD MSTORE JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0xBD2 JUMPI DUP2 PUSH1 0x20 PUSH2 0x3503 SWAP4 CALLDATALOAD SWAP2 ADD PUSH2 0x34B1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x60 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0xBD2 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0xBD2 JUMPI SWAP1 PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x44 CALLDATALOAD SWAP1 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH1 0x40 DUP2 DUP5 SUB SLT PUSH2 0xBD2 JUMPI PUSH1 0x40 DUP1 MLOAD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP2 DUP4 ADD DUP3 DUP2 GT DUP5 DUP3 LT OR PUSH2 0x3444 JUMPI PUSH1 0x40 MSTORE DUP3 SWAP5 PUSH2 0x3566 DUP3 PUSH2 0x3414 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP3 ADD CALLDATALOAD SWAP3 DUP4 GT PUSH2 0xBD2 JUMPI PUSH1 0x20 SWAP3 PUSH2 0x3581 SWAP3 ADD PUSH2 0x34E8 JUMP JUMPDEST SWAP2 ADD MSTORE JUMP JUMPDEST SWAP2 DUP2 PUSH1 0x1F DUP5 ADD SLT ISZERO PUSH2 0xBD2 JUMPI DUP3 CALLDATALOAD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT PUSH2 0xBD2 JUMPI PUSH1 0x20 DUP4 DUP2 DUP7 ADD SWAP6 ADD ADD GT PUSH2 0xBD2 JUMPI JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x35C6 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x35B6 JUMP JUMPDEST SWAP1 PUSH1 0x20 SWAP2 PUSH2 0x35EF DUP2 MLOAD DUP1 SWAP3 DUP2 DUP6 MSTORE DUP6 DUP1 DUP7 ADD SWAP2 ADD PUSH2 0x35B3 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP JUMPDEST PUSH2 0x3603 PUSH2 0x4063 JUMP JUMPDEST SWAP1 PUSH1 0x0 SWAP1 DUP1 DUP3 MSTORE PUSH1 0x20 SWAP2 PUSH1 0xFB DUP4 MSTORE PUSH1 0x40 SWAP4 DUP5 DUP3 KECCAK256 SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 DUP4 MSTORE DUP5 MSTORE PUSH1 0xFF DUP6 DUP4 KECCAK256 SLOAD AND ISZERO PUSH2 0x3639 JUMPI POP POP POP POP POP JUMP JUMPDEST DUP5 MLOAD SWAP3 PUSH2 0x3645 DUP5 PUSH2 0x345A JUMP JUMPDEST PUSH1 0x2A DUP5 MSTORE DUP5 DUP5 ADD SWAP1 DUP7 CALLDATASIZE DUP4 CALLDATACOPY DUP5 MLOAD ISZERO PUSH2 0x38FB JUMPI PUSH1 0x30 DUP3 MSTORE8 DUP5 MLOAD SWAP3 PUSH1 0x1 SWAP4 DUP5 LT ISZERO PUSH2 0x38E7 JUMPI PUSH1 0x78 PUSH1 0x21 DUP8 ADD MSTORE8 PUSH1 0x29 JUMPDEST DUP5 DUP2 GT PUSH2 0x387D JUMPI POP PUSH2 0x383B JUMPI DUP7 MLOAD SWAP3 PUSH1 0x80 DUP5 ADD DUP5 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x2E6F JUMPI DUP9 MSTORE PUSH1 0x42 DUP5 MSTORE DUP7 DUP5 ADD SWAP5 PUSH1 0x60 CALLDATASIZE DUP8 CALLDATACOPY DUP5 MLOAD ISZERO PUSH2 0x3827 JUMPI PUSH1 0x30 DUP7 MSTORE8 DUP5 MLOAD DUP3 LT ISZERO PUSH2 0x3827 JUMPI SWAP1 PUSH1 0x78 PUSH1 0x21 DUP7 ADD MSTORE8 PUSH1 0x41 SWAP2 JUMPDEST DUP2 DUP4 GT PUSH2 0x37B9 JUMPI POP POP POP PUSH2 0x3777 JUMPI PUSH2 0x3773 SWAP4 DUP7 SWAP4 PUSH2 0x3757 SWAP4 PUSH2 0x3748 PUSH1 0x48 SWAP5 PUSH2 0x371F SWAP11 MLOAD SWAP11 DUP12 SWAP6 PUSH32 0x416363657373436F6E74726F6C3A206163636F756E7420000000000000000000 DUP13 DUP9 ADD MSTORE MLOAD DUP1 SWAP3 PUSH1 0x37 DUP9 ADD SWAP1 PUSH2 0x35B3 JUMP JUMPDEST DUP5 ADD SWAP2 PUSH17 0x1034B99036B4B9B9B4B733903937B6329 PUSH1 0x7D SHL PUSH1 0x37 DUP5 ADD MSTORE MLOAD DUP1 SWAP4 DUP7 DUP5 ADD SWAP1 PUSH2 0x35B3 JUMP JUMPDEST ADD SUB PUSH1 0x28 DUP2 ADD DUP8 MSTORE ADD DUP6 PUSH2 0x3475 JUMP JUMPDEST MLOAD SWAP3 DUP4 SWAP3 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP5 MSTORE PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x24 DUP4 ADD SWAP1 PUSH2 0x35D6 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x64 DUP6 DUP8 MLOAD SWAP1 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE DUP1 PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 SWAP2 SWAP3 PUSH1 0xF DUP2 AND PUSH1 0x10 DUP2 LT ISZERO PUSH2 0x3813 JUMPI PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL SWAP1 BYTE PUSH2 0x37E9 DUP6 DUP9 PUSH2 0x3CD1 JUMP JUMPDEST MSTORE8 PUSH1 0x4 SHR SWAP3 DUP1 ISZERO PUSH2 0x37FF JUMPI PUSH1 0x0 NOT ADD SWAP2 SWAP1 PUSH2 0x36C7 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP3 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 DUP3 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 DUP4 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST PUSH1 0x64 DUP7 DUP9 MLOAD SWAP1 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE DUP1 PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 PUSH1 0xF DUP2 AND PUSH1 0x10 DUP2 LT ISZERO PUSH2 0x38D3 JUMPI PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL SWAP1 BYTE PUSH2 0x38AB DUP4 DUP10 PUSH2 0x3CD1 JUMP JUMPDEST MSTORE8 PUSH1 0x4 SHR SWAP1 DUP1 ISZERO PUSH2 0x38BF JUMPI PUSH1 0x0 NOT ADD PUSH2 0x3673 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP7 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 DUP7 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP8 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 DUP8 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP6 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 DUP6 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP5 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 DUP5 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH32 0xC88390E7E62175BE0932452175B6A7222B6B094AB0EF984A5153C620345D8975 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 SWAP3 SWAP1 PUSH1 0xFF AND ISZERO PUSH2 0x3958 JUMPI POP POP POP JUMP JUMPDEST DUP3 DUP1 MSTORE PUSH1 0xFB PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 DUP3 DUP5 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0xFF NOT DUP3 SLOAD AND OR SWAP1 SSTORE PUSH2 0x3981 PUSH2 0x4063 JUMP JUMPDEST AND SWAP2 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x40C0 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 DUP1 LOG4 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xFB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 DUP7 AND DUP1 DUP6 MSTORE SWAP3 MSTORE DUP3 KECCAK256 SLOAD SWAP2 SWAP4 SWAP1 SWAP3 SWAP2 PUSH1 0xFF AND PUSH2 0x39CE JUMPI JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4160 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 DUP3 DUP6 MSTORE PUSH1 0xFB PUSH1 0x20 MSTORE PUSH1 0x40 DUP6 KECCAK256 DUP5 DUP7 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP6 KECCAK256 PUSH1 0xFF NOT DUP2 SLOAD AND SWAP1 SSTORE PUSH2 0x3A04 PUSH2 0x4063 JUMP JUMPDEST AND SWAP4 DUP1 LOG4 CODESIZE DUP1 DUP1 DUP1 PUSH2 0x39C8 JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP1 PUSH2 0x3A28 PUSH2 0x4063 JUMP JUMPDEST AND SUB PUSH2 0x3A30 JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x33 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP3 AND DUP2 OR SWAP1 SWAP3 SSTORE SWAP1 SWAP2 AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x0 DUP1 LOG3 JUMP JUMPDEST ISZERO PUSH2 0x3AC4 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x19195B1959D85D1958D85B1B PUSH1 0xA2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x3B25 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x6163746976652070726F7879 PUSH1 0xA0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST DUP1 EXTCODESIZE ISZERO PUSH2 0x3BB4 JUMPI PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4100 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x44 DUP3 ADD MSTORE PUSH13 0x1BDD08184818DBDB9D1C9858DD PUSH1 0x9A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST SWAP2 SWAP3 SWAP1 ISZERO PUSH2 0x3C71 JUMPI POP DUP2 MLOAD ISZERO PUSH2 0x3C23 JUMPI POP SWAP1 JUMP JUMPDEST EXTCODESIZE ISZERO PUSH2 0x3C2C JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST DUP3 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x3C84 JUMPI POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE SWAP1 DUP2 SWAP1 PUSH2 0x3773 SWAP1 PUSH1 0x24 DUP4 ADD SWAP1 PUSH2 0x35D6 JUMP JUMPDEST DUP2 DUP2 MUL SWAP3 SWAP2 DUP2 ISZERO SWAP2 DUP5 DIV EQ OR ISZERO PUSH2 0x3CBB JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x3CE2 JUMPI ADD PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x1 DUP3 DUP2 SHR SWAP3 AND DUP1 ISZERO PUSH2 0x3D28 JUMPI JUMPDEST PUSH1 0x20 DUP4 LT EQ PUSH2 0x3D12 JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x3D07 JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD SWAP2 DUP3 PUSH1 0x0 DUP3 SLOAD SWAP3 PUSH2 0x3D46 DUP5 PUSH2 0x3CF8 JUMP JUMPDEST SWAP1 DUP2 DUP5 MSTORE PUSH1 0x1 SWAP5 DUP6 DUP2 AND SWAP1 DUP2 PUSH1 0x0 EQ PUSH2 0x3DB5 JUMPI POP PUSH1 0x1 EQ PUSH2 0x3D72 JUMPI JUMPDEST POP POP PUSH2 0x3D70 SWAP3 POP SUB DUP4 PUSH2 0x3475 JUMP JUMPDEST JUMP JUMPDEST SWAP1 SWAP4 SWAP2 POP PUSH1 0x0 MSTORE PUSH1 0x20 SWAP1 DUP2 PUSH1 0x0 KECCAK256 SWAP4 PUSH1 0x0 SWAP2 JUMPDEST DUP2 DUP4 LT PUSH2 0x3D9D JUMPI POP POP PUSH2 0x3D70 SWAP4 POP DUP3 ADD ADD CODESIZE DUP1 PUSH2 0x3D62 JUMP JUMPDEST DUP6 SLOAD DUP9 DUP5 ADD DUP6 ADD MSTORE SWAP5 DUP6 ADD SWAP5 DUP8 SWAP5 POP SWAP2 DUP4 ADD SWAP2 PUSH2 0x3D85 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x3D70 SWAP5 POP PUSH1 0x20 SWAP3 POP PUSH1 0xFF NOT AND DUP3 DUP5 ADD MSTORE ISZERO ISZERO PUSH1 0x5 SHL DUP3 ADD ADD CODESIZE DUP1 PUSH2 0x3D62 JUMP JUMPDEST ISZERO PUSH2 0x3DDF JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST DUP2 DUP2 LT PUSH2 0x3E43 JUMPI POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x3E38 JUMP JUMPDEST ISZERO PUSH2 0x3E56 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x556E617574686F72697A656420416363657373 PUSH1 0x68 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x3E98 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x1059191C995CDCC80C08141C9BDD9A591959 PUSH1 0x72 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x3ED9 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x149BDD5D1948111BD95CC8139BDD08115E1A5CDD PUSH1 0x62 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x3F1C JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536F7572636520616E642044657374696E6174696F6E20436861696E20496473 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x206172652073616D65 PUSH1 0xB8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x3F7A JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x44657374696E6174696F6E20436861696E204761746577617920416464726573 PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x1CC81A5CC81B9BDD081CD95D PUSH1 0xA2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST SWAP3 SWAP2 SWAP1 PUSH2 0x405E PUSH1 0x20 DUP1 SWAP3 PUSH1 0x40 DUP8 MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 DUP3 MLOAD AND PUSH1 0x40 DUP10 ADD MSTORE DUP3 DUP3 ADD MLOAD PUSH1 0x60 DUP10 ADD MSTORE PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x80 DUP10 ADD MSTORE PUSH1 0x60 DUP3 ADD MLOAD PUSH1 0xA0 DUP10 ADD MSTORE PUSH1 0x80 DUP3 ADD MLOAD PUSH1 0xC0 DUP10 ADD MSTORE DUP1 PUSH1 0xA0 DUP4 ADD MLOAD AND PUSH1 0xE0 DUP10 ADD MSTORE PUSH1 0xE0 DUP2 PUSH1 0xC0 DUP5 ADD MLOAD AND SWAP3 PUSH2 0x100 SWAP4 DUP5 DUP12 ADD MSTORE ADD MLOAD SWAP2 PUSH2 0x120 DUP10 ADD MSTORE DUP2 MLOAD AND PUSH2 0x140 DUP9 ADD MSTORE ADD MLOAD PUSH1 0x40 PUSH2 0x160 DUP8 ADD MSTORE PUSH2 0x180 DUP7 ADD SWAP1 PUSH2 0x35D6 JUMP JUMPDEST SWAP4 ADD MSTORE JUMP JUMPDEST PUSH1 0x97 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ DUP1 DUP1 PUSH2 0x40B4 JUMPI JUMPDEST ISZERO PUSH2 0x408A JUMPI POP CALLDATASIZE PUSH1 0x13 NOT ADD CALLDATALOAD PUSH1 0x60 SHR SWAP1 JUMP JUMPDEST PUSH1 0x14 CALLDATASIZE LT ISZERO SWAP1 DUP2 PUSH2 0x40AC JUMPI JUMPDEST POP ISZERO PUSH2 0x40A8 JUMPI CALLDATASIZE PUSH1 0x13 NOT ADD CALLDATALOAD PUSH1 0x60 SHR SWAP1 JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST SWAP1 POP CODESIZE PUSH2 0x4096 JUMP JUMPDEST POP PUSH1 0x14 CALLDATASIZE LT ISZERO PUSH2 0x4078 JUMP INVALID 0x2F DUP8 DUP9 GT PUSH31 0x7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D189AB7A9 0x24 0x4D CREATE DUP5 DUP2 0x22 ISZERO NUMBER ISZERO 0xAF PUSH18 0xFE140F3DB0FE014031783B0946B8C9D2E336 ADDMOD SWAP5 LOG1 EXTCODESIZE LOG1 LOG3 0x21 MOD PUSH8 0xC828492DB98DCA3E KECCAK256 PUSH23 0xCC3735A920A3CA505D382BBC65D7A28E3265B37A647492 SWAP16 CALLER PUSH6 0x21B332C1681B SWAP4 EXTCODEHASH PUSH13 0xB9F3376673440D862A7613A25E 0xCC PUSH20 0x8585A232AD50A301178F12B3BA8887D13E138B52 EXTCODECOPY TIMESTAMP PUSH10 0xC47689F6391F5C32D9C6 SWAP14 0x2A SELFBALANCE 0xEA PUSH8 0xB442974B53935D1 0xED 0xC7 REVERT PUSH5 0xEB21E047A8 CODECOPY OR SHL LOG4 SWAP9 SMOD KECCAK256 0x5C 0xE4 0xD3 SSTORE MULMOD 0x2E CREATE2 0xA8 LOG1 DUP16 JUMP 0xE8 SWAP2 EXTCODECOPY DELEGATECALL LOG2 ADD 0xFB 0xE2 DUP8 DUP3 JUMPDEST MULMOD JUMP SWAP4 0xC2 OR PUSH22 0xA264697066735822122090D6FE61FA80136E820181ED DUP9 0xDB DUP14 JUMP SWAP10 RETURNDATACOPY 0xEE 0xA8 0xE1 SWAP1 PUSH2 0xC528 XOR 0x23 PUSH19 0xF6DE83F464736F6C6343000811003300000000 ","sourceMap":"1359:16542:28:-:0;;;;;;;1332:4:11;1324:13;;6007::10;1359:16542:28;;;;;;;;;;;;;;6078:31:10;6074:139;;-1:-1:-1;1359:16542:28;;;;;;;;1324:13:11;1359:16542:28;;;;;;;;;;;;;;;;6074:139:10;1359:16542:28;;;;;;6007:13:10;1359:16542:28;6174:28:10;1359:16542:28;;;;;;6174:28:10;6074:139;;;1359:16542:28;-1:-1:-1;;;1359:16542:28;;;;;;;;;;;;;;;;;-1:-1:-1;;;1359:16542:28;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"abi_decode_address":{"entryPoint":13332,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_address_43374":{"entryPoint":13288,"id":null,"parameterSlots":0,"returnSlots":1},"abi_decode_address_43377":{"entryPoint":13310,"id":null,"parameterSlots":0,"returnSlots":1},"abi_decode_addresst_uint256t_uint256":{"entryPoint":13574,"id":null,"parameterSlots":1,"returnSlots":3},"abi_decode_available_length_string":{"entryPoint":13489,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_bytes_calldata":{"entryPoint":13702,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_string":{"entryPoint":13544,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_struct_MessagingPayload":{"entryPoint":13616,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_string":{"entryPoint":13782,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_struct_ICrossSyncMessagingData_uint256":{"entryPoint":16340,"id":null,"parameterSlots":3,"returnSlots":1},"array_allocation_size_string":{"entryPoint":13462,"id":null,"parameterSlots":1,"returnSlots":1},"checked_mul_uint256":{"entryPoint":15528,"id":null,"parameterSlots":2,"returnSlots":1},"clear_storage_range_bytes1":{"entryPoint":15928,"id":null,"parameterSlots":2,"returnSlots":0},"copy_array_from_storage_to_memory_string":{"entryPoint":15666,"id":null,"parameterSlots":1,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":13747,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":15608,"id":null,"parameterSlots":1,"returnSlots":1},"finalize_allocation":{"entryPoint":13429,"id":null,"parameterSlots":2,"returnSlots":0},"finalize_allocation_43396":{"entryPoint":13352,"id":null,"parameterSlots":1,"returnSlots":0},"finalize_allocation_65255":{"entryPoint":13402,"id":null,"parameterSlots":1,"returnSlots":0},"fun_checkOwner":{"entryPoint":14865,"id":647,"parameterSlots":0,"returnSlots":0},"fun_checkRole":{"entryPoint":13819,"id":252,"parameterSlots":1,"returnSlots":0},"fun_grantRole":{"entryPoint":14607,"id":443,"parameterSlots":1,"returnSlots":0},"fun_msgSender":{"entryPoint":16483,"id":5987,"parameterSlots":0,"returnSlots":1},"fun_revokeRole":{"entryPoint":14743,"id":474,"parameterSlots":2,"returnSlots":0},"fun_setImplementation":{"entryPoint":15231,"id":835,"parameterSlots":1,"returnSlots":0},"fun_transferOwnership":{"entryPoint":14964,"id":704,"parameterSlots":1,"returnSlots":0},"fun_verifyCallResultFromTarget":{"entryPoint":15375,"id":2018,"parameterSlots":4,"returnSlots":1},"memory_array_index_access_bytes":{"entryPoint":15569,"id":null,"parameterSlots":2,"returnSlots":1},"require_helper_stringliteral_2df9":{"entryPoint":16017,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_335d":{"entryPoint":16082,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_36e1":{"entryPoint":15037,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_3eb0":{"entryPoint":16243,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_4a6a":{"entryPoint":16149,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_52f1":{"entryPoint":15134,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_77b5":{"entryPoint":15951,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_d688":{"entryPoint":15832,"id":null,"parameterSlots":1,"returnSlots":0},"update_storage_value_offsett_bool_to_bool":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":0}},"generatedSources":[],"immutableReferences":{"1300":[{"length":32,"start":8837},{"length":32,"start":9078},{"length":32,"start":10351}]},"linkReferences":{},"object":"6080604052600436101561001b575b361561001957600080fd5b005b6000803560e01c80624c7591146131aa5780625e8eef146130f657806301ffc9a71461309f57806309b7d79114612fd55780631785f53c14612f24578063196c881e14612ef05780631fa5d2e714612eb0578063248a9ca314612e835780632b33cc8714612cdb5780632f2ff15d14612c7557806332495ce114612bdc57806336568abe14612b3f5780633659cfe61461284a57806336d8261a1461125557806338073f0c146114b25780633f4ba83a146127145780634429c25f146126cf5780634460bdd6146126a65780634902e4aa146126445780634f1ef2861461233657806352d1902d1461227257806356e3008b14612199578063572b6c051461216357806359b52ca4146121305780635c96a56114611d485780635c975abb14611d225780636050cafe14611c895780636b2c0f5514611b985780637048027514611ae6578063715018a614611a8957806375b238fc14611a605780637d0517d0146119e15780637faf251c146119ad5780638262c3171461198e57806382dc1ec4146118995780638456cb591461175757806384b0196e146114dc5780638898009d146114b25780638da5cb5b1461148957806391d148541461144057806398c339041461139b5780639ef42cbb1461136c578063a217fddf14611350578063acb7176b14611326578063b3292ff01461127f578063bd826ed714611255578063c50189b814611079578063ce1b815f14611050578063d10a0da31461100d578063d264a80314610f6a578063d547741f14610f29578063da74222814610e93578063e34381a114610c9c578063e511015814610bdb578063e56f2fe41461059a578063e63ab1e914610571578063f2fde38b146103e9578063f72c0d8b146103c0578063fa66358a146103545763fde278bc146102b9575061000e565b34610351576020366003190112610351576102d26133fe565b6102da614063565b600080516020614140833981519152835260fb6020526040832060018060a01b0380921660005260205260ff604060002054168015610336575b61031d90613e4f565b6101fe91166001600160601b0360a01b82541617905580f35b5061031d816033541682610348614063565b16149050610314565b80fd5b50346103515760203660031901126103515760043581526101f960205260409020805460ff60a082901c16916001600160a01b03909116906103bc9061039c90600101613d32565b6040519384938452151560208401526060604084015260608301906135d6565b0390f35b503461035157806003193601126103515760206040516000805160206140e08339815191528152f35b50346103515760208060031936011261056d576104046133fe565b61040c613a11565b610414613a11565b6001600160a01b039080821615610519578061043261043792613a74565b61390f565b61043f614063565b91818061044a614063565b1693169283036104bd576000805260fb8152604060002083600052815260ff60406000205416610478578380f35b6000805260fb81526040600020908360005252604060002060ff1981541690556104a0614063565b169060006000805160206141608339815191528180a43880808380f35b6084906040519062461bcd60e51b82526004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152fd5b60405162461bcd60e51b815260048101849052602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b5080fd5b503461035157806003193601126103515760206040516000805160206141208339815191528152f35b50346103515760c0366003190112610351576004356001600160401b03811161056d576105cb903690600401613586565b906024356001600160401b038111610bd7576105eb903690600401613586565b9092604435916001600160a01b03918284168403610bd257606435918383168303610bd257836084351660843503610bd25760a435958487168703610bd25788549060ff8260081c16159889809a610bc5575b8015610bae575b15610b52576106de6106e69261069d60ff8e6106f0978f600184198316178355610b41575b505460081c1661067981613dd8565b61068281613dd8565b6097805460ff60a01b1916905561069881613dd8565b613dd8565b6106ad6106a8614063565b613a74565b60ff8d5460081c16966106bf88613dd8565b6106c888613dd8565b6106d188613dd8565b600161012d5536916134b1565b9336916134b1565b9261069881613dd8565b8051906001600160401b038211610b2d57819061070f61016154613cf8565b601f8111610ade575b50602090601f8311600114610a54578a92610a49575b50508160011b916000199060031b1c191617610161555b8051906001600160401b038211610a3557819061076461016254613cf8565b601f81116109db575b50602090601f8311600114610951578992610946575b50508160011b916000199060031b1c191617610162555b8561015f5585610160556107b460ff875460081c16613dd8565b6107bc613a11565b8160843516156108f2576107d1608435613a74565b6107dc60843561390f565b600080516020614180833981519152600081815260fb6020527f339ab3ab2ddf8c30d545344e713975ca6ce592a0d5bc1375bb6cfaa6563006f180546000805160206141408339815191529182905590927fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9284929190849080a4600080516020614120833981519152600081815260408120600101805490859055929080a46001600160601b0360a01b92826101f7911684825416179055816101f891168382541617905560286101fd556101fe9216908254161790556108bb5780f35b61ff001981541681557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160018152a180f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b015190503880610783565b925061016289527f29af0939a5988989bfee913a9ad10b9335cb63ebc9fd2b69e5f877d0455ac9199089935b601f19841685106109c0576001945083601f198116106109a7575b505050811b016101625561079a565b015160001960f88460031b161c19169055388080610998565b8181015183556020948501946001909301929091019061097d565b610a25906101628b527f29af0939a5988989bfee913a9ad10b9335cb63ebc9fd2b69e5f877d0455ac919601f850160051c81019160208610610a2b575b601f0160051c0190613e38565b3861076d565b9091508190610a18565b634e487b7160e01b88526041600452602488fd5b01519050388061072e565b92506101618a527fafbb1c043347995df017ce3291b765e028ad5f784d2aa00c3f5e073760a4de8b908a935b601f1984168510610ac3576001945083601f19811610610aaa575b505050811b0161016155610745565b015160001960f88460031b161c19169055388080610a9b565b81810151835560209485019460019093019290910190610a80565b610b27906101618c527fafbb1c043347995df017ce3291b765e028ad5f784d2aa00c3f5e073760a4de8b601f850160051c81019160208610610a2b57601f0160051c0190613e38565b38610718565b634e487b7160e01b89526041600452602489fd5b61ffff19166101011781553861066a565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b1580156106455750600160ff841614610645565b50600160ff84161061063e565b600080fd5b8380fd5b503461035157602036600319011261035157610bf56133fe565b610bfd613a11565b6001600160a01b0390811660008181527f775ac87777436f29b0cd5453bf5db4da15d8938d0ef70de831d2edd17651cf6760205260409020546000805160206140e0833981519152929060ff1615610c53578380f35b8260005260fb6020526040600020826000526020526040600020600160ff19825416179055610c80614063565b16916000805160206140c0833981519152600080a43880808380f35b50346103515760209081600319360112610351576001600160401b03600435818111610e8f57610cd0903690600401613586565b9361012d946002865414610e4a57600286558201918181840312610e4657803590848211610e2a570190610100928383820312610e2a5760405193840184811086821117610e3257604052610d2483613414565b845281830135828501526040830135604085015260608401926060810135845260808101356080860152610d5a60a08201613414565b60a0860152610d6b60c08201613414565b60c086015260e081013590868211610e2e57610d88929101613530565b908160e085015260018060a01b0380835116935194511691015192823b15610e2a5791610de394939186809460405197889586948593631885c2f960e01b8552600485015260248401526060604484015260648301906135d6565b03925af18015610e1f57610dfa575b826001855580f35b8111610e0b57604052600138610df2565b634e487b7160e01b82526041600452602482fd5b6040513d85823e3d90fd5b8580fd5b8780fd5b634e487b7160e01b87526041600452602487fd5b8480fd5b60405162461bcd60e51b815260048101839052601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b8280fd5b503461035157602036600319011261035157610ead6133fe565b610eb5614063565b90600080516020614140833981519152835260fb6020526040832060018060a01b03809316845260205260ff6040842054168015610f0e575b610ef790613e4f565b166001600160601b0360a01b609754161760975580f35b50610ef7826033541683610f20614063565b16149050610eee565b503461035157604036600319011261035157610f67600435610f496133e8565b9080845260fb602052610f6260016040862001546135fb565b613997565b80f35b503461035157602036600319011261035157610f846133fe565b610f8c613a11565b6000805160206140e083398151915280835260fb602090815260408085206001600160a01b0394851680875292528420549192909160ff16610fcc578380f35b82845260fb602052604084208285526020526040842060ff198154169055610ff2614063565b16916000805160206141608339815191528480a43880808380f35b50346103515760203660031901126103515761103c600160406103bc9360043581526101f96020522001613d32565b6040519182916020835260208301906135d6565b50346103515780600319360112610351576097546040516001600160a01b039091168152602090f35b503461035157600319906080368301126103515760043560243592604435906001600160401b038211610bd757604090826004019236030112610e8f578383526101f96020948186526110d560ff604087205460a01c16613ed2565b6001600160a01b0392803584811690819003611251579161119d6111cb979694926111038a97951515613e91565b61110f46871415613f15565b8588526101fa8088526111298660408b2054161515613f73565b611131614063565b968661113b614063565b168a526101fb895260408a20468b52895260408a20818b52895260408a20549189528660408b2054169187604051996111738b613428565b1689528989015284604089015246606089015260808801523060a088015260c08701523690613530565b60e085015285528352604084205416604051808096819463181285cb60e21b83526064359060048401613fd4565b03915afa918215611244578192611215575b506127106111ee6101fd5484613ca8565b0482018092116112015750604051908152f35b634e487b7160e01b81526011600452602490fd5b9091508281813d831161123d575b61122d8183613475565b8101031261056d575190386111dd565b503d611223565b50604051903d90823e3d90fd5b8680fd5b50346103515780600319360112610351576101f7546040516001600160a01b039091168152602090f35b5034610351576020366003190112610351576112996133fe565b6112a1613a11565b60008051602061414083398151915280835260fb602090815260408085206001600160a01b0394851680875292528420549192909160ff16156112e2578380f35b82845260fb6020526040842082855260205260408420600160ff1982541617905561130b614063565b16916000805160206140c08339815191528480a43880808380f35b50346103515780600319360112610351576101fe546040516001600160a01b039091168152602090f35b5034610351578060031936011261035157602090604051908152f35b50346103515760203660031901126103515760206127106113926101fd54600435613ca8565b04604051908152f35b5034610351576040366003190112610351576113b56133e8565b6113bd614063565b600080516020614140833981519152835260fb602090815260408085206001600160a01b03938416865290915283205460ff168015611425575b61140090613e4f565b60043583526101fa6020526040832091166001600160601b0360a01b82541617905580f35b50611400816033541682611437614063565b161490506113f7565b50346103515760403660031901126103515760ff60406020926114616133e8565b600435825260fb85528282206001600160a01b03909116825284522054604051911615158152f35b50346103515780600319360112610351576033546040516001600160a01b039091168152602090f35b50346103515780600319360112610351576101f8546040516001600160a01b039091168152602090f35b503461035157806003193601126103515761015f54158061174c575b1561170f57604051816101618281549461151186613cf8565b9283835260019687811690816000146116ed5750600114611690575b5061153a92500383613475565b6040519080826101629182549261155084613cf8565b8084529388811690811561166e5750600114611611575b5061157492500383613475565b60405190602090818301938385106001600160401b03861117610e0b57928287936115cd8896886040528585526115bf60405198600f60f81b8a5260e0858b015260e08a01906135d6565b9088820360408a01526135d6565b924660608801523060808801528460a088015286840360c088015251928381520195925b8281106115fe5785870386f35b83518752958101959281019284016115f1565b845250908290867f29af0939a5988989bfee913a9ad10b9335cb63ebc9fd2b69e5f877d0455ac9195b828410611654575050509060206115749282010138611567565b60209294508054838589010152019101909186859361163a565b90506020925061157494915060ff191682840152151560051b82010138611567565b845250908290857fafbb1c043347995df017ce3291b765e028ad5f784d2aa00c3f5e073760a4de8b5b8284106116d35750505090602061153a928201013861152d565b6020929450805483858901015201910190918585936116b9565b90506020925061153a94915060ff191682840152151560051b8201013861152d565b60405162461bcd60e51b81526020600482015260156024820152741152540dcc4c8e88155b9a5b9a5d1a585b1a5e9959605a1b6044820152606490fd5b5061016054156114f8565b5034610351578060031936011261035157611770614063565b600080516020614120833981519152825260fb602090815260408084206001600160a01b039384168552825283205490919060ff168015611863575b8015611848575b6117bc90613e4f565b60975460ff8160a01c166118105760ff60a01b1916600160a01b176097557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2589190611805614063565b60405191168152a180f35b60405162461bcd60e51b815260048101849052601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606490fd5b506117bc81603354168261185a614063565b161490506117b3565b5061186c614063565b600080516020614140833981519152845260fb8352816040852091168452825260ff6040842054166117ac565b50346103515760208060031936011261056d576118b46133fe565b6118bc614063565b600080516020614140833981519152845260fb835260408085206001600160a01b039283168652845284205460ff168015611973575b6118fb90613e4f565b6000805160206141208339815191529283855260fb81528160408620931692838652815260ff60408620541615611930578480f35b83855260fb815260408520908386525260408420600160ff19825416179055611957614063565b16916000805160206140c08339815191528480a4388080808480f35b506118fb816033541682611985614063565b161490506118f2565b503461035157806003193601126103515760206101fd54604051908152f35b50346103515760203660031901126103515760209060043581526101fa8252604060018060a01b0391205416604051908152f35b503461035157602036600319011261035157611a3f6119fe614063565b600080516020614140833981519152835260fb602090815260408085206001600160a01b03938416865290915283205460ff16908115611a49575b50613e4f565b6004356101fd5580f35b60335481169150611a58614063565b161438611a39565b503461035157806003193601126103515760206040516000805160206141808339815191528152f35b5034610351578060031936011261035157611aa2613a11565b603380546001600160a01b0319811690915581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b50346103515760208060031936011261056d57611b016133fe565b611b09614063565b600080516020614140833981519152845260fb835260408085206001600160a01b039283168652845284205460ff168015611b7d575b611b4890613e4f565b6000805160206141808339815191529283855260fb81528160408620931692838652815260ff60408620541615611930578480f35b50611b48816033541682611b8f614063565b16149050611b3f565b50346103515760208060031936011261056d57611bb36133fe565b611bbb614063565b600080516020614140833981519152845260fb835260408085206001600160a01b039283168652845284205460ff168015611c6e575b611bfa90613e4f565b6000805160206141208339815191529283855260fb81528160408620931692838652815260ff604086205416611c2e578480f35b83855260fb81526040852090838652526040842060ff198154169055611c52614063565b16916000805160206141608339815191528480a4388080808480f35b50611bfa816033541682611c80614063565b16149050611bf1565b503461035157602036600319011261035157611ca36133fe565b611cab614063565b600080516020614140833981519152835260fb602090815260408085206001600160a01b03938416865290915283205460ff168015611d07575b611cee90613e4f565b6101f791166001600160601b0360a01b82541617905580f35b50611cee816033541682611d19614063565b16149050611ce5565b5034610351578060031936011261035157602060ff60975460a01c166040519015158152f35b5060a0366003190112610351576044356001600160401b03811161056d57611d74903690600401613530565b6084356001600160401b038111610e8f57611d93903690600401613586565b505060243582526101f9602052611db360ff604084205460a01c16613ed2565b8051611dc9906001600160a01b03161515613e91565b611dd7466004351415613f15565b60043582526101fa6020526040822054611dfb906001600160a01b03161515613f73565b612710611e0b6101fd5434613ca8565b048034106120d75734813403116120c357611e24614063565b6101fe80546001600160a01b0316801561207257858080868194828215612069575bf11561205e5760018060a01b039054166040519160018060a01b0316825282602083015260408201526064356060820152602435907f054aafb6abefe1f281ccb11a7597dc7e2f13418168020924f176af9492821cac608060043592a3611eab614063565b916001600160a01b03611ebc614063565b1684526101fb6020526040842046855260205260408420600435855260205260408420546101fa60205260018060a01b036040862054169060405194611f0186613428565b60018060a01b031685526020850152602435604085015246606085015260043560808501523060a085015260c084015260e083015260018060a01b03611f45614063565b1683526101fb60205260408320468452602052604083206004358452602052604083208054906001820180921161204a575560243583526101f96020526040808420549051630db17b6960e21b81529284928492909183916001600160a01b0316908290611fba906064359060048401613fd4565b03923403905af1801561203f57611fcf575080f35b3d8083833e611fde8183613475565b810190602081830312610e8f578051906001600160401b038211610bd7570181601f82011215610e8f5780519061201482613496565b926120226040519485613475565b82845260208383010111610bd757602080610f67940191016135b3565b6040513d84823e3d90fd5b634e487b7160e01b85526011600452602485fd5b6040513d86823e3d90fd5b506108fc611e46565b60405162461bcd60e51b8152602060048201526024808201527f43726f737353796e634665652041646472657373204973205a65726f204164646044820152637265737360e01b6064820152608490fd5b634e487b7160e01b83526011600452602483fd5b60405162461bcd60e51b815260206004820152602b60248201527f52656c61796572286d73672e76616c75652920466565206973206c657373207460448201526a68616e2073796e6346656560a81b6064820152608490fd5b50346103515760203660031901126103515760ff604060209260043581526101f98452205460a01c166040519015158152f35b503461035157602036600319011261035157602061217f6133fe565b6097546040516001600160a01b0392831691909216148152f35b5034610351578060208060031936011261226f576004356121f76121bb614063565b600080516020614140833981519152855260fb845260408086206001600160a01b039283168752855285205460ff16908115611a495750613e4f565b8083526101f99081835261221460ff604086205460a01c16613ed2565b83528152600160408320838155019061222d8254613cf8565b908161223857505050f35b81601f85931160011461224c575050505580f35b83835281832061226791601f0160051c810190600101613e38565b812091555580f35b50fd5b50346103515780600319360112610351577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031630036122cb5760206040516000805160206141008339815191528152f35b60405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608490fd5b5060403660031901126103515761234b6133fe565b6024356001600160401b038111610e8f5761236a9036906004016134e8565b6001600160a01b0391907f000000000000000000000000000000000000000000000000000000000000000083166123a330821415613abd565b6123c0600080516020614100833981519152918583541614613b1e565b6123c8614063565b936000805160206140e0833981519152865260209460fb8652816040882091168752855260ff6040872054168015612629575b61240490613e4f565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff161561243b57505050610f679150613b7f565b8316906040516352d1902d60e01b81528581600481865afa8791816125fa575b506124bc5760405162461bcd60e51b815260048101879052602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608490fd5b94929394036125a3576124ce84613b7f565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b8580a281511580159061259b575b612508575b50505080f35b6125899284806040519461251b8661345a565b602786527f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c85870152660819985a5b195960ca1b60408701528481519101845af4903d15612592573d61256d81613496565b9061257b6040519283613475565b81528681943d92013e613c0f565b50388080612502565b60609250613c0f565b5060016124fd565b60405162461bcd60e51b815260048101839052602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608490fd5b9091508681813d8311612622575b6126128183613475565b81010312610e2e5751903861245b565b503d612608565b5061240481603354168261263b614063565b161490506123fb565b50346103515760203660031901126103515761265e6133fe565b612666613a11565b60008051602061414083398151915280835260fb602090815260408085206001600160a01b0394851680875292528420549192909160ff16610fcc578380f35b503461035157806003193601126103515760206040516000805160206141408339815191528152f35b50346103515760ff60406020926126e536613506565b6001600160a01b0390921683526101fc8652838320908352855282822090825284522054604051911615158152f35b503461035157806003193601126103515761272d614063565b600080516020614120833981519152825260fb602090815260408084206001600160a01b039384168552825283205490919060ff168015612814575b80156127f9575b61277990613e4f565b60975460ff8160a01c16156127bd5760ff60a01b19166097557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa9190611805614063565b60405162461bcd60e51b815260048101849052601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606490fd5b5061277981603354168261280b614063565b16149050612770565b5061281d614063565b600080516020614140833981519152845260fb8352816040852091168452825260ff604084205416612769565b50346103515760208060031936011261056d576128656133fe565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811661289c30821415613abd565b6128b9600080516020614100833981519152918383541614613b1e565b6128c1614063565b6000805160206140e0833981519152865260fb8552826040872091168652845260ff6040862054168015612b24575b6128f990613e4f565b60405190848201928284106001600160401b03851117610e32578360405286835260ff7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd914354166000146129545750505050610f679150613b7f565b8492939416906040516352d1902d60e01b81528681600481865afa889181612af1575b506129d85760405162461bcd60e51b815260048101889052602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608490fd5b9593949503612a9a576129ea82613b7f565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b8680a284835115801590612a93575b612a27575b505050505080f35b80612a889560405195612a398761345a565b602787527f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c86880152660819985a5b195960ca1b60408801525190845af4903d15612592573d61256d81613496565b503880808084612a1f565b5080612a1a565b60405162461bcd60e51b815260048101849052602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608490fd5b9091508781813d8311612b1d575b612b098183613475565b81010312612b1957519038612977565b8880fd5b503d612aff565b506128f9826033541683612b36614063565b161490506128f0565b503461035157604036600319011261035157612b596133e8565b6001600160a01b0380612b6a614063565b1690821603612b7f57610f6790600435613997565b60405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608490fd5b503461035157602036600319011261035157612bf66133fe565b612bfe614063565b600080516020614140833981519152835260fb602090815260408085206001600160a01b03938416865290915283205460ff168015612c5a575b612c4190613e4f565b6101f891166001600160601b0360a01b82541617905580f35b50612c41816033541682612c6c614063565b16149050612c38565b503461035157604036600319011261035157600435612c926133e8565b81835260fb602052612caa60016040852001546135fb565b81835260fb602090815260408085206001600160a01b03938416808752925284205490919060ff16156112e2578380f35b5034610351576040366003190112610351576001600160401b03600435602435828111610bd757612d109036906004016134e8565b91612d19614063565b600080516020614140833981519152855260fb602090815260408087206001600160a01b0393841688528252862054909391612d5f9160ff16908115611a495750613e4f565b8085526101f990818452612d7c60ff604088205460a01c16613ed2565b85528252600191826040862001938051928311612e6f57612d9d8554613cf8565b601f8111612e41575b5081601f8411600114612de057509282939183928794612dd5575b50501b916000199060031b1c191617905580f35b015192503880612dc1565b919083601f1981168789528489209489905b88838310612e275750505010612e0e575b505050811b01905580f35b015160001960f88460031b161c19169055388080612e03565b858701518855909601959485019487935090810190612df2565b612e6990868852838820601f860160051c810191858710610a2b57601f0160051c0190613e38565b38612da6565b634e487b7160e01b86526041600452602486fd5b50346103515760203660031901126103515760016040602092600435815260fb8452200154604051908152f35b5034610351576040602091612ec436613506565b6001600160a01b0390921683526101fb8552838320908352845282822090825283522054604051908152f35b50346103515760203660031901126103515760209060043581526101f98252604060018060a01b0391205416604051908152f35b50346103515760208060031936011261056d57612f3f6133fe565b612f47614063565b600080516020614140833981519152845260fb835260408085206001600160a01b039283168652845284205460ff168015612fba575b612f8690613e4f565b6000805160206141808339815191529283855260fb81528160408620931692838652815260ff604086205416611c2e578480f35b50612f86816033541682612fcc614063565b16149050612f7d565b503461035157604036600319011261035157600435612ff26133e8565b612ffa614063565b90600080516020614140833981519152845260fb6020526040842060018060a01b03809316855260205260ff6040852054168015613084575b61303c90613e4f565b1690613049821515613e91565b8083526101f9908160205261306760ff604086205460a01c16613ed2565b83526020526040822080546001600160a01b031916909117905580f35b5061303c826033541683613096614063565b16149050613033565b50346103515760203660031901126103515760043563ffffffff60e01b811680910361056d57602090637965db0b60e01b81149081156130e5575b506040519015158152f35b6301ffc9a760e01b149050826130da565b5034610351576040366003190112610351576004356024358015158103610e8f57610f6791613166613126614063565b600080516020614140833981519152865260fb602090815260408088206001600160a01b03938416895290915286205460ff16908115611a495750613e4f565b8084526101f9908160205261318460ff604087205460a01c16613ed2565b845260205260408320805460ff60a01b191691151560a01b60ff60a01b16919091179055565b5034610351576060366003190112610351576004356131c76133e8565b6001600160401b03604435818111610e46576131e79036906004016134e8565b926131f0614063565b90600080516020614140833981519152865260209160fb8352604087209460018060a01b0395868093168952845260ff60408920541680156133cd575b61323690613e4f565b16613242811515613e91565b8187526101f99485845260ff604089205460a01c166133915760405191606083018381108782111761337d5760409081529083526001858401818152848301998a52948a52968552882091518254935160ff60a01b90151560a01b166001600160a81b0319909416911660ff60a01b191617919091178155830193518051928311612e6f576132d18554613cf8565b601f811161334f575b5081601f841160011461330857509282939183928794612dd55750501b916000199060031b1c191617905580f35b919083601f1981168789528489209489905b888383106133355750505010612e0e57505050811b01905580f35b85870151885590960195948501948793509081019061331a565b61337790868852838820601f860160051c810191858710610a2b57601f0160051c0190613e38565b386132da565b634e487b7160e01b8a52604160045260248afd5b60405162461bcd60e51b8152600481018590526014602482015273526f75746520416c72656164792045786973747360601b6044820152606490fd5b506132368260335416836133df614063565b1614905061322d565b602435906001600160a01b0382168203610bd257565b600435906001600160a01b0382168203610bd257565b35906001600160a01b0382168203610bd257565b61010081019081106001600160401b0382111761344457604052565b634e487b7160e01b600052604160045260246000fd5b606081019081106001600160401b0382111761344457604052565b90601f801991011681019081106001600160401b0382111761344457604052565b6001600160401b03811161344457601f01601f191660200190565b9291926134bd82613496565b916134cb6040519384613475565b829481845281830111610bd2578281602093846000960137010152565b9080601f83011215610bd257816020613503933591016134b1565b90565b6060906003190112610bd2576004356001600160a01b0381168103610bd257906024359060443590565b919091604081840312610bd25760408051916001600160401b039183018281118482101761344457604052829461356682613414565b84526020820135928311610bd25760209261358192016134e8565b910152565b9181601f84011215610bd2578235916001600160401b038311610bd25760208381860195010111610bd257565b60005b8381106135c65750506000910152565b81810151838201526020016135b6565b906020916135ef815180928185528580860191016135b3565b601f01601f1916010190565b613603614063565b9060009080825260209160fb83526040938482209060018060a01b031690818352845260ff858320541615613639575050505050565b8451926136458461345a565b602a845284840190863683378451156138fb57603082538451926001938410156138e7576078602187015360295b84811161387d575061383b57865192608084018481106001600160401b03821117612e6f57885260428452868401946060368737845115613827576030865384518210156138275790607860218601536041915b8183116137b957505050613777576137739386936137579361374860489461371f9a519a8b957f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008c88015251809260378801906135b3565b8401917001034b99036b4b9b9b4b733903937b6329607d1b6037840152518093868401906135b3565b01036028810187520185613475565b5192839262461bcd60e51b8452600484015260248301906135d6565b0390fd5b60648587519062461bcd60e51b825280600483015260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b909192600f81166010811015613813576f181899199a1a9b1b9c1cb0b131b232b360811b901a6137e98588613cd1565b5360041c9280156137ff576000190191906136c7565b634e487b7160e01b82526011600452602482fd5b634e487b7160e01b83526032600452602483fd5b634e487b7160e01b81526032600452602490fd5b60648688519062461bcd60e51b825280600483015260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b90600f811660108110156138d3576f181899199a1a9b1b9c1cb0b131b232b360811b901a6138ab8389613cd1565b5360041c9080156138bf5760001901613673565b634e487b7160e01b86526011600452602486fd5b634e487b7160e01b87526032600452602487fd5b634e487b7160e01b85526032600452602485fd5b634e487b7160e01b84526032600452602484fd5b6001600160a01b0390811660008181527fc88390e7e62175be0932452175b6a7222b6b094ab0ef984a5153c620345d8975602052604081205490929060ff161561395857505050565b82805260fb6020526040832082845260205260408320600160ff19825416179055613981614063565b16916000805160206140c08339815191528180a4565b600081815260fb602090815260408083206001600160a01b039586168085529252822054919390929160ff166139ce575b50505050565b6000805160206141608339815191529082855260fb602052604085208486526020526040852060ff198154169055613a04614063565b169380a4388080806139c8565b6033546001600160a01b0390811690613a28614063565b1603613a3057565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b603380546001600160a01b039283166001600160a01b0319821681179092559091167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3565b15613ac457565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b6064820152608490fd5b15613b2557565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b6064820152608490fd5b803b15613bb45760008051602061410083398151915280546001600160a01b0319166001600160a01b03909216919091179055565b60405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b91929015613c715750815115613c23575090565b3b15613c2c5790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b825190915015613c845750805190602001fd5b60405162461bcd60e51b8152602060048201529081906137739060248301906135d6565b81810292918115918404141715613cbb57565b634e487b7160e01b600052601160045260246000fd5b908151811015613ce2570160200190565b634e487b7160e01b600052603260045260246000fd5b90600182811c92168015613d28575b6020831014613d1257565b634e487b7160e01b600052602260045260246000fd5b91607f1691613d07565b9060405191826000825492613d4684613cf8565b908184526001948581169081600014613db55750600114613d72575b5050613d7092500383613475565b565b9093915060005260209081600020936000915b818310613d9d575050613d7093508201013880613d62565b85548884018501529485019487945091830191613d85565b915050613d7094506020925060ff191682840152151560051b8201013880613d62565b15613ddf57565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b818110613e43575050565b60008155600101613e38565b15613e5657565b60405162461bcd60e51b8152602060048201526013602482015272556e617574686f72697a65642041636365737360681b6044820152606490fd5b15613e9857565b60405162461bcd60e51b81526020600482015260126024820152711059191c995cdcc80c08141c9bdd9a59195960721b6044820152606490fd5b15613ed957565b60405162461bcd60e51b8152602060048201526014602482015273149bdd5d1948111bd95cc8139bdd08115e1a5cdd60621b6044820152606490fd5b15613f1c57565b60405162461bcd60e51b815260206004820152602960248201527f536f7572636520616e642044657374696e6174696f6e20436861696e20496473604482015268206172652073616d6560b81b6064820152608490fd5b15613f7a57565b60405162461bcd60e51b815260206004820152602c60248201527f44657374696e6174696f6e20436861696e20476174657761792041646472657360448201526b1cc81a5cc81b9bdd081cd95d60a21b6064820152608490fd5b92919061405e602080926040875260018060a01b0380825116604089015282820151606089015260408201516080890152606082015160a0890152608082015160c08901528060a08301511660e089015260e08160c0840151169261010093848b0152015191610120890152815116610140880152015160406101608701526101808601906135d6565b930152565b6097546001600160a01b0316331480806140b4575b1561408a575036601319013560601c90565b601436101590816140ac575b50156140a85736601319013560601c90565b3390565b905038614096565b50601436101561407856fe2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e3360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a7613a25ecc738585a232ad50a301178f12b3ba8887d13e138b523c4269c47689f6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171ba49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775a264697066735822122090d6fe61fa80136e820181ed88db8d56993eeea8e19061c528182372f6de83f464736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x1B JUMPI JUMPDEST CALLDATASIZE ISZERO PUSH2 0x19 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST STOP JUMPDEST PUSH1 0x0 DUP1 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH3 0x4C7591 EQ PUSH2 0x31AA JUMPI DUP1 PUSH3 0x5E8EEF EQ PUSH2 0x30F6 JUMPI DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x309F JUMPI DUP1 PUSH4 0x9B7D791 EQ PUSH2 0x2FD5 JUMPI DUP1 PUSH4 0x1785F53C EQ PUSH2 0x2F24 JUMPI DUP1 PUSH4 0x196C881E EQ PUSH2 0x2EF0 JUMPI DUP1 PUSH4 0x1FA5D2E7 EQ PUSH2 0x2EB0 JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x2E83 JUMPI DUP1 PUSH4 0x2B33CC87 EQ PUSH2 0x2CDB JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x2C75 JUMPI DUP1 PUSH4 0x32495CE1 EQ PUSH2 0x2BDC JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x2B3F JUMPI DUP1 PUSH4 0x3659CFE6 EQ PUSH2 0x284A JUMPI DUP1 PUSH4 0x36D8261A EQ PUSH2 0x1255 JUMPI DUP1 PUSH4 0x38073F0C EQ PUSH2 0x14B2 JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x2714 JUMPI DUP1 PUSH4 0x4429C25F EQ PUSH2 0x26CF JUMPI DUP1 PUSH4 0x4460BDD6 EQ PUSH2 0x26A6 JUMPI DUP1 PUSH4 0x4902E4AA EQ PUSH2 0x2644 JUMPI DUP1 PUSH4 0x4F1EF286 EQ PUSH2 0x2336 JUMPI DUP1 PUSH4 0x52D1902D EQ PUSH2 0x2272 JUMPI DUP1 PUSH4 0x56E3008B EQ PUSH2 0x2199 JUMPI DUP1 PUSH4 0x572B6C05 EQ PUSH2 0x2163 JUMPI DUP1 PUSH4 0x59B52CA4 EQ PUSH2 0x2130 JUMPI DUP1 PUSH4 0x5C96A561 EQ PUSH2 0x1D48 JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x1D22 JUMPI DUP1 PUSH4 0x6050CAFE EQ PUSH2 0x1C89 JUMPI DUP1 PUSH4 0x6B2C0F55 EQ PUSH2 0x1B98 JUMPI DUP1 PUSH4 0x70480275 EQ PUSH2 0x1AE6 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x1A89 JUMPI DUP1 PUSH4 0x75B238FC EQ PUSH2 0x1A60 JUMPI DUP1 PUSH4 0x7D0517D0 EQ PUSH2 0x19E1 JUMPI DUP1 PUSH4 0x7FAF251C EQ PUSH2 0x19AD JUMPI DUP1 PUSH4 0x8262C317 EQ PUSH2 0x198E JUMPI DUP1 PUSH4 0x82DC1EC4 EQ PUSH2 0x1899 JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x1757 JUMPI DUP1 PUSH4 0x84B0196E EQ PUSH2 0x14DC JUMPI DUP1 PUSH4 0x8898009D EQ PUSH2 0x14B2 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x1489 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x1440 JUMPI DUP1 PUSH4 0x98C33904 EQ PUSH2 0x139B JUMPI DUP1 PUSH4 0x9EF42CBB EQ PUSH2 0x136C JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x1350 JUMPI DUP1 PUSH4 0xACB7176B EQ PUSH2 0x1326 JUMPI DUP1 PUSH4 0xB3292FF0 EQ PUSH2 0x127F JUMPI DUP1 PUSH4 0xBD826ED7 EQ PUSH2 0x1255 JUMPI DUP1 PUSH4 0xC50189B8 EQ PUSH2 0x1079 JUMPI DUP1 PUSH4 0xCE1B815F EQ PUSH2 0x1050 JUMPI DUP1 PUSH4 0xD10A0DA3 EQ PUSH2 0x100D JUMPI DUP1 PUSH4 0xD264A803 EQ PUSH2 0xF6A JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0xF29 JUMPI DUP1 PUSH4 0xDA742228 EQ PUSH2 0xE93 JUMPI DUP1 PUSH4 0xE34381A1 EQ PUSH2 0xC9C JUMPI DUP1 PUSH4 0xE5110158 EQ PUSH2 0xBDB JUMPI DUP1 PUSH4 0xE56F2FE4 EQ PUSH2 0x59A JUMPI DUP1 PUSH4 0xE63AB1E9 EQ PUSH2 0x571 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x3E9 JUMPI DUP1 PUSH4 0xF72C0D8B EQ PUSH2 0x3C0 JUMPI DUP1 PUSH4 0xFA66358A EQ PUSH2 0x354 JUMPI PUSH4 0xFDE278BC EQ PUSH2 0x2B9 JUMPI POP PUSH2 0xE JUMP JUMPDEST CALLVALUE PUSH2 0x351 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x351 JUMPI PUSH2 0x2D2 PUSH2 0x33FE JUMP JUMPDEST PUSH2 0x2DA PUSH2 0x4063 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4140 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 MSTORE PUSH1 0xFB PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 SWAP3 AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND DUP1 ISZERO PUSH2 0x336 JUMPI JUMPDEST PUSH2 0x31D SWAP1 PUSH2 0x3E4F JUMP JUMPDEST PUSH2 0x1FE SWAP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL DUP3 SLOAD AND OR SWAP1 SSTORE DUP1 RETURN JUMPDEST POP PUSH2 0x31D DUP2 PUSH1 0x33 SLOAD AND DUP3 PUSH2 0x348 PUSH2 0x4063 JUMP JUMPDEST AND EQ SWAP1 POP PUSH2 0x314 JUMP JUMPDEST DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x351 JUMPI PUSH1 0x4 CALLDATALOAD DUP2 MSTORE PUSH2 0x1F9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF PUSH1 0xA0 DUP3 SWAP1 SHR AND SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH2 0x3BC SWAP1 PUSH2 0x39C SWAP1 PUSH1 0x1 ADD PUSH2 0x3D32 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP4 DUP5 SWAP4 DUP5 MSTORE ISZERO ISZERO PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x60 DUP4 ADD SWAP1 PUSH2 0x35D6 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x351 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x40E0 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x56D JUMPI PUSH2 0x404 PUSH2 0x33FE JUMP JUMPDEST PUSH2 0x40C PUSH2 0x3A11 JUMP JUMPDEST PUSH2 0x414 PUSH2 0x3A11 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP1 DUP3 AND ISZERO PUSH2 0x519 JUMPI DUP1 PUSH2 0x432 PUSH2 0x437 SWAP3 PUSH2 0x3A74 JUMP JUMPDEST PUSH2 0x390F JUMP JUMPDEST PUSH2 0x43F PUSH2 0x4063 JUMP JUMPDEST SWAP2 DUP2 DUP1 PUSH2 0x44A PUSH2 0x4063 JUMP JUMPDEST AND SWAP4 AND SWAP3 DUP4 SUB PUSH2 0x4BD JUMPI PUSH1 0x0 DUP1 MSTORE PUSH1 0xFB DUP2 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP4 PUSH1 0x0 MSTORE DUP2 MSTORE PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH2 0x478 JUMPI DUP4 DUP1 RETURN JUMPDEST PUSH1 0x0 DUP1 MSTORE PUSH1 0xFB DUP2 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 DUP4 PUSH1 0x0 MSTORE MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0xFF NOT DUP2 SLOAD AND SWAP1 SSTORE PUSH2 0x4A0 PUSH2 0x4063 JUMP JUMPDEST AND SWAP1 PUSH1 0x0 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4160 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 DUP1 LOG4 CODESIZE DUP1 DUP1 DUP4 DUP1 RETURN JUMPDEST PUSH1 0x84 SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x44 DUP3 ADD MSTORE PUSH15 0x103937B632B9903337B91039B2B633 PUSH1 0x89 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST POP DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x351 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4120 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI PUSH1 0xC0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x351 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x56D JUMPI PUSH2 0x5CB SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x3586 JUMP JUMPDEST SWAP1 PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0xBD7 JUMPI PUSH2 0x5EB SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x3586 JUMP JUMPDEST SWAP1 SWAP3 PUSH1 0x44 CALLDATALOAD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 DUP5 AND DUP5 SUB PUSH2 0xBD2 JUMPI PUSH1 0x64 CALLDATALOAD SWAP2 DUP4 DUP4 AND DUP4 SUB PUSH2 0xBD2 JUMPI DUP4 PUSH1 0x84 CALLDATALOAD AND PUSH1 0x84 CALLDATALOAD SUB PUSH2 0xBD2 JUMPI PUSH1 0xA4 CALLDATALOAD SWAP6 DUP5 DUP8 AND DUP8 SUB PUSH2 0xBD2 JUMPI DUP9 SLOAD SWAP1 PUSH1 0xFF DUP3 PUSH1 0x8 SHR AND ISZERO SWAP9 DUP10 DUP1 SWAP11 PUSH2 0xBC5 JUMPI JUMPDEST DUP1 ISZERO PUSH2 0xBAE JUMPI JUMPDEST ISZERO PUSH2 0xB52 JUMPI PUSH2 0x6DE PUSH2 0x6E6 SWAP3 PUSH2 0x69D PUSH1 0xFF DUP15 PUSH2 0x6F0 SWAP8 DUP16 PUSH1 0x1 DUP5 NOT DUP4 AND OR DUP4 SSTORE PUSH2 0xB41 JUMPI JUMPDEST POP SLOAD PUSH1 0x8 SHR AND PUSH2 0x679 DUP2 PUSH2 0x3DD8 JUMP JUMPDEST PUSH2 0x682 DUP2 PUSH2 0x3DD8 JUMP JUMPDEST PUSH1 0x97 DUP1 SLOAD PUSH1 0xFF PUSH1 0xA0 SHL NOT AND SWAP1 SSTORE PUSH2 0x698 DUP2 PUSH2 0x3DD8 JUMP JUMPDEST PUSH2 0x3DD8 JUMP JUMPDEST PUSH2 0x6AD PUSH2 0x6A8 PUSH2 0x4063 JUMP JUMPDEST PUSH2 0x3A74 JUMP JUMPDEST PUSH1 0xFF DUP14 SLOAD PUSH1 0x8 SHR AND SWAP7 PUSH2 0x6BF DUP9 PUSH2 0x3DD8 JUMP JUMPDEST PUSH2 0x6C8 DUP9 PUSH2 0x3DD8 JUMP JUMPDEST PUSH2 0x6D1 DUP9 PUSH2 0x3DD8 JUMP JUMPDEST PUSH1 0x1 PUSH2 0x12D SSTORE CALLDATASIZE SWAP2 PUSH2 0x34B1 JUMP JUMPDEST SWAP4 CALLDATASIZE SWAP2 PUSH2 0x34B1 JUMP JUMPDEST SWAP3 PUSH2 0x698 DUP2 PUSH2 0x3DD8 JUMP JUMPDEST DUP1 MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0xB2D JUMPI DUP2 SWAP1 PUSH2 0x70F PUSH2 0x161 SLOAD PUSH2 0x3CF8 JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0xADE JUMPI JUMPDEST POP PUSH1 0x20 SWAP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0xA54 JUMPI DUP11 SWAP3 PUSH2 0xA49 JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR PUSH2 0x161 SSTORE JUMPDEST DUP1 MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0xA35 JUMPI DUP2 SWAP1 PUSH2 0x764 PUSH2 0x162 SLOAD PUSH2 0x3CF8 JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0x9DB JUMPI JUMPDEST POP PUSH1 0x20 SWAP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0x951 JUMPI DUP10 SWAP3 PUSH2 0x946 JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR PUSH2 0x162 SSTORE JUMPDEST DUP6 PUSH2 0x15F SSTORE DUP6 PUSH2 0x160 SSTORE PUSH2 0x7B4 PUSH1 0xFF DUP8 SLOAD PUSH1 0x8 SHR AND PUSH2 0x3DD8 JUMP JUMPDEST PUSH2 0x7BC PUSH2 0x3A11 JUMP JUMPDEST DUP2 PUSH1 0x84 CALLDATALOAD AND ISZERO PUSH2 0x8F2 JUMPI PUSH2 0x7D1 PUSH1 0x84 CALLDATALOAD PUSH2 0x3A74 JUMP JUMPDEST PUSH2 0x7DC PUSH1 0x84 CALLDATALOAD PUSH2 0x390F JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4180 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xFB PUSH1 0x20 MSTORE PUSH32 0x339AB3AB2DDF8C30D545344E713975CA6CE592A0D5BC1375BB6CFAA6563006F1 DUP1 SLOAD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4140 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 DUP3 SWAP1 SSTORE SWAP1 SWAP3 PUSH32 0xBD79B86FFE0AB8E8776151514217CD7CACD52C909F66475C3AF44E129F0B00FF SWAP3 DUP5 SWAP3 SWAP2 SWAP1 DUP5 SWAP1 DUP1 LOG4 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4120 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 ADD DUP1 SLOAD SWAP1 DUP6 SWAP1 SSTORE SWAP3 SWAP1 DUP1 LOG4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL SWAP3 DUP3 PUSH2 0x1F7 SWAP2 AND DUP5 DUP3 SLOAD AND OR SWAP1 SSTORE DUP2 PUSH2 0x1F8 SWAP2 AND DUP4 DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x28 PUSH2 0x1FD SSTORE PUSH2 0x1FE SWAP3 AND SWAP1 DUP3 SLOAD AND OR SWAP1 SSTORE PUSH2 0x8BB JUMPI DUP1 RETURN JUMPDEST PUSH2 0xFF00 NOT DUP2 SLOAD AND DUP2 SSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE LOG1 DUP1 RETURN JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH2 0x783 JUMP JUMPDEST SWAP3 POP PUSH2 0x162 DUP10 MSTORE PUSH32 0x29AF0939A5988989BFEE913A9AD10B9335CB63EBC9FD2B69E5F877D0455AC919 SWAP1 DUP10 SWAP4 JUMPDEST PUSH1 0x1F NOT DUP5 AND DUP6 LT PUSH2 0x9C0 JUMPI PUSH1 0x1 SWAP5 POP DUP4 PUSH1 0x1F NOT DUP2 AND LT PUSH2 0x9A7 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH2 0x162 SSTORE PUSH2 0x79A JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH2 0x998 JUMP JUMPDEST DUP2 DUP2 ADD MLOAD DUP4 SSTORE PUSH1 0x20 SWAP5 DUP6 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP4 ADD SWAP3 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x97D JUMP JUMPDEST PUSH2 0xA25 SWAP1 PUSH2 0x162 DUP12 MSTORE PUSH32 0x29AF0939A5988989BFEE913A9AD10B9335CB63EBC9FD2B69E5F877D0455AC919 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD SWAP2 PUSH1 0x20 DUP7 LT PUSH2 0xA2B JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP1 PUSH2 0x3E38 JUMP JUMPDEST CODESIZE PUSH2 0x76D JUMP JUMPDEST SWAP1 SWAP2 POP DUP2 SWAP1 PUSH2 0xA18 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP9 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP9 REVERT JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH2 0x72E JUMP JUMPDEST SWAP3 POP PUSH2 0x161 DUP11 MSTORE PUSH32 0xAFBB1C043347995DF017CE3291B765E028AD5F784D2AA00C3F5E073760A4DE8B SWAP1 DUP11 SWAP4 JUMPDEST PUSH1 0x1F NOT DUP5 AND DUP6 LT PUSH2 0xAC3 JUMPI PUSH1 0x1 SWAP5 POP DUP4 PUSH1 0x1F NOT DUP2 AND LT PUSH2 0xAAA JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH2 0x161 SSTORE PUSH2 0x745 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH2 0xA9B JUMP JUMPDEST DUP2 DUP2 ADD MLOAD DUP4 SSTORE PUSH1 0x20 SWAP5 DUP6 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP4 ADD SWAP3 SWAP1 SWAP2 ADD SWAP1 PUSH2 0xA80 JUMP JUMPDEST PUSH2 0xB27 SWAP1 PUSH2 0x161 DUP13 MSTORE PUSH32 0xAFBB1C043347995DF017CE3291B765E028AD5F784D2AA00C3F5E073760A4DE8B PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD SWAP2 PUSH1 0x20 DUP7 LT PUSH2 0xA2B JUMPI PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP1 PUSH2 0x3E38 JUMP JUMPDEST CODESIZE PUSH2 0x718 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP10 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP10 REVERT JUMPDEST PUSH2 0xFFFF NOT AND PUSH2 0x101 OR DUP2 SSTORE CODESIZE PUSH2 0x66A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x191E481A5B9A5D1A585B1A5E9959 PUSH1 0x92 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST POP ADDRESS EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x645 JUMPI POP PUSH1 0x1 PUSH1 0xFF DUP5 AND EQ PUSH2 0x645 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0xFF DUP5 AND LT PUSH2 0x63E JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x351 JUMPI PUSH2 0xBF5 PUSH2 0x33FE JUMP JUMPDEST PUSH2 0xBFD PUSH2 0x3A11 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH32 0x775AC87777436F29B0CD5453BF5DB4DA15D8938D0EF70DE831D2EDD17651CF67 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x40E0 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP3 SWAP1 PUSH1 0xFF AND ISZERO PUSH2 0xC53 JUMPI DUP4 DUP1 RETURN JUMPDEST DUP3 PUSH1 0x0 MSTORE PUSH1 0xFB PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP3 PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x1 PUSH1 0xFF NOT DUP3 SLOAD AND OR SWAP1 SSTORE PUSH2 0xC80 PUSH2 0x4063 JUMP JUMPDEST AND SWAP2 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x40C0 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x0 DUP1 LOG4 CODESIZE DUP1 DUP1 DUP4 DUP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI PUSH1 0x20 SWAP1 DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x351 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0x4 CALLDATALOAD DUP2 DUP2 GT PUSH2 0xE8F JUMPI PUSH2 0xCD0 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x3586 JUMP JUMPDEST SWAP4 PUSH2 0x12D SWAP5 PUSH1 0x2 DUP7 SLOAD EQ PUSH2 0xE4A JUMPI PUSH1 0x2 DUP7 SSTORE DUP3 ADD SWAP2 DUP2 DUP2 DUP5 SUB SLT PUSH2 0xE46 JUMPI DUP1 CALLDATALOAD SWAP1 DUP5 DUP3 GT PUSH2 0xE2A JUMPI ADD SWAP1 PUSH2 0x100 SWAP3 DUP4 DUP4 DUP3 SUB SLT PUSH2 0xE2A JUMPI PUSH1 0x40 MLOAD SWAP4 DUP5 ADD DUP5 DUP2 LT DUP7 DUP3 GT OR PUSH2 0xE32 JUMPI PUSH1 0x40 MSTORE PUSH2 0xD24 DUP4 PUSH2 0x3414 JUMP JUMPDEST DUP5 MSTORE DUP2 DUP4 ADD CALLDATALOAD DUP3 DUP6 ADD MSTORE PUSH1 0x40 DUP4 ADD CALLDATALOAD PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x60 DUP5 ADD SWAP3 PUSH1 0x60 DUP2 ADD CALLDATALOAD DUP5 MSTORE PUSH1 0x80 DUP2 ADD CALLDATALOAD PUSH1 0x80 DUP7 ADD MSTORE PUSH2 0xD5A PUSH1 0xA0 DUP3 ADD PUSH2 0x3414 JUMP JUMPDEST PUSH1 0xA0 DUP7 ADD MSTORE PUSH2 0xD6B PUSH1 0xC0 DUP3 ADD PUSH2 0x3414 JUMP JUMPDEST PUSH1 0xC0 DUP7 ADD MSTORE PUSH1 0xE0 DUP2 ADD CALLDATALOAD SWAP1 DUP7 DUP3 GT PUSH2 0xE2E JUMPI PUSH2 0xD88 SWAP3 SWAP2 ADD PUSH2 0x3530 JUMP JUMPDEST SWAP1 DUP2 PUSH1 0xE0 DUP6 ADD MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 DUP4 MLOAD AND SWAP4 MLOAD SWAP5 MLOAD AND SWAP2 ADD MLOAD SWAP3 DUP3 EXTCODESIZE ISZERO PUSH2 0xE2A JUMPI SWAP2 PUSH2 0xDE3 SWAP5 SWAP4 SWAP2 DUP7 DUP1 SWAP5 PUSH1 0x40 MLOAD SWAP8 DUP9 SWAP6 DUP7 SWAP5 DUP6 SWAP4 PUSH4 0x1885C2F9 PUSH1 0xE0 SHL DUP6 MSTORE PUSH1 0x4 DUP6 ADD MSTORE PUSH1 0x24 DUP5 ADD MSTORE PUSH1 0x60 PUSH1 0x44 DUP5 ADD MSTORE PUSH1 0x64 DUP4 ADD SWAP1 PUSH2 0x35D6 JUMP JUMPDEST SUB SWAP3 GAS CALL DUP1 ISZERO PUSH2 0xE1F JUMPI PUSH2 0xDFA JUMPI JUMPDEST DUP3 PUSH1 0x1 DUP6 SSTORE DUP1 RETURN JUMPDEST DUP2 GT PUSH2 0xE0B JUMPI PUSH1 0x40 MSTORE PUSH1 0x1 CODESIZE PUSH2 0xDF2 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP3 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP3 REVERT JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP6 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP6 DUP1 REVERT JUMPDEST DUP8 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP8 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP8 REVERT JUMPDEST DUP5 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST DUP3 DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x351 JUMPI PUSH2 0xEAD PUSH2 0x33FE JUMP JUMPDEST PUSH2 0xEB5 PUSH2 0x4063 JUMP JUMPDEST SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4140 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 MSTORE PUSH1 0xFB PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 SWAP4 AND DUP5 MSTORE PUSH1 0x20 MSTORE PUSH1 0xFF PUSH1 0x40 DUP5 KECCAK256 SLOAD AND DUP1 ISZERO PUSH2 0xF0E JUMPI JUMPDEST PUSH2 0xEF7 SWAP1 PUSH2 0x3E4F JUMP JUMPDEST AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL PUSH1 0x97 SLOAD AND OR PUSH1 0x97 SSTORE DUP1 RETURN JUMPDEST POP PUSH2 0xEF7 DUP3 PUSH1 0x33 SLOAD AND DUP4 PUSH2 0xF20 PUSH2 0x4063 JUMP JUMPDEST AND EQ SWAP1 POP PUSH2 0xEEE JUMP JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x351 JUMPI PUSH2 0xF67 PUSH1 0x4 CALLDATALOAD PUSH2 0xF49 PUSH2 0x33E8 JUMP JUMPDEST SWAP1 DUP1 DUP5 MSTORE PUSH1 0xFB PUSH1 0x20 MSTORE PUSH2 0xF62 PUSH1 0x1 PUSH1 0x40 DUP7 KECCAK256 ADD SLOAD PUSH2 0x35FB JUMP JUMPDEST PUSH2 0x3997 JUMP JUMPDEST DUP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x351 JUMPI PUSH2 0xF84 PUSH2 0x33FE JUMP JUMPDEST PUSH2 0xF8C PUSH2 0x3A11 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x40E0 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 DUP4 MSTORE PUSH1 0xFB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP6 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND DUP1 DUP8 MSTORE SWAP3 MSTORE DUP5 KECCAK256 SLOAD SWAP2 SWAP3 SWAP1 SWAP2 PUSH1 0xFF AND PUSH2 0xFCC JUMPI DUP4 DUP1 RETURN JUMPDEST DUP3 DUP5 MSTORE PUSH1 0xFB PUSH1 0x20 MSTORE PUSH1 0x40 DUP5 KECCAK256 DUP3 DUP6 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP5 KECCAK256 PUSH1 0xFF NOT DUP2 SLOAD AND SWAP1 SSTORE PUSH2 0xFF2 PUSH2 0x4063 JUMP JUMPDEST AND SWAP2 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4160 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 DUP1 LOG4 CODESIZE DUP1 DUP1 DUP4 DUP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x351 JUMPI PUSH2 0x103C PUSH1 0x1 PUSH1 0x40 PUSH2 0x3BC SWAP4 PUSH1 0x4 CALLDATALOAD DUP2 MSTORE PUSH2 0x1F9 PUSH1 0x20 MSTORE KECCAK256 ADD PUSH2 0x3D32 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 PUSH1 0x20 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP1 PUSH2 0x35D6 JUMP JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x351 JUMPI PUSH1 0x97 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI PUSH1 0x3 NOT SWAP1 PUSH1 0x80 CALLDATASIZE DUP4 ADD SLT PUSH2 0x351 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x24 CALLDATALOAD SWAP3 PUSH1 0x44 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0xBD7 JUMPI PUSH1 0x40 SWAP1 DUP3 PUSH1 0x4 ADD SWAP3 CALLDATASIZE SUB ADD SLT PUSH2 0xE8F JUMPI DUP4 DUP4 MSTORE PUSH2 0x1F9 PUSH1 0x20 SWAP5 DUP2 DUP7 MSTORE PUSH2 0x10D5 PUSH1 0xFF PUSH1 0x40 DUP8 KECCAK256 SLOAD PUSH1 0xA0 SHR AND PUSH2 0x3ED2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP1 CALLDATALOAD DUP5 DUP2 AND SWAP1 DUP2 SWAP1 SUB PUSH2 0x1251 JUMPI SWAP2 PUSH2 0x119D PUSH2 0x11CB SWAP8 SWAP7 SWAP5 SWAP3 PUSH2 0x1103 DUP11 SWAP8 SWAP6 ISZERO ISZERO PUSH2 0x3E91 JUMP JUMPDEST PUSH2 0x110F CHAINID DUP8 EQ ISZERO PUSH2 0x3F15 JUMP JUMPDEST DUP6 DUP9 MSTORE PUSH2 0x1FA DUP1 DUP9 MSTORE PUSH2 0x1129 DUP7 PUSH1 0x40 DUP12 KECCAK256 SLOAD AND ISZERO ISZERO PUSH2 0x3F73 JUMP JUMPDEST PUSH2 0x1131 PUSH2 0x4063 JUMP JUMPDEST SWAP7 DUP7 PUSH2 0x113B PUSH2 0x4063 JUMP JUMPDEST AND DUP11 MSTORE PUSH2 0x1FB DUP10 MSTORE PUSH1 0x40 DUP11 KECCAK256 CHAINID DUP12 MSTORE DUP10 MSTORE PUSH1 0x40 DUP11 KECCAK256 DUP2 DUP12 MSTORE DUP10 MSTORE PUSH1 0x40 DUP11 KECCAK256 SLOAD SWAP2 DUP10 MSTORE DUP7 PUSH1 0x40 DUP12 KECCAK256 SLOAD AND SWAP2 DUP8 PUSH1 0x40 MLOAD SWAP10 PUSH2 0x1173 DUP12 PUSH2 0x3428 JUMP JUMPDEST AND DUP10 MSTORE DUP10 DUP10 ADD MSTORE DUP5 PUSH1 0x40 DUP10 ADD MSTORE CHAINID PUSH1 0x60 DUP10 ADD MSTORE PUSH1 0x80 DUP9 ADD MSTORE ADDRESS PUSH1 0xA0 DUP9 ADD MSTORE PUSH1 0xC0 DUP8 ADD MSTORE CALLDATASIZE SWAP1 PUSH2 0x3530 JUMP JUMPDEST PUSH1 0xE0 DUP6 ADD MSTORE DUP6 MSTORE DUP4 MSTORE PUSH1 0x40 DUP5 KECCAK256 SLOAD AND PUSH1 0x40 MLOAD DUP1 DUP1 SWAP7 DUP2 SWAP5 PUSH4 0x181285CB PUSH1 0xE2 SHL DUP4 MSTORE PUSH1 0x64 CALLDATALOAD SWAP1 PUSH1 0x4 DUP5 ADD PUSH2 0x3FD4 JUMP JUMPDEST SUB SWAP2 GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0x1244 JUMPI DUP2 SWAP3 PUSH2 0x1215 JUMPI JUMPDEST POP PUSH2 0x2710 PUSH2 0x11EE PUSH2 0x1FD SLOAD DUP5 PUSH2 0x3CA8 JUMP JUMPDEST DIV DUP3 ADD DUP1 SWAP3 GT PUSH2 0x1201 JUMPI POP PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST SWAP1 SWAP2 POP DUP3 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x123D JUMPI JUMPDEST PUSH2 0x122D DUP2 DUP4 PUSH2 0x3475 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x56D JUMPI MLOAD SWAP1 CODESIZE PUSH2 0x11DD JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x1223 JUMP JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 RETURNDATASIZE SWAP1 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP7 DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x351 JUMPI PUSH2 0x1F7 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x351 JUMPI PUSH2 0x1299 PUSH2 0x33FE JUMP JUMPDEST PUSH2 0x12A1 PUSH2 0x3A11 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4140 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 DUP4 MSTORE PUSH1 0xFB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP6 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND DUP1 DUP8 MSTORE SWAP3 MSTORE DUP5 KECCAK256 SLOAD SWAP2 SWAP3 SWAP1 SWAP2 PUSH1 0xFF AND ISZERO PUSH2 0x12E2 JUMPI DUP4 DUP1 RETURN JUMPDEST DUP3 DUP5 MSTORE PUSH1 0xFB PUSH1 0x20 MSTORE PUSH1 0x40 DUP5 KECCAK256 DUP3 DUP6 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0xFF NOT DUP3 SLOAD AND OR SWAP1 SSTORE PUSH2 0x130B PUSH2 0x4063 JUMP JUMPDEST AND SWAP2 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x40C0 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 DUP1 LOG4 CODESIZE DUP1 DUP1 DUP4 DUP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x351 JUMPI PUSH2 0x1FE SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x351 JUMPI PUSH1 0x20 SWAP1 PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x351 JUMPI PUSH1 0x20 PUSH2 0x2710 PUSH2 0x1392 PUSH2 0x1FD SLOAD PUSH1 0x4 CALLDATALOAD PUSH2 0x3CA8 JUMP JUMPDEST DIV PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x351 JUMPI PUSH2 0x13B5 PUSH2 0x33E8 JUMP JUMPDEST PUSH2 0x13BD PUSH2 0x4063 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4140 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 MSTORE PUSH1 0xFB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP6 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP7 MSTORE SWAP1 SWAP2 MSTORE DUP4 KECCAK256 SLOAD PUSH1 0xFF AND DUP1 ISZERO PUSH2 0x1425 JUMPI JUMPDEST PUSH2 0x1400 SWAP1 PUSH2 0x3E4F JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD DUP4 MSTORE PUSH2 0x1FA PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 SWAP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL DUP3 SLOAD AND OR SWAP1 SSTORE DUP1 RETURN JUMPDEST POP PUSH2 0x1400 DUP2 PUSH1 0x33 SLOAD AND DUP3 PUSH2 0x1437 PUSH2 0x4063 JUMP JUMPDEST AND EQ SWAP1 POP PUSH2 0x13F7 JUMP JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x351 JUMPI PUSH1 0xFF PUSH1 0x40 PUSH1 0x20 SWAP3 PUSH2 0x1461 PUSH2 0x33E8 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD DUP3 MSTORE PUSH1 0xFB DUP6 MSTORE DUP3 DUP3 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP3 MSTORE DUP5 MSTORE KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP2 AND ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x351 JUMPI PUSH1 0x33 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x351 JUMPI PUSH2 0x1F8 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x351 JUMPI PUSH2 0x15F SLOAD ISZERO DUP1 PUSH2 0x174C JUMPI JUMPDEST ISZERO PUSH2 0x170F JUMPI PUSH1 0x40 MLOAD DUP2 PUSH2 0x161 DUP3 DUP2 SLOAD SWAP5 PUSH2 0x1511 DUP7 PUSH2 0x3CF8 JUMP JUMPDEST SWAP3 DUP4 DUP4 MSTORE PUSH1 0x1 SWAP7 DUP8 DUP2 AND SWAP1 DUP2 PUSH1 0x0 EQ PUSH2 0x16ED JUMPI POP PUSH1 0x1 EQ PUSH2 0x1690 JUMPI JUMPDEST POP PUSH2 0x153A SWAP3 POP SUB DUP4 PUSH2 0x3475 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 PUSH2 0x162 SWAP2 DUP3 SLOAD SWAP3 PUSH2 0x1550 DUP5 PUSH2 0x3CF8 JUMP JUMPDEST DUP1 DUP5 MSTORE SWAP4 DUP9 DUP2 AND SWAP1 DUP2 ISZERO PUSH2 0x166E JUMPI POP PUSH1 0x1 EQ PUSH2 0x1611 JUMPI JUMPDEST POP PUSH2 0x1574 SWAP3 POP SUB DUP4 PUSH2 0x3475 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0x20 SWAP1 DUP2 DUP4 ADD SWAP4 DUP4 DUP6 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP7 GT OR PUSH2 0xE0B JUMPI SWAP3 DUP3 DUP8 SWAP4 PUSH2 0x15CD DUP9 SWAP7 DUP9 PUSH1 0x40 MSTORE DUP6 DUP6 MSTORE PUSH2 0x15BF PUSH1 0x40 MLOAD SWAP9 PUSH1 0xF PUSH1 0xF8 SHL DUP11 MSTORE PUSH1 0xE0 DUP6 DUP12 ADD MSTORE PUSH1 0xE0 DUP11 ADD SWAP1 PUSH2 0x35D6 JUMP JUMPDEST SWAP1 DUP9 DUP3 SUB PUSH1 0x40 DUP11 ADD MSTORE PUSH2 0x35D6 JUMP JUMPDEST SWAP3 CHAINID PUSH1 0x60 DUP9 ADD MSTORE ADDRESS PUSH1 0x80 DUP9 ADD MSTORE DUP5 PUSH1 0xA0 DUP9 ADD MSTORE DUP7 DUP5 SUB PUSH1 0xC0 DUP9 ADD MSTORE MLOAD SWAP3 DUP4 DUP2 MSTORE ADD SWAP6 SWAP3 JUMPDEST DUP3 DUP2 LT PUSH2 0x15FE JUMPI DUP6 DUP8 SUB DUP7 RETURN JUMPDEST DUP4 MLOAD DUP8 MSTORE SWAP6 DUP2 ADD SWAP6 SWAP3 DUP2 ADD SWAP3 DUP5 ADD PUSH2 0x15F1 JUMP JUMPDEST DUP5 MSTORE POP SWAP1 DUP3 SWAP1 DUP7 PUSH32 0x29AF0939A5988989BFEE913A9AD10B9335CB63EBC9FD2B69E5F877D0455AC919 JUMPDEST DUP3 DUP5 LT PUSH2 0x1654 JUMPI POP POP POP SWAP1 PUSH1 0x20 PUSH2 0x1574 SWAP3 DUP3 ADD ADD CODESIZE PUSH2 0x1567 JUMP JUMPDEST PUSH1 0x20 SWAP3 SWAP5 POP DUP1 SLOAD DUP4 DUP6 DUP10 ADD ADD MSTORE ADD SWAP2 ADD SWAP1 SWAP2 DUP7 DUP6 SWAP4 PUSH2 0x163A JUMP JUMPDEST SWAP1 POP PUSH1 0x20 SWAP3 POP PUSH2 0x1574 SWAP5 SWAP2 POP PUSH1 0xFF NOT AND DUP3 DUP5 ADD MSTORE ISZERO ISZERO PUSH1 0x5 SHL DUP3 ADD ADD CODESIZE PUSH2 0x1567 JUMP JUMPDEST DUP5 MSTORE POP SWAP1 DUP3 SWAP1 DUP6 PUSH32 0xAFBB1C043347995DF017CE3291B765E028AD5F784D2AA00C3F5E073760A4DE8B JUMPDEST DUP3 DUP5 LT PUSH2 0x16D3 JUMPI POP POP POP SWAP1 PUSH1 0x20 PUSH2 0x153A SWAP3 DUP3 ADD ADD CODESIZE PUSH2 0x152D JUMP JUMPDEST PUSH1 0x20 SWAP3 SWAP5 POP DUP1 SLOAD DUP4 DUP6 DUP10 ADD ADD MSTORE ADD SWAP2 ADD SWAP1 SWAP2 DUP6 DUP6 SWAP4 PUSH2 0x16B9 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 SWAP3 POP PUSH2 0x153A SWAP5 SWAP2 POP PUSH1 0xFF NOT AND DUP3 DUP5 ADD MSTORE ISZERO ISZERO PUSH1 0x5 SHL DUP3 ADD ADD CODESIZE PUSH2 0x152D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x1152540DCC4C8E88155B9A5B9A5D1A585B1A5E9959 PUSH1 0x5A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST POP PUSH2 0x160 SLOAD ISZERO PUSH2 0x14F8 JUMP JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x351 JUMPI PUSH2 0x1770 PUSH2 0x4063 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4120 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP3 MSTORE PUSH1 0xFB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP6 MSTORE DUP3 MSTORE DUP4 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 PUSH1 0xFF AND DUP1 ISZERO PUSH2 0x1863 JUMPI JUMPDEST DUP1 ISZERO PUSH2 0x1848 JUMPI JUMPDEST PUSH2 0x17BC SWAP1 PUSH2 0x3E4F JUMP JUMPDEST PUSH1 0x97 SLOAD PUSH1 0xFF DUP2 PUSH1 0xA0 SHR AND PUSH2 0x1810 JUMPI PUSH1 0xFF PUSH1 0xA0 SHL NOT AND PUSH1 0x1 PUSH1 0xA0 SHL OR PUSH1 0x97 SSTORE PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 SWAP2 SWAP1 PUSH2 0x1805 PUSH2 0x4063 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 AND DUP2 MSTORE LOG1 DUP1 RETURN JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x14185D5CD8589B194E881C185D5CD959 PUSH1 0x82 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST POP PUSH2 0x17BC DUP2 PUSH1 0x33 SLOAD AND DUP3 PUSH2 0x185A PUSH2 0x4063 JUMP JUMPDEST AND EQ SWAP1 POP PUSH2 0x17B3 JUMP JUMPDEST POP PUSH2 0x186C PUSH2 0x4063 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4140 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 MSTORE PUSH1 0xFB DUP4 MSTORE DUP2 PUSH1 0x40 DUP6 KECCAK256 SWAP2 AND DUP5 MSTORE DUP3 MSTORE PUSH1 0xFF PUSH1 0x40 DUP5 KECCAK256 SLOAD AND PUSH2 0x17AC JUMP JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x56D JUMPI PUSH2 0x18B4 PUSH2 0x33FE JUMP JUMPDEST PUSH2 0x18BC PUSH2 0x4063 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4140 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 MSTORE PUSH1 0xFB DUP4 MSTORE PUSH1 0x40 DUP1 DUP6 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND DUP7 MSTORE DUP5 MSTORE DUP5 KECCAK256 SLOAD PUSH1 0xFF AND DUP1 ISZERO PUSH2 0x1973 JUMPI JUMPDEST PUSH2 0x18FB SWAP1 PUSH2 0x3E4F JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4120 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP3 DUP4 DUP6 MSTORE PUSH1 0xFB DUP2 MSTORE DUP2 PUSH1 0x40 DUP7 KECCAK256 SWAP4 AND SWAP3 DUP4 DUP7 MSTORE DUP2 MSTORE PUSH1 0xFF PUSH1 0x40 DUP7 KECCAK256 SLOAD AND ISZERO PUSH2 0x1930 JUMPI DUP5 DUP1 RETURN JUMPDEST DUP4 DUP6 MSTORE PUSH1 0xFB DUP2 MSTORE PUSH1 0x40 DUP6 KECCAK256 SWAP1 DUP4 DUP7 MSTORE MSTORE PUSH1 0x40 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0xFF NOT DUP3 SLOAD AND OR SWAP1 SSTORE PUSH2 0x1957 PUSH2 0x4063 JUMP JUMPDEST AND SWAP2 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x40C0 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 DUP1 LOG4 CODESIZE DUP1 DUP1 DUP1 DUP5 DUP1 RETURN JUMPDEST POP PUSH2 0x18FB DUP2 PUSH1 0x33 SLOAD AND DUP3 PUSH2 0x1985 PUSH2 0x4063 JUMP JUMPDEST AND EQ SWAP1 POP PUSH2 0x18F2 JUMP JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x351 JUMPI PUSH1 0x20 PUSH2 0x1FD SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x351 JUMPI PUSH1 0x20 SWAP1 PUSH1 0x4 CALLDATALOAD DUP2 MSTORE PUSH2 0x1FA DUP3 MSTORE PUSH1 0x40 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 KECCAK256 SLOAD AND PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x351 JUMPI PUSH2 0x1A3F PUSH2 0x19FE PUSH2 0x4063 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4140 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 MSTORE PUSH1 0xFB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP6 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP7 MSTORE SWAP1 SWAP2 MSTORE DUP4 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 DUP2 ISZERO PUSH2 0x1A49 JUMPI JUMPDEST POP PUSH2 0x3E4F JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH2 0x1FD SSTORE DUP1 RETURN JUMPDEST PUSH1 0x33 SLOAD DUP2 AND SWAP2 POP PUSH2 0x1A58 PUSH2 0x4063 JUMP JUMPDEST AND EQ CODESIZE PUSH2 0x1A39 JUMP JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x351 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4180 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x351 JUMPI PUSH2 0x1AA2 PUSH2 0x3A11 JUMP JUMPDEST PUSH1 0x33 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND SWAP1 SWAP2 SSTORE DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 DUP3 DUP1 LOG3 DUP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x56D JUMPI PUSH2 0x1B01 PUSH2 0x33FE JUMP JUMPDEST PUSH2 0x1B09 PUSH2 0x4063 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4140 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 MSTORE PUSH1 0xFB DUP4 MSTORE PUSH1 0x40 DUP1 DUP6 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND DUP7 MSTORE DUP5 MSTORE DUP5 KECCAK256 SLOAD PUSH1 0xFF AND DUP1 ISZERO PUSH2 0x1B7D JUMPI JUMPDEST PUSH2 0x1B48 SWAP1 PUSH2 0x3E4F JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4180 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP3 DUP4 DUP6 MSTORE PUSH1 0xFB DUP2 MSTORE DUP2 PUSH1 0x40 DUP7 KECCAK256 SWAP4 AND SWAP3 DUP4 DUP7 MSTORE DUP2 MSTORE PUSH1 0xFF PUSH1 0x40 DUP7 KECCAK256 SLOAD AND ISZERO PUSH2 0x1930 JUMPI DUP5 DUP1 RETURN JUMPDEST POP PUSH2 0x1B48 DUP2 PUSH1 0x33 SLOAD AND DUP3 PUSH2 0x1B8F PUSH2 0x4063 JUMP JUMPDEST AND EQ SWAP1 POP PUSH2 0x1B3F JUMP JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x56D JUMPI PUSH2 0x1BB3 PUSH2 0x33FE JUMP JUMPDEST PUSH2 0x1BBB PUSH2 0x4063 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4140 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 MSTORE PUSH1 0xFB DUP4 MSTORE PUSH1 0x40 DUP1 DUP6 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND DUP7 MSTORE DUP5 MSTORE DUP5 KECCAK256 SLOAD PUSH1 0xFF AND DUP1 ISZERO PUSH2 0x1C6E JUMPI JUMPDEST PUSH2 0x1BFA SWAP1 PUSH2 0x3E4F JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4120 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP3 DUP4 DUP6 MSTORE PUSH1 0xFB DUP2 MSTORE DUP2 PUSH1 0x40 DUP7 KECCAK256 SWAP4 AND SWAP3 DUP4 DUP7 MSTORE DUP2 MSTORE PUSH1 0xFF PUSH1 0x40 DUP7 KECCAK256 SLOAD AND PUSH2 0x1C2E JUMPI DUP5 DUP1 RETURN JUMPDEST DUP4 DUP6 MSTORE PUSH1 0xFB DUP2 MSTORE PUSH1 0x40 DUP6 KECCAK256 SWAP1 DUP4 DUP7 MSTORE MSTORE PUSH1 0x40 DUP5 KECCAK256 PUSH1 0xFF NOT DUP2 SLOAD AND SWAP1 SSTORE PUSH2 0x1C52 PUSH2 0x4063 JUMP JUMPDEST AND SWAP2 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4160 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 DUP1 LOG4 CODESIZE DUP1 DUP1 DUP1 DUP5 DUP1 RETURN JUMPDEST POP PUSH2 0x1BFA DUP2 PUSH1 0x33 SLOAD AND DUP3 PUSH2 0x1C80 PUSH2 0x4063 JUMP JUMPDEST AND EQ SWAP1 POP PUSH2 0x1BF1 JUMP JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x351 JUMPI PUSH2 0x1CA3 PUSH2 0x33FE JUMP JUMPDEST PUSH2 0x1CAB PUSH2 0x4063 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4140 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 MSTORE PUSH1 0xFB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP6 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP7 MSTORE SWAP1 SWAP2 MSTORE DUP4 KECCAK256 SLOAD PUSH1 0xFF AND DUP1 ISZERO PUSH2 0x1D07 JUMPI JUMPDEST PUSH2 0x1CEE SWAP1 PUSH2 0x3E4F JUMP JUMPDEST PUSH2 0x1F7 SWAP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL DUP3 SLOAD AND OR SWAP1 SSTORE DUP1 RETURN JUMPDEST POP PUSH2 0x1CEE DUP2 PUSH1 0x33 SLOAD AND DUP3 PUSH2 0x1D19 PUSH2 0x4063 JUMP JUMPDEST AND EQ SWAP1 POP PUSH2 0x1CE5 JUMP JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x351 JUMPI PUSH1 0x20 PUSH1 0xFF PUSH1 0x97 SLOAD PUSH1 0xA0 SHR AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST POP PUSH1 0xA0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x351 JUMPI PUSH1 0x44 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x56D JUMPI PUSH2 0x1D74 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x3530 JUMP JUMPDEST PUSH1 0x84 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0xE8F JUMPI PUSH2 0x1D93 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x3586 JUMP JUMPDEST POP POP PUSH1 0x24 CALLDATALOAD DUP3 MSTORE PUSH2 0x1F9 PUSH1 0x20 MSTORE PUSH2 0x1DB3 PUSH1 0xFF PUSH1 0x40 DUP5 KECCAK256 SLOAD PUSH1 0xA0 SHR AND PUSH2 0x3ED2 JUMP JUMPDEST DUP1 MLOAD PUSH2 0x1DC9 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO ISZERO PUSH2 0x3E91 JUMP JUMPDEST PUSH2 0x1DD7 CHAINID PUSH1 0x4 CALLDATALOAD EQ ISZERO PUSH2 0x3F15 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD DUP3 MSTORE PUSH2 0x1FA PUSH1 0x20 MSTORE PUSH1 0x40 DUP3 KECCAK256 SLOAD PUSH2 0x1DFB SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO ISZERO PUSH2 0x3F73 JUMP JUMPDEST PUSH2 0x2710 PUSH2 0x1E0B PUSH2 0x1FD SLOAD CALLVALUE PUSH2 0x3CA8 JUMP JUMPDEST DIV DUP1 CALLVALUE LT PUSH2 0x20D7 JUMPI CALLVALUE DUP2 CALLVALUE SUB GT PUSH2 0x20C3 JUMPI PUSH2 0x1E24 PUSH2 0x4063 JUMP JUMPDEST PUSH2 0x1FE DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 ISZERO PUSH2 0x2072 JUMPI DUP6 DUP1 DUP1 DUP7 DUP2 SWAP5 DUP3 DUP3 ISZERO PUSH2 0x2069 JUMPI JUMPDEST CALL ISZERO PUSH2 0x205E JUMPI PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP1 SLOAD AND PUSH1 0x40 MLOAD SWAP2 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND DUP3 MSTORE DUP3 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x64 CALLDATALOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x24 CALLDATALOAD SWAP1 PUSH32 0x54AAFB6ABEFE1F281CCB11A7597DC7E2F13418168020924F176AF9492821CAC PUSH1 0x80 PUSH1 0x4 CALLDATALOAD SWAP3 LOG3 PUSH2 0x1EAB PUSH2 0x4063 JUMP JUMPDEST SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x1EBC PUSH2 0x4063 JUMP JUMPDEST AND DUP5 MSTORE PUSH2 0x1FB PUSH1 0x20 MSTORE PUSH1 0x40 DUP5 KECCAK256 CHAINID DUP6 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP5 KECCAK256 PUSH1 0x4 CALLDATALOAD DUP6 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP5 KECCAK256 SLOAD PUSH2 0x1FA PUSH1 0x20 MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x40 DUP7 KECCAK256 SLOAD AND SWAP1 PUSH1 0x40 MLOAD SWAP5 PUSH2 0x1F01 DUP7 PUSH2 0x3428 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND DUP6 MSTORE PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0x24 CALLDATALOAD PUSH1 0x40 DUP6 ADD MSTORE CHAINID PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x4 CALLDATALOAD PUSH1 0x80 DUP6 ADD MSTORE ADDRESS PUSH1 0xA0 DUP6 ADD MSTORE PUSH1 0xC0 DUP5 ADD MSTORE PUSH1 0xE0 DUP4 ADD MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH2 0x1F45 PUSH2 0x4063 JUMP JUMPDEST AND DUP4 MSTORE PUSH2 0x1FB PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 CHAINID DUP5 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 PUSH1 0x4 CALLDATALOAD DUP5 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 DUP1 SLOAD SWAP1 PUSH1 0x1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x204A JUMPI SSTORE PUSH1 0x24 CALLDATALOAD DUP4 MSTORE PUSH2 0x1F9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SLOAD SWAP1 MLOAD PUSH4 0xDB17B69 PUSH1 0xE2 SHL DUP2 MSTORE SWAP3 DUP5 SWAP3 DUP5 SWAP3 SWAP1 SWAP2 DUP4 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP3 SWAP1 PUSH2 0x1FBA SWAP1 PUSH1 0x64 CALLDATALOAD SWAP1 PUSH1 0x4 DUP5 ADD PUSH2 0x3FD4 JUMP JUMPDEST SUB SWAP3 CALLVALUE SUB SWAP1 GAS CALL DUP1 ISZERO PUSH2 0x203F JUMPI PUSH2 0x1FCF JUMPI POP DUP1 RETURN JUMPDEST RETURNDATASIZE DUP1 DUP4 DUP4 RETURNDATACOPY PUSH2 0x1FDE DUP2 DUP4 PUSH2 0x3475 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH1 0x20 DUP2 DUP4 SUB SLT PUSH2 0xE8F JUMPI DUP1 MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0xBD7 JUMPI ADD DUP2 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0xE8F JUMPI DUP1 MLOAD SWAP1 PUSH2 0x2014 DUP3 PUSH2 0x3496 JUMP JUMPDEST SWAP3 PUSH2 0x2022 PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0x3475 JUMP JUMPDEST DUP3 DUP5 MSTORE PUSH1 0x20 DUP4 DUP4 ADD ADD GT PUSH2 0xBD7 JUMPI PUSH1 0x20 DUP1 PUSH2 0xF67 SWAP5 ADD SWAP2 ADD PUSH2 0x35B3 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP5 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP6 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 DUP6 REVERT JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP7 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST POP PUSH2 0x8FC PUSH2 0x1E46 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x43726F737353796E634665652041646472657373204973205A65726F20416464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 DUP4 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x52656C61796572286D73672E76616C75652920466565206973206C6573732074 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x68616E2073796E63466565 PUSH1 0xA8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x351 JUMPI PUSH1 0xFF PUSH1 0x40 PUSH1 0x20 SWAP3 PUSH1 0x4 CALLDATALOAD DUP2 MSTORE PUSH2 0x1F9 DUP5 MSTORE KECCAK256 SLOAD PUSH1 0xA0 SHR AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x351 JUMPI PUSH1 0x20 PUSH2 0x217F PUSH2 0x33FE JUMP JUMPDEST PUSH1 0x97 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND SWAP2 SWAP1 SWAP3 AND EQ DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI DUP1 PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x226F JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x21F7 PUSH2 0x21BB PUSH2 0x4063 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4140 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP6 MSTORE PUSH1 0xFB DUP5 MSTORE PUSH1 0x40 DUP1 DUP7 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND DUP8 MSTORE DUP6 MSTORE DUP6 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 DUP2 ISZERO PUSH2 0x1A49 JUMPI POP PUSH2 0x3E4F JUMP JUMPDEST DUP1 DUP4 MSTORE PUSH2 0x1F9 SWAP1 DUP2 DUP4 MSTORE PUSH2 0x2214 PUSH1 0xFF PUSH1 0x40 DUP7 KECCAK256 SLOAD PUSH1 0xA0 SHR AND PUSH2 0x3ED2 JUMP JUMPDEST DUP4 MSTORE DUP2 MSTORE PUSH1 0x1 PUSH1 0x40 DUP4 KECCAK256 DUP4 DUP2 SSTORE ADD SWAP1 PUSH2 0x222D DUP3 SLOAD PUSH2 0x3CF8 JUMP JUMPDEST SWAP1 DUP2 PUSH2 0x2238 JUMPI POP POP POP RETURN JUMPDEST DUP2 PUSH1 0x1F DUP6 SWAP4 GT PUSH1 0x1 EQ PUSH2 0x224C JUMPI POP POP POP SSTORE DUP1 RETURN JUMPDEST DUP4 DUP4 MSTORE DUP2 DUP4 KECCAK256 PUSH2 0x2267 SWAP2 PUSH1 0x1F ADD PUSH1 0x5 SHR DUP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x3E38 JUMP JUMPDEST DUP2 KECCAK256 SWAP2 SSTORE SSTORE DUP1 RETURN JUMPDEST POP REVERT JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x351 JUMPI PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ADDRESS SUB PUSH2 0x22CB JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4100 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 MSTORE RETURN JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x38 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x555550535570677261646561626C653A206D757374206E6F742062652063616C PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6C6564207468726F7567682064656C656761746563616C6C0000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST POP PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x351 JUMPI PUSH2 0x234B PUSH2 0x33FE JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0xE8F JUMPI PUSH2 0x236A SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x34E8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 PUSH32 0x0 DUP4 AND PUSH2 0x23A3 ADDRESS DUP3 EQ ISZERO PUSH2 0x3ABD JUMP JUMPDEST PUSH2 0x23C0 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4100 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 DUP6 DUP4 SLOAD AND EQ PUSH2 0x3B1E JUMP JUMPDEST PUSH2 0x23C8 PUSH2 0x4063 JUMP JUMPDEST SWAP4 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x40E0 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP7 MSTORE PUSH1 0x20 SWAP5 PUSH1 0xFB DUP7 MSTORE DUP2 PUSH1 0x40 DUP9 KECCAK256 SWAP2 AND DUP8 MSTORE DUP6 MSTORE PUSH1 0xFF PUSH1 0x40 DUP8 KECCAK256 SLOAD AND DUP1 ISZERO PUSH2 0x2629 JUMPI JUMPDEST PUSH2 0x2404 SWAP1 PUSH2 0x3E4F JUMP JUMPDEST PUSH32 0x4910FDFA16FED3260ED0E7147F7CC6DA11A60208B5B9406D12A635614FFD9143 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x243B JUMPI POP POP POP PUSH2 0xF67 SWAP2 POP PUSH2 0x3B7F JUMP JUMPDEST DUP4 AND SWAP1 PUSH1 0x40 MLOAD PUSH4 0x52D1902D PUSH1 0xE0 SHL DUP2 MSTORE DUP6 DUP2 PUSH1 0x4 DUP2 DUP7 GAS STATICCALL DUP8 SWAP2 DUP2 PUSH2 0x25FA JUMPI JUMPDEST POP PUSH2 0x24BC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A206E657720696D706C656D656E74617469 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x6F6E206973206E6F742055555053 PUSH1 0x90 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST SWAP5 SWAP3 SWAP4 SWAP5 SUB PUSH2 0x25A3 JUMPI PUSH2 0x24CE DUP5 PUSH2 0x3B7F JUMP JUMPDEST PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B DUP6 DUP1 LOG2 DUP2 MLOAD ISZERO DUP1 ISZERO SWAP1 PUSH2 0x259B JUMPI JUMPDEST PUSH2 0x2508 JUMPI JUMPDEST POP POP POP DUP1 RETURN JUMPDEST PUSH2 0x2589 SWAP3 DUP5 DUP1 PUSH1 0x40 MLOAD SWAP5 PUSH2 0x251B DUP7 PUSH2 0x345A JUMP JUMPDEST PUSH1 0x27 DUP7 MSTORE PUSH32 0x416464726573733A206C6F772D6C6576656C2064656C65676174652063616C6C DUP6 DUP8 ADD MSTORE PUSH7 0x819985A5B1959 PUSH1 0xCA SHL PUSH1 0x40 DUP8 ADD MSTORE DUP5 DUP2 MLOAD SWAP2 ADD DUP5 GAS DELEGATECALL SWAP1 RETURNDATASIZE ISZERO PUSH2 0x2592 JUMPI RETURNDATASIZE PUSH2 0x256D DUP2 PUSH2 0x3496 JUMP JUMPDEST SWAP1 PUSH2 0x257B PUSH1 0x40 MLOAD SWAP3 DUP4 PUSH2 0x3475 JUMP JUMPDEST DUP2 MSTORE DUP7 DUP2 SWAP5 RETURNDATASIZE SWAP3 ADD RETURNDATACOPY PUSH2 0x3C0F JUMP JUMPDEST POP CODESIZE DUP1 DUP1 PUSH2 0x2502 JUMP JUMPDEST PUSH1 0x60 SWAP3 POP PUSH2 0x3C0F JUMP JUMPDEST POP PUSH1 0x1 PUSH2 0x24FD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A20756E737570706F727465642070726F78 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x1A58589B1955555251 PUSH1 0xBA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST SWAP1 SWAP2 POP DUP7 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x2622 JUMPI JUMPDEST PUSH2 0x2612 DUP2 DUP4 PUSH2 0x3475 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0xE2E JUMPI MLOAD SWAP1 CODESIZE PUSH2 0x245B JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x2608 JUMP JUMPDEST POP PUSH2 0x2404 DUP2 PUSH1 0x33 SLOAD AND DUP3 PUSH2 0x263B PUSH2 0x4063 JUMP JUMPDEST AND EQ SWAP1 POP PUSH2 0x23FB JUMP JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x351 JUMPI PUSH2 0x265E PUSH2 0x33FE JUMP JUMPDEST PUSH2 0x2666 PUSH2 0x3A11 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4140 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 DUP4 MSTORE PUSH1 0xFB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP6 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND DUP1 DUP8 MSTORE SWAP3 MSTORE DUP5 KECCAK256 SLOAD SWAP2 SWAP3 SWAP1 SWAP2 PUSH1 0xFF AND PUSH2 0xFCC JUMPI DUP4 DUP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x351 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4140 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI PUSH1 0xFF PUSH1 0x40 PUSH1 0x20 SWAP3 PUSH2 0x26E5 CALLDATASIZE PUSH2 0x3506 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP4 MSTORE PUSH2 0x1FC DUP7 MSTORE DUP4 DUP4 KECCAK256 SWAP1 DUP4 MSTORE DUP6 MSTORE DUP3 DUP3 KECCAK256 SWAP1 DUP3 MSTORE DUP5 MSTORE KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP2 AND ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x351 JUMPI PUSH2 0x272D PUSH2 0x4063 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4120 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP3 MSTORE PUSH1 0xFB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP6 MSTORE DUP3 MSTORE DUP4 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 PUSH1 0xFF AND DUP1 ISZERO PUSH2 0x2814 JUMPI JUMPDEST DUP1 ISZERO PUSH2 0x27F9 JUMPI JUMPDEST PUSH2 0x2779 SWAP1 PUSH2 0x3E4F JUMP JUMPDEST PUSH1 0x97 SLOAD PUSH1 0xFF DUP2 PUSH1 0xA0 SHR AND ISZERO PUSH2 0x27BD JUMPI PUSH1 0xFF PUSH1 0xA0 SHL NOT AND PUSH1 0x97 SSTORE PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA SWAP2 SWAP1 PUSH2 0x1805 PUSH2 0x4063 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x14185D5CD8589B194E881B9BDD081C185D5CD959 PUSH1 0x62 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST POP PUSH2 0x2779 DUP2 PUSH1 0x33 SLOAD AND DUP3 PUSH2 0x280B PUSH2 0x4063 JUMP JUMPDEST AND EQ SWAP1 POP PUSH2 0x2770 JUMP JUMPDEST POP PUSH2 0x281D PUSH2 0x4063 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4140 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 MSTORE PUSH1 0xFB DUP4 MSTORE DUP2 PUSH1 0x40 DUP6 KECCAK256 SWAP2 AND DUP5 MSTORE DUP3 MSTORE PUSH1 0xFF PUSH1 0x40 DUP5 KECCAK256 SLOAD AND PUSH2 0x2769 JUMP JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x56D JUMPI PUSH2 0x2865 PUSH2 0x33FE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 DUP2 AND PUSH2 0x289C ADDRESS DUP3 EQ ISZERO PUSH2 0x3ABD JUMP JUMPDEST PUSH2 0x28B9 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4100 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 DUP4 DUP4 SLOAD AND EQ PUSH2 0x3B1E JUMP JUMPDEST PUSH2 0x28C1 PUSH2 0x4063 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x40E0 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP7 MSTORE PUSH1 0xFB DUP6 MSTORE DUP3 PUSH1 0x40 DUP8 KECCAK256 SWAP2 AND DUP7 MSTORE DUP5 MSTORE PUSH1 0xFF PUSH1 0x40 DUP7 KECCAK256 SLOAD AND DUP1 ISZERO PUSH2 0x2B24 JUMPI JUMPDEST PUSH2 0x28F9 SWAP1 PUSH2 0x3E4F JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP5 DUP3 ADD SWAP3 DUP3 DUP5 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP6 GT OR PUSH2 0xE32 JUMPI DUP4 PUSH1 0x40 MSTORE DUP7 DUP4 MSTORE PUSH1 0xFF PUSH32 0x4910FDFA16FED3260ED0E7147F7CC6DA11A60208B5B9406D12A635614FFD9143 SLOAD AND PUSH1 0x0 EQ PUSH2 0x2954 JUMPI POP POP POP POP PUSH2 0xF67 SWAP2 POP PUSH2 0x3B7F JUMP JUMPDEST DUP5 SWAP3 SWAP4 SWAP5 AND SWAP1 PUSH1 0x40 MLOAD PUSH4 0x52D1902D PUSH1 0xE0 SHL DUP2 MSTORE DUP7 DUP2 PUSH1 0x4 DUP2 DUP7 GAS STATICCALL DUP9 SWAP2 DUP2 PUSH2 0x2AF1 JUMPI JUMPDEST POP PUSH2 0x29D8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A206E657720696D706C656D656E74617469 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x6F6E206973206E6F742055555053 PUSH1 0x90 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST SWAP6 SWAP4 SWAP5 SWAP6 SUB PUSH2 0x2A9A JUMPI PUSH2 0x29EA DUP3 PUSH2 0x3B7F JUMP JUMPDEST PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B DUP7 DUP1 LOG2 DUP5 DUP4 MLOAD ISZERO DUP1 ISZERO SWAP1 PUSH2 0x2A93 JUMPI JUMPDEST PUSH2 0x2A27 JUMPI JUMPDEST POP POP POP POP POP DUP1 RETURN JUMPDEST DUP1 PUSH2 0x2A88 SWAP6 PUSH1 0x40 MLOAD SWAP6 PUSH2 0x2A39 DUP8 PUSH2 0x345A JUMP JUMPDEST PUSH1 0x27 DUP8 MSTORE PUSH32 0x416464726573733A206C6F772D6C6576656C2064656C65676174652063616C6C DUP7 DUP9 ADD MSTORE PUSH7 0x819985A5B1959 PUSH1 0xCA SHL PUSH1 0x40 DUP9 ADD MSTORE MLOAD SWAP1 DUP5 GAS DELEGATECALL SWAP1 RETURNDATASIZE ISZERO PUSH2 0x2592 JUMPI RETURNDATASIZE PUSH2 0x256D DUP2 PUSH2 0x3496 JUMP JUMPDEST POP CODESIZE DUP1 DUP1 DUP1 DUP5 PUSH2 0x2A1F JUMP JUMPDEST POP DUP1 PUSH2 0x2A1A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A20756E737570706F727465642070726F78 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x1A58589B1955555251 PUSH1 0xBA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST SWAP1 SWAP2 POP DUP8 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x2B1D JUMPI JUMPDEST PUSH2 0x2B09 DUP2 DUP4 PUSH2 0x3475 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x2B19 JUMPI MLOAD SWAP1 CODESIZE PUSH2 0x2977 JUMP JUMPDEST DUP9 DUP1 REVERT JUMPDEST POP RETURNDATASIZE PUSH2 0x2AFF JUMP JUMPDEST POP PUSH2 0x28F9 DUP3 PUSH1 0x33 SLOAD AND DUP4 PUSH2 0x2B36 PUSH2 0x4063 JUMP JUMPDEST AND EQ SWAP1 POP PUSH2 0x28F0 JUMP JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x351 JUMPI PUSH2 0x2B59 PUSH2 0x33E8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 PUSH2 0x2B6A PUSH2 0x4063 JUMP JUMPDEST AND SWAP1 DUP3 AND SUB PUSH2 0x2B7F JUMPI PUSH2 0xF67 SWAP1 PUSH1 0x4 CALLDATALOAD PUSH2 0x3997 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x44 DUP3 ADD MSTORE PUSH15 0x103937B632B9903337B91039B2B633 PUSH1 0x89 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x351 JUMPI PUSH2 0x2BF6 PUSH2 0x33FE JUMP JUMPDEST PUSH2 0x2BFE PUSH2 0x4063 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4140 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 MSTORE PUSH1 0xFB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP6 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP7 MSTORE SWAP1 SWAP2 MSTORE DUP4 KECCAK256 SLOAD PUSH1 0xFF AND DUP1 ISZERO PUSH2 0x2C5A JUMPI JUMPDEST PUSH2 0x2C41 SWAP1 PUSH2 0x3E4F JUMP JUMPDEST PUSH2 0x1F8 SWAP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL DUP3 SLOAD AND OR SWAP1 SSTORE DUP1 RETURN JUMPDEST POP PUSH2 0x2C41 DUP2 PUSH1 0x33 SLOAD AND DUP3 PUSH2 0x2C6C PUSH2 0x4063 JUMP JUMPDEST AND EQ SWAP1 POP PUSH2 0x2C38 JUMP JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x351 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x2C92 PUSH2 0x33E8 JUMP JUMPDEST DUP2 DUP4 MSTORE PUSH1 0xFB PUSH1 0x20 MSTORE PUSH2 0x2CAA PUSH1 0x1 PUSH1 0x40 DUP6 KECCAK256 ADD SLOAD PUSH2 0x35FB JUMP JUMPDEST DUP2 DUP4 MSTORE PUSH1 0xFB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP6 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP1 DUP8 MSTORE SWAP3 MSTORE DUP5 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 PUSH1 0xFF AND ISZERO PUSH2 0x12E2 JUMPI DUP4 DUP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x351 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0x4 CALLDATALOAD PUSH1 0x24 CALLDATALOAD DUP3 DUP2 GT PUSH2 0xBD7 JUMPI PUSH2 0x2D10 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x34E8 JUMP JUMPDEST SWAP2 PUSH2 0x2D19 PUSH2 0x4063 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4140 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP6 MSTORE PUSH1 0xFB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP8 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP9 MSTORE DUP3 MSTORE DUP7 KECCAK256 SLOAD SWAP1 SWAP4 SWAP2 PUSH2 0x2D5F SWAP2 PUSH1 0xFF AND SWAP1 DUP2 ISZERO PUSH2 0x1A49 JUMPI POP PUSH2 0x3E4F JUMP JUMPDEST DUP1 DUP6 MSTORE PUSH2 0x1F9 SWAP1 DUP2 DUP5 MSTORE PUSH2 0x2D7C PUSH1 0xFF PUSH1 0x40 DUP9 KECCAK256 SLOAD PUSH1 0xA0 SHR AND PUSH2 0x3ED2 JUMP JUMPDEST DUP6 MSTORE DUP3 MSTORE PUSH1 0x1 SWAP2 DUP3 PUSH1 0x40 DUP7 KECCAK256 ADD SWAP4 DUP1 MLOAD SWAP3 DUP4 GT PUSH2 0x2E6F JUMPI PUSH2 0x2D9D DUP6 SLOAD PUSH2 0x3CF8 JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0x2E41 JUMPI JUMPDEST POP DUP2 PUSH1 0x1F DUP5 GT PUSH1 0x1 EQ PUSH2 0x2DE0 JUMPI POP SWAP3 DUP3 SWAP4 SWAP2 DUP4 SWAP3 DUP8 SWAP5 PUSH2 0x2DD5 JUMPI JUMPDEST POP POP SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR SWAP1 SSTORE DUP1 RETURN JUMPDEST ADD MLOAD SWAP3 POP CODESIZE DUP1 PUSH2 0x2DC1 JUMP JUMPDEST SWAP2 SWAP1 DUP4 PUSH1 0x1F NOT DUP2 AND DUP8 DUP10 MSTORE DUP5 DUP10 KECCAK256 SWAP5 DUP10 SWAP1 JUMPDEST DUP9 DUP4 DUP4 LT PUSH2 0x2E27 JUMPI POP POP POP LT PUSH2 0x2E0E JUMPI JUMPDEST POP POP POP DUP2 SHL ADD SWAP1 SSTORE DUP1 RETURN JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH2 0x2E03 JUMP JUMPDEST DUP6 DUP8 ADD MLOAD DUP9 SSTORE SWAP1 SWAP7 ADD SWAP6 SWAP5 DUP6 ADD SWAP5 DUP8 SWAP4 POP SWAP1 DUP2 ADD SWAP1 PUSH2 0x2DF2 JUMP JUMPDEST PUSH2 0x2E69 SWAP1 DUP7 DUP9 MSTORE DUP4 DUP9 KECCAK256 PUSH1 0x1F DUP7 ADD PUSH1 0x5 SHR DUP2 ADD SWAP2 DUP6 DUP8 LT PUSH2 0xA2B JUMPI PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP1 PUSH2 0x3E38 JUMP JUMPDEST CODESIZE PUSH2 0x2DA6 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP7 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP7 REVERT JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x351 JUMPI PUSH1 0x1 PUSH1 0x40 PUSH1 0x20 SWAP3 PUSH1 0x4 CALLDATALOAD DUP2 MSTORE PUSH1 0xFB DUP5 MSTORE KECCAK256 ADD SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI PUSH1 0x40 PUSH1 0x20 SWAP2 PUSH2 0x2EC4 CALLDATASIZE PUSH2 0x3506 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP4 MSTORE PUSH2 0x1FB DUP6 MSTORE DUP4 DUP4 KECCAK256 SWAP1 DUP4 MSTORE DUP5 MSTORE DUP3 DUP3 KECCAK256 SWAP1 DUP3 MSTORE DUP4 MSTORE KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x351 JUMPI PUSH1 0x20 SWAP1 PUSH1 0x4 CALLDATALOAD DUP2 MSTORE PUSH2 0x1F9 DUP3 MSTORE PUSH1 0x40 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 KECCAK256 SLOAD AND PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x56D JUMPI PUSH2 0x2F3F PUSH2 0x33FE JUMP JUMPDEST PUSH2 0x2F47 PUSH2 0x4063 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4140 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 MSTORE PUSH1 0xFB DUP4 MSTORE PUSH1 0x40 DUP1 DUP6 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND DUP7 MSTORE DUP5 MSTORE DUP5 KECCAK256 SLOAD PUSH1 0xFF AND DUP1 ISZERO PUSH2 0x2FBA JUMPI JUMPDEST PUSH2 0x2F86 SWAP1 PUSH2 0x3E4F JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4180 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP3 DUP4 DUP6 MSTORE PUSH1 0xFB DUP2 MSTORE DUP2 PUSH1 0x40 DUP7 KECCAK256 SWAP4 AND SWAP3 DUP4 DUP7 MSTORE DUP2 MSTORE PUSH1 0xFF PUSH1 0x40 DUP7 KECCAK256 SLOAD AND PUSH2 0x1C2E JUMPI DUP5 DUP1 RETURN JUMPDEST POP PUSH2 0x2F86 DUP2 PUSH1 0x33 SLOAD AND DUP3 PUSH2 0x2FCC PUSH2 0x4063 JUMP JUMPDEST AND EQ SWAP1 POP PUSH2 0x2F7D JUMP JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x351 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x2FF2 PUSH2 0x33E8 JUMP JUMPDEST PUSH2 0x2FFA PUSH2 0x4063 JUMP JUMPDEST SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4140 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 MSTORE PUSH1 0xFB PUSH1 0x20 MSTORE PUSH1 0x40 DUP5 KECCAK256 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 SWAP4 AND DUP6 MSTORE PUSH1 0x20 MSTORE PUSH1 0xFF PUSH1 0x40 DUP6 KECCAK256 SLOAD AND DUP1 ISZERO PUSH2 0x3084 JUMPI JUMPDEST PUSH2 0x303C SWAP1 PUSH2 0x3E4F JUMP JUMPDEST AND SWAP1 PUSH2 0x3049 DUP3 ISZERO ISZERO PUSH2 0x3E91 JUMP JUMPDEST DUP1 DUP4 MSTORE PUSH2 0x1F9 SWAP1 DUP2 PUSH1 0x20 MSTORE PUSH2 0x3067 PUSH1 0xFF PUSH1 0x40 DUP7 KECCAK256 SLOAD PUSH1 0xA0 SHR AND PUSH2 0x3ED2 JUMP JUMPDEST DUP4 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SWAP2 OR SWAP1 SSTORE DUP1 RETURN JUMPDEST POP PUSH2 0x303C DUP3 PUSH1 0x33 SLOAD AND DUP4 PUSH2 0x3096 PUSH2 0x4063 JUMP JUMPDEST AND EQ SWAP1 POP PUSH2 0x3033 JUMP JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x351 JUMPI PUSH1 0x4 CALLDATALOAD PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL DUP2 AND DUP1 SWAP2 SUB PUSH2 0x56D JUMPI PUSH1 0x20 SWAP1 PUSH4 0x7965DB0B PUSH1 0xE0 SHL DUP2 EQ SWAP1 DUP2 ISZERO PUSH2 0x30E5 JUMPI JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL EQ SWAP1 POP DUP3 PUSH2 0x30DA JUMP JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x351 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x24 CALLDATALOAD DUP1 ISZERO ISZERO DUP2 SUB PUSH2 0xE8F JUMPI PUSH2 0xF67 SWAP2 PUSH2 0x3166 PUSH2 0x3126 PUSH2 0x4063 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4140 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP7 MSTORE PUSH1 0xFB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP9 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP10 MSTORE SWAP1 SWAP2 MSTORE DUP7 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 DUP2 ISZERO PUSH2 0x1A49 JUMPI POP PUSH2 0x3E4F JUMP JUMPDEST DUP1 DUP5 MSTORE PUSH2 0x1F9 SWAP1 DUP2 PUSH1 0x20 MSTORE PUSH2 0x3184 PUSH1 0xFF PUSH1 0x40 DUP8 KECCAK256 SLOAD PUSH1 0xA0 SHR AND PUSH2 0x3ED2 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF PUSH1 0xA0 SHL NOT AND SWAP2 ISZERO ISZERO PUSH1 0xA0 SHL PUSH1 0xFF PUSH1 0xA0 SHL AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST POP CALLVALUE PUSH2 0x351 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x351 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x31C7 PUSH2 0x33E8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0x44 CALLDATALOAD DUP2 DUP2 GT PUSH2 0xE46 JUMPI PUSH2 0x31E7 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x34E8 JUMP JUMPDEST SWAP3 PUSH2 0x31F0 PUSH2 0x4063 JUMP JUMPDEST SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4140 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP7 MSTORE PUSH1 0x20 SWAP2 PUSH1 0xFB DUP4 MSTORE PUSH1 0x40 DUP8 KECCAK256 SWAP5 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP6 DUP7 DUP1 SWAP4 AND DUP10 MSTORE DUP5 MSTORE PUSH1 0xFF PUSH1 0x40 DUP10 KECCAK256 SLOAD AND DUP1 ISZERO PUSH2 0x33CD JUMPI JUMPDEST PUSH2 0x3236 SWAP1 PUSH2 0x3E4F JUMP JUMPDEST AND PUSH2 0x3242 DUP2 ISZERO ISZERO PUSH2 0x3E91 JUMP JUMPDEST DUP2 DUP8 MSTORE PUSH2 0x1F9 SWAP5 DUP6 DUP5 MSTORE PUSH1 0xFF PUSH1 0x40 DUP10 KECCAK256 SLOAD PUSH1 0xA0 SHR AND PUSH2 0x3391 JUMPI PUSH1 0x40 MLOAD SWAP2 PUSH1 0x60 DUP4 ADD DUP4 DUP2 LT DUP8 DUP3 GT OR PUSH2 0x337D JUMPI PUSH1 0x40 SWAP1 DUP2 MSTORE SWAP1 DUP4 MSTORE PUSH1 0x1 DUP6 DUP5 ADD DUP2 DUP2 MSTORE DUP5 DUP4 ADD SWAP10 DUP11 MSTORE SWAP5 DUP11 MSTORE SWAP7 DUP6 MSTORE DUP9 KECCAK256 SWAP2 MLOAD DUP3 SLOAD SWAP4 MLOAD PUSH1 0xFF PUSH1 0xA0 SHL SWAP1 ISZERO ISZERO PUSH1 0xA0 SHL AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT SWAP1 SWAP5 AND SWAP2 AND PUSH1 0xFF PUSH1 0xA0 SHL NOT AND OR SWAP2 SWAP1 SWAP2 OR DUP2 SSTORE DUP4 ADD SWAP4 MLOAD DUP1 MLOAD SWAP3 DUP4 GT PUSH2 0x2E6F JUMPI PUSH2 0x32D1 DUP6 SLOAD PUSH2 0x3CF8 JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0x334F JUMPI JUMPDEST POP DUP2 PUSH1 0x1F DUP5 GT PUSH1 0x1 EQ PUSH2 0x3308 JUMPI POP SWAP3 DUP3 SWAP4 SWAP2 DUP4 SWAP3 DUP8 SWAP5 PUSH2 0x2DD5 JUMPI POP POP SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR SWAP1 SSTORE DUP1 RETURN JUMPDEST SWAP2 SWAP1 DUP4 PUSH1 0x1F NOT DUP2 AND DUP8 DUP10 MSTORE DUP5 DUP10 KECCAK256 SWAP5 DUP10 SWAP1 JUMPDEST DUP9 DUP4 DUP4 LT PUSH2 0x3335 JUMPI POP POP POP LT PUSH2 0x2E0E JUMPI POP POP POP DUP2 SHL ADD SWAP1 SSTORE DUP1 RETURN JUMPDEST DUP6 DUP8 ADD MLOAD DUP9 SSTORE SWAP1 SWAP7 ADD SWAP6 SWAP5 DUP6 ADD SWAP5 DUP8 SWAP4 POP SWAP1 DUP2 ADD SWAP1 PUSH2 0x331A JUMP JUMPDEST PUSH2 0x3377 SWAP1 DUP7 DUP9 MSTORE DUP4 DUP9 KECCAK256 PUSH1 0x1F DUP7 ADD PUSH1 0x5 SHR DUP2 ADD SWAP2 DUP6 DUP8 LT PUSH2 0xA2B JUMPI PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP1 PUSH2 0x3E38 JUMP JUMPDEST CODESIZE PUSH2 0x32DA JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP11 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP11 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x526F75746520416C726561647920457869737473 PUSH1 0x60 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST POP PUSH2 0x3236 DUP3 PUSH1 0x33 SLOAD AND DUP4 PUSH2 0x33DF PUSH2 0x4063 JUMP JUMPDEST AND EQ SWAP1 POP PUSH2 0x322D JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0xBD2 JUMPI JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0xBD2 JUMPI JUMP JUMPDEST CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0xBD2 JUMPI JUMP JUMPDEST PUSH2 0x100 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x3444 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x60 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x3444 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x3444 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x3444 JUMPI PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP3 SWAP2 SWAP3 PUSH2 0x34BD DUP3 PUSH2 0x3496 JUMP JUMPDEST SWAP2 PUSH2 0x34CB PUSH1 0x40 MLOAD SWAP4 DUP5 PUSH2 0x3475 JUMP JUMPDEST DUP3 SWAP5 DUP2 DUP5 MSTORE DUP2 DUP4 ADD GT PUSH2 0xBD2 JUMPI DUP3 DUP2 PUSH1 0x20 SWAP4 DUP5 PUSH1 0x0 SWAP7 ADD CALLDATACOPY ADD ADD MSTORE JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0xBD2 JUMPI DUP2 PUSH1 0x20 PUSH2 0x3503 SWAP4 CALLDATALOAD SWAP2 ADD PUSH2 0x34B1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x60 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0xBD2 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0xBD2 JUMPI SWAP1 PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x44 CALLDATALOAD SWAP1 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH1 0x40 DUP2 DUP5 SUB SLT PUSH2 0xBD2 JUMPI PUSH1 0x40 DUP1 MLOAD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP2 DUP4 ADD DUP3 DUP2 GT DUP5 DUP3 LT OR PUSH2 0x3444 JUMPI PUSH1 0x40 MSTORE DUP3 SWAP5 PUSH2 0x3566 DUP3 PUSH2 0x3414 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP3 ADD CALLDATALOAD SWAP3 DUP4 GT PUSH2 0xBD2 JUMPI PUSH1 0x20 SWAP3 PUSH2 0x3581 SWAP3 ADD PUSH2 0x34E8 JUMP JUMPDEST SWAP2 ADD MSTORE JUMP JUMPDEST SWAP2 DUP2 PUSH1 0x1F DUP5 ADD SLT ISZERO PUSH2 0xBD2 JUMPI DUP3 CALLDATALOAD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT PUSH2 0xBD2 JUMPI PUSH1 0x20 DUP4 DUP2 DUP7 ADD SWAP6 ADD ADD GT PUSH2 0xBD2 JUMPI JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x35C6 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x35B6 JUMP JUMPDEST SWAP1 PUSH1 0x20 SWAP2 PUSH2 0x35EF DUP2 MLOAD DUP1 SWAP3 DUP2 DUP6 MSTORE DUP6 DUP1 DUP7 ADD SWAP2 ADD PUSH2 0x35B3 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP JUMPDEST PUSH2 0x3603 PUSH2 0x4063 JUMP JUMPDEST SWAP1 PUSH1 0x0 SWAP1 DUP1 DUP3 MSTORE PUSH1 0x20 SWAP2 PUSH1 0xFB DUP4 MSTORE PUSH1 0x40 SWAP4 DUP5 DUP3 KECCAK256 SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 DUP4 MSTORE DUP5 MSTORE PUSH1 0xFF DUP6 DUP4 KECCAK256 SLOAD AND ISZERO PUSH2 0x3639 JUMPI POP POP POP POP POP JUMP JUMPDEST DUP5 MLOAD SWAP3 PUSH2 0x3645 DUP5 PUSH2 0x345A JUMP JUMPDEST PUSH1 0x2A DUP5 MSTORE DUP5 DUP5 ADD SWAP1 DUP7 CALLDATASIZE DUP4 CALLDATACOPY DUP5 MLOAD ISZERO PUSH2 0x38FB JUMPI PUSH1 0x30 DUP3 MSTORE8 DUP5 MLOAD SWAP3 PUSH1 0x1 SWAP4 DUP5 LT ISZERO PUSH2 0x38E7 JUMPI PUSH1 0x78 PUSH1 0x21 DUP8 ADD MSTORE8 PUSH1 0x29 JUMPDEST DUP5 DUP2 GT PUSH2 0x387D JUMPI POP PUSH2 0x383B JUMPI DUP7 MLOAD SWAP3 PUSH1 0x80 DUP5 ADD DUP5 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x2E6F JUMPI DUP9 MSTORE PUSH1 0x42 DUP5 MSTORE DUP7 DUP5 ADD SWAP5 PUSH1 0x60 CALLDATASIZE DUP8 CALLDATACOPY DUP5 MLOAD ISZERO PUSH2 0x3827 JUMPI PUSH1 0x30 DUP7 MSTORE8 DUP5 MLOAD DUP3 LT ISZERO PUSH2 0x3827 JUMPI SWAP1 PUSH1 0x78 PUSH1 0x21 DUP7 ADD MSTORE8 PUSH1 0x41 SWAP2 JUMPDEST DUP2 DUP4 GT PUSH2 0x37B9 JUMPI POP POP POP PUSH2 0x3777 JUMPI PUSH2 0x3773 SWAP4 DUP7 SWAP4 PUSH2 0x3757 SWAP4 PUSH2 0x3748 PUSH1 0x48 SWAP5 PUSH2 0x371F SWAP11 MLOAD SWAP11 DUP12 SWAP6 PUSH32 0x416363657373436F6E74726F6C3A206163636F756E7420000000000000000000 DUP13 DUP9 ADD MSTORE MLOAD DUP1 SWAP3 PUSH1 0x37 DUP9 ADD SWAP1 PUSH2 0x35B3 JUMP JUMPDEST DUP5 ADD SWAP2 PUSH17 0x1034B99036B4B9B9B4B733903937B6329 PUSH1 0x7D SHL PUSH1 0x37 DUP5 ADD MSTORE MLOAD DUP1 SWAP4 DUP7 DUP5 ADD SWAP1 PUSH2 0x35B3 JUMP JUMPDEST ADD SUB PUSH1 0x28 DUP2 ADD DUP8 MSTORE ADD DUP6 PUSH2 0x3475 JUMP JUMPDEST MLOAD SWAP3 DUP4 SWAP3 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP5 MSTORE PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x24 DUP4 ADD SWAP1 PUSH2 0x35D6 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x64 DUP6 DUP8 MLOAD SWAP1 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE DUP1 PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 SWAP2 SWAP3 PUSH1 0xF DUP2 AND PUSH1 0x10 DUP2 LT ISZERO PUSH2 0x3813 JUMPI PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL SWAP1 BYTE PUSH2 0x37E9 DUP6 DUP9 PUSH2 0x3CD1 JUMP JUMPDEST MSTORE8 PUSH1 0x4 SHR SWAP3 DUP1 ISZERO PUSH2 0x37FF JUMPI PUSH1 0x0 NOT ADD SWAP2 SWAP1 PUSH2 0x36C7 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP3 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 DUP3 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 DUP4 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST PUSH1 0x64 DUP7 DUP9 MLOAD SWAP1 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE DUP1 PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 PUSH1 0xF DUP2 AND PUSH1 0x10 DUP2 LT ISZERO PUSH2 0x38D3 JUMPI PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL SWAP1 BYTE PUSH2 0x38AB DUP4 DUP10 PUSH2 0x3CD1 JUMP JUMPDEST MSTORE8 PUSH1 0x4 SHR SWAP1 DUP1 ISZERO PUSH2 0x38BF JUMPI PUSH1 0x0 NOT ADD PUSH2 0x3673 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP7 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 DUP7 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP8 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 DUP8 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP6 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 DUP6 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP5 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 DUP5 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH32 0xC88390E7E62175BE0932452175B6A7222B6B094AB0EF984A5153C620345D8975 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 SWAP3 SWAP1 PUSH1 0xFF AND ISZERO PUSH2 0x3958 JUMPI POP POP POP JUMP JUMPDEST DUP3 DUP1 MSTORE PUSH1 0xFB PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 DUP3 DUP5 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0xFF NOT DUP3 SLOAD AND OR SWAP1 SSTORE PUSH2 0x3981 PUSH2 0x4063 JUMP JUMPDEST AND SWAP2 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x40C0 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 DUP1 LOG4 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xFB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 DUP7 AND DUP1 DUP6 MSTORE SWAP3 MSTORE DUP3 KECCAK256 SLOAD SWAP2 SWAP4 SWAP1 SWAP3 SWAP2 PUSH1 0xFF AND PUSH2 0x39CE JUMPI JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4160 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 DUP3 DUP6 MSTORE PUSH1 0xFB PUSH1 0x20 MSTORE PUSH1 0x40 DUP6 KECCAK256 DUP5 DUP7 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP6 KECCAK256 PUSH1 0xFF NOT DUP2 SLOAD AND SWAP1 SSTORE PUSH2 0x3A04 PUSH2 0x4063 JUMP JUMPDEST AND SWAP4 DUP1 LOG4 CODESIZE DUP1 DUP1 DUP1 PUSH2 0x39C8 JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP1 PUSH2 0x3A28 PUSH2 0x4063 JUMP JUMPDEST AND SUB PUSH2 0x3A30 JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x33 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP3 AND DUP2 OR SWAP1 SWAP3 SSTORE SWAP1 SWAP2 AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x0 DUP1 LOG3 JUMP JUMPDEST ISZERO PUSH2 0x3AC4 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x19195B1959D85D1958D85B1B PUSH1 0xA2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x3B25 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x6163746976652070726F7879 PUSH1 0xA0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST DUP1 EXTCODESIZE ISZERO PUSH2 0x3BB4 JUMPI PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4100 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x44 DUP3 ADD MSTORE PUSH13 0x1BDD08184818DBDB9D1C9858DD PUSH1 0x9A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST SWAP2 SWAP3 SWAP1 ISZERO PUSH2 0x3C71 JUMPI POP DUP2 MLOAD ISZERO PUSH2 0x3C23 JUMPI POP SWAP1 JUMP JUMPDEST EXTCODESIZE ISZERO PUSH2 0x3C2C JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST DUP3 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x3C84 JUMPI POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE SWAP1 DUP2 SWAP1 PUSH2 0x3773 SWAP1 PUSH1 0x24 DUP4 ADD SWAP1 PUSH2 0x35D6 JUMP JUMPDEST DUP2 DUP2 MUL SWAP3 SWAP2 DUP2 ISZERO SWAP2 DUP5 DIV EQ OR ISZERO PUSH2 0x3CBB JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x3CE2 JUMPI ADD PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x1 DUP3 DUP2 SHR SWAP3 AND DUP1 ISZERO PUSH2 0x3D28 JUMPI JUMPDEST PUSH1 0x20 DUP4 LT EQ PUSH2 0x3D12 JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x3D07 JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD SWAP2 DUP3 PUSH1 0x0 DUP3 SLOAD SWAP3 PUSH2 0x3D46 DUP5 PUSH2 0x3CF8 JUMP JUMPDEST SWAP1 DUP2 DUP5 MSTORE PUSH1 0x1 SWAP5 DUP6 DUP2 AND SWAP1 DUP2 PUSH1 0x0 EQ PUSH2 0x3DB5 JUMPI POP PUSH1 0x1 EQ PUSH2 0x3D72 JUMPI JUMPDEST POP POP PUSH2 0x3D70 SWAP3 POP SUB DUP4 PUSH2 0x3475 JUMP JUMPDEST JUMP JUMPDEST SWAP1 SWAP4 SWAP2 POP PUSH1 0x0 MSTORE PUSH1 0x20 SWAP1 DUP2 PUSH1 0x0 KECCAK256 SWAP4 PUSH1 0x0 SWAP2 JUMPDEST DUP2 DUP4 LT PUSH2 0x3D9D JUMPI POP POP PUSH2 0x3D70 SWAP4 POP DUP3 ADD ADD CODESIZE DUP1 PUSH2 0x3D62 JUMP JUMPDEST DUP6 SLOAD DUP9 DUP5 ADD DUP6 ADD MSTORE SWAP5 DUP6 ADD SWAP5 DUP8 SWAP5 POP SWAP2 DUP4 ADD SWAP2 PUSH2 0x3D85 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x3D70 SWAP5 POP PUSH1 0x20 SWAP3 POP PUSH1 0xFF NOT AND DUP3 DUP5 ADD MSTORE ISZERO ISZERO PUSH1 0x5 SHL DUP3 ADD ADD CODESIZE DUP1 PUSH2 0x3D62 JUMP JUMPDEST ISZERO PUSH2 0x3DDF JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST DUP2 DUP2 LT PUSH2 0x3E43 JUMPI POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x3E38 JUMP JUMPDEST ISZERO PUSH2 0x3E56 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x556E617574686F72697A656420416363657373 PUSH1 0x68 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x3E98 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x1059191C995CDCC80C08141C9BDD9A591959 PUSH1 0x72 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x3ED9 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x149BDD5D1948111BD95CC8139BDD08115E1A5CDD PUSH1 0x62 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x3F1C JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536F7572636520616E642044657374696E6174696F6E20436861696E20496473 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x206172652073616D65 PUSH1 0xB8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x3F7A JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x44657374696E6174696F6E20436861696E204761746577617920416464726573 PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x1CC81A5CC81B9BDD081CD95D PUSH1 0xA2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST SWAP3 SWAP2 SWAP1 PUSH2 0x405E PUSH1 0x20 DUP1 SWAP3 PUSH1 0x40 DUP8 MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 DUP3 MLOAD AND PUSH1 0x40 DUP10 ADD MSTORE DUP3 DUP3 ADD MLOAD PUSH1 0x60 DUP10 ADD MSTORE PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x80 DUP10 ADD MSTORE PUSH1 0x60 DUP3 ADD MLOAD PUSH1 0xA0 DUP10 ADD MSTORE PUSH1 0x80 DUP3 ADD MLOAD PUSH1 0xC0 DUP10 ADD MSTORE DUP1 PUSH1 0xA0 DUP4 ADD MLOAD AND PUSH1 0xE0 DUP10 ADD MSTORE PUSH1 0xE0 DUP2 PUSH1 0xC0 DUP5 ADD MLOAD AND SWAP3 PUSH2 0x100 SWAP4 DUP5 DUP12 ADD MSTORE ADD MLOAD SWAP2 PUSH2 0x120 DUP10 ADD MSTORE DUP2 MLOAD AND PUSH2 0x140 DUP9 ADD MSTORE ADD MLOAD PUSH1 0x40 PUSH2 0x160 DUP8 ADD MSTORE PUSH2 0x180 DUP7 ADD SWAP1 PUSH2 0x35D6 JUMP JUMPDEST SWAP4 ADD MSTORE JUMP JUMPDEST PUSH1 0x97 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ DUP1 DUP1 PUSH2 0x40B4 JUMPI JUMPDEST ISZERO PUSH2 0x408A JUMPI POP CALLDATASIZE PUSH1 0x13 NOT ADD CALLDATALOAD PUSH1 0x60 SHR SWAP1 JUMP JUMPDEST PUSH1 0x14 CALLDATASIZE LT ISZERO SWAP1 DUP2 PUSH2 0x40AC JUMPI JUMPDEST POP ISZERO PUSH2 0x40A8 JUMPI CALLDATASIZE PUSH1 0x13 NOT ADD CALLDATALOAD PUSH1 0x60 SHR SWAP1 JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST SWAP1 POP CODESIZE PUSH2 0x4096 JUMP JUMPDEST POP PUSH1 0x14 CALLDATASIZE LT ISZERO PUSH2 0x4078 JUMP INVALID 0x2F DUP8 DUP9 GT PUSH31 0x7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D189AB7A9 0x24 0x4D CREATE DUP5 DUP2 0x22 ISZERO NUMBER ISZERO 0xAF PUSH18 0xFE140F3DB0FE014031783B0946B8C9D2E336 ADDMOD SWAP5 LOG1 EXTCODESIZE LOG1 LOG3 0x21 MOD PUSH8 0xC828492DB98DCA3E KECCAK256 PUSH23 0xCC3735A920A3CA505D382BBC65D7A28E3265B37A647492 SWAP16 CALLER PUSH6 0x21B332C1681B SWAP4 EXTCODEHASH PUSH13 0xB9F3376673440D862A7613A25E 0xCC PUSH20 0x8585A232AD50A301178F12B3BA8887D13E138B52 EXTCODECOPY TIMESTAMP PUSH10 0xC47689F6391F5C32D9C6 SWAP14 0x2A SELFBALANCE 0xEA PUSH8 0xB442974B53935D1 0xED 0xC7 REVERT PUSH5 0xEB21E047A8 CODECOPY OR SHL LOG4 SWAP9 SMOD KECCAK256 0x5C 0xE4 0xD3 SSTORE MULMOD 0x2E CREATE2 0xA8 LOG1 DUP16 JUMP 0xE8 SWAP2 EXTCODECOPY DELEGATECALL LOG2 ADD 0xFB 0xE2 DUP8 DUP3 JUMPDEST MULMOD JUMP SWAP4 0xC2 OR PUSH22 0xA264697066735822122090D6FE61FA80136E820181ED DUP9 0xDB DUP14 JUMP SWAP10 RETURNDATACOPY 0xEE 0xA8 0xE1 SWAP1 PUSH2 0xC528 XOR 0x23 PUSH19 0xF6DE83F464736F6C6343000811003300000000 ","sourceMap":"1359:16542:28:-:0;;;;;;;;;-1:-1:-1;1359:16542:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1359:16542:28;;;;;;:::i;:::-;4495:12;;:::i;:::-;-1:-1:-1;;;;;;;;;;;1359:16542:28;;3438:6:1;1359:16542:28;;;;;;;;;;;;;;;;;;;;;;;4469:78;;;;1359:16542;4448:135;;;:::i;:::-;7795:42;1359:16542;;-1:-1:-1;;;;;1359:16542:28;;;;;;;;;;4469:78;1359:16542;4448:135;1359:16542;1513:6:4;1359:16542:28;;4535:12;;;:::i;:::-;1359:16542;4524:23;4469:78;;;;1359:16542;;;;;;;;;;-1:-1:-1;;1359:16542:28;;;;;;;;8610:6;1359:16542;;;;;;;;;;;;;;-1:-1:-1;;;;;1359:16542:28;;;;;;;;;8667:26;1359:16542;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1359:16542:28;;;;;;;;;;;;;;;;;;;:::i;:::-;1303:62:4;;:::i;:::-;;;:::i;:::-;-1:-1:-1;;;;;1359:16542:28;;;;2402:22:4;1359:16542:28;;2496:8:4;;3895::28;2496::4;;:::i;:::-;3895::28;:::i;:::-;3947:12;;:::i;:::-;6474::1;;;;;:::i;:::-;1359:16542:28;;;6463:23:1;;;1359:16542:28;;;;;3438:6:1;1359:16542:28;;;;;;;;;;;;;;;;8400:149:1;;1359:16542:28;;;8400:149:1;1359:16542:28;;;3438:6:1;1359:16542:28;;;;;;;;;;;;;;;;;;;;8525:12:1;;:::i;:::-;1359:16542:28;8498:40:1;1359:16542:28;-1:-1:-1;;;;;;;;;;;8498:40:1;;;8400:149;;;1359:16542:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1359:16542:28;;;;;;;;-1:-1:-1;;;1359:16542:28;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1359:16542:28;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1359:16542:28;;;;;;;;;;-1:-1:-1;;1359:16542:28;;;;;;-1:-1:-1;;;;;1359:16542:28;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;1359:16542:28;;;;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;;;;;1359:16542:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3301:14:10;3347:34;;;;;;1359:16542:28;3346:108:10;;;;1359:16542:28;;;;;;;5366:69:10;1359:16542:28;;5366:69:10;1359:16542:28;;;;;;;;;;3562:65:10;;1359:16542:28;;;;;;5366:69:10;;;:::i;:::-;;;;:::i;:::-;1239:15:12;1359:16542:28;;-1:-1:-1;;;;1359:16542:28;;;5366:69:10;;;:::i;:::-;;:::i;:::-;1195:12:4;;;:::i;:::-;;:::i;:::-;1359:16542:28;;;;;;5366:69:10;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;1359:16542:28;2065:22:13;1359:16542:28;;;;:::i;:::-;;;;;:::i;:::-;5366:69:10;;;;:::i;:::-;1359:16542:28;;;-1:-1:-1;;;;;1359:16542:28;;;;;;;3063:12:22;1359:16542:28;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3063:12:22;1359:16542:28;;;;;-1:-1:-1;;;;;1359:16542:28;;;;;;;3085:18:22;1359:16542:28;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3085:18:22;1359:16542:28;;;3168:15:22;1359:16542:28;;3193:18:22;1359:16542:28;5366:69:10;1359:16542:28;;;;;;5366:69:10;:::i;:::-;1303:62:4;;:::i;:::-;1359:16542:28;;;;2402:22:4;1359:16542:28;;2496:8:4;1359:16542:28;;2496:8:4;:::i;:::-;17663:6:28;1359:16542;;17663:6;:::i;:::-;-1:-1:-1;;;;;;;;;;;1359:16542:28;;;;4934:6:1;1359:16542:28;;4934:22:1;1359:16542:28;;-1:-1:-1;;;;;;;;;;;1359:16542:28;;;;1620:29;;7690:52:1;;1620:29:28;;1359:16542;1692:23;7690:52:1;;1359:16542:28;7690:52:1;-1:-1:-1;;;;;;;;;;;1359:16542:28;;;;;;;;4934:22:1;1359:16542:28;;;;;;;;;7690:52:1;-1:-1:-1;;;;;1359:16542:28;;3223:60;;;1359:16542;;;;;;;;;3293:46;;1359:16542;;;;;;;;;3371:2;3349:24;1359:16542;3412:42;1359:16542;;;;;;;;;3647:99:10;;1359:16542:28;;3647:99:10;1359:16542:28;;;;;;;3721:14:10;1359:16542:28;;;;;;3721:14:10;1359:16542:28;;;;;-1:-1:-1;;;1359:16542:28;;;;;;;;;;;;;;;;;-1:-1:-1;;;1359:16542:28;;;;;;;;;;;-1:-1:-1;1359:16542:28;;;;;;;3085:18:22;1359:16542:28;;;;;;;-1:-1:-1;;1359:16542:28;;;;;;;;;;;;;;;;;;;;;;;;3085:18:22;1359:16542:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3085:18:22;1359:16542:28;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;1359:16542:28;;;;;-1:-1:-1;;;1359:16542:28;;;;;;;;;;;;-1:-1:-1;1359:16542:28;;;;;;;3063:12:22;1359:16542:28;;;;;;;-1:-1:-1;;1359:16542:28;;;;;;;;;;;;;;;;;;;;;;;;3063:12:22;1359:16542:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3063:12:22;1359:16542:28;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;-1:-1:-1;;;1359:16542:28;;;;;;;;3562:65:10;-1:-1:-1;;1359:16542:28;;;;;3562:65:10;;;1359:16542:28;;;-1:-1:-1;;;1359:16542:28;;;;;;;;;;;;;;;;;-1:-1:-1;;;1359:16542:28;;;;;;;3346:108:10;3426:4;;1713:19:17;:23;3387:66:10;;3346:108;3387:66;1359:16542:28;;;;;3436:17:10;3346:108;;3347:34;1359:16542:28;;;;;3365:16:10;3347:34;;1359:16542:28;;;;;;;;;;;;;;;-1:-1:-1;;1359:16542:28;;;;;;:::i;:::-;1303:62:4;;:::i;:::-;-1:-1:-1;;;;;1359:16542:28;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1829:26:28;1359:16542;;;7999:23:1;7995:149;;1359:16542:28;;;7995:149:1;1359:16542:28;;;3438:6:1;1359:16542:28;;;;;;;;;;;;;;;;;;;;;;8120:12:1;;:::i;:::-;1359:16542:28;8093:40:1;-1:-1:-1;;;;;;;;;;;1359:16542:28;8093:40:1;;7995:149;;;1359:16542:28;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1359:16542:28;;;;;;;;;;;;;;:::i;:::-;2712:7:13;;1359:16542:28;1830:1:13;1359:16542:28;;2712:19:13;1830:1;;;1359:16542:28;;10544:62;;1359:16542;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;11455:26;;;11296:195;;;;;;1359:16542;;;;;;;;;;971:66:8;;;;;;;;;;11296:195:28;;1359:16542;11296:195;;1359:16542;;;;;;;;;;;;;;;:::i;:::-;11296:195;;;;;;;;;;1359:16542;;;;;;;11296:195;1359:16542;;;;;;;11296:195;;;1359:16542;-1:-1:-1;;;1359:16542:28;;;;;;;;11296:195;1359:16542;;971:66:8;1359:16542:28;;971:66:8;;;;11296:195:28;1359:16542;;;;;;;;-1:-1:-1;;;1359:16542:28;;;;;;;;;;;;1830:1:13;1359:16542:28;;-1:-1:-1;;;1830:1:13;;1359:16542:28;1830:1:13;;;;;;;;;1359:16542:28;1830:1:13;1359:16542:28;;;1830:1:13;;;;1359:16542:28;;;;;;;;;;;-1:-1:-1;;1359:16542:28;;;;;;:::i;:::-;4495:12;;:::i;:::-;1359:16542;-1:-1:-1;;;;;;;;;;;1359:16542:28;;3438:6:1;1359:16542:28;;;;;;;;;;;;;;;;;;;;;;;4469:78;;;;1359:16542;4448:135;;;:::i;:::-;1359:16542;-1:-1:-1;;;;;1359:16542:28;;1201:30:29;1359:16542:28;;;1201:30:29;1359:16542:28;;;4469:78;1359:16542;4448:135;1359:16542;1513:6:4;1359:16542:28;;4535:12;;;:::i;:::-;1359:16542;4524:23;4469:78;;;;1359:16542;;;;;;;-1:-1:-1;;1359:16542:28;;;;5816:7:1;1359:16542:28;;;;:::i;:::-;;;;;4934:6:1;1359:16542:28;;2939:4:1;1359:16542:28;;;;4934:22:1;1359:16542:28;2939:4:1;:::i;:::-;5816:7;:::i;:::-;1359:16542:28;;;;;;;;;-1:-1:-1;;1359:16542:28;;;;;;:::i;:::-;1303:62:4;;:::i;:::-;-1:-1:-1;;;;;;;;;;;1359:16542:28;;;3438:6:1;1359:16542:28;;;;;;;;-1:-1:-1;;;;;1359:16542:28;;;;;;;;;;;1829:26;;1359:16542;;;;8400:149:1;;1359:16542:28;;;8400:149:1;1359:16542:28;;;3438:6:1;1359:16542:28;;;;;;;;;;;;;;;;;;;;8525:12:1;;:::i;:::-;1359:16542:28;8498:40:1;-1:-1:-1;;;;;;;;;;;8498:40:1;;;8400:149;;;1359:16542:28;;;;;;;;;;-1:-1:-1;;1359:16542:28;;;;;;;;;;;;;9057:6;1359:16542;;;9057:26;1359:16542;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;1102:17:29;1359:16542:28;;;-1:-1:-1;;;;;1359:16542:28;;;;;;;;;;;;;-1:-1:-1;;1359:16542:28;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1359:16542:28;;;;;;;;;;;;;;;;;;;13397:6;1359:16542;;;;;13389:57;1359:16542;;;;;;;;13389:57;:::i;:::-;-1:-1:-1;;;;;1359:16542:28;;;;;;;;;;;;13464:25;1359:16542;14270:45;13464:25;;;;13456:56;13464:25;;;;;13456:56;:::i;:::-;13522:90;13553:13;13530:36;;;13522:90;:::i;:::-;1359:16542;;;13630:23;1359:16542;;;13622:115;1359:16542;;;;;;13630:58;;13622:115;:::i;:::-;13865:12;;:::i;:::-;13905;;;;:::i;:::-;1359:16542;;;13891:13;1359:16542;;;;;13553:13;1359:16542;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;13813:340;;;1359:16542;13813:340;1359:16542;13813:340;;1359:16542;13553:13;1359:16542;13813:340;;1359:16542;;13813:340;;1359:16542;14058:4;1359:16542;13813:340;;1359:16542;13813:340;;;1359:16542;;;;:::i;:::-;;13813:340;;1359:16542;;;;;;;;;;;;971:66:8;;;;;;;;14270:45:28;;1359:16542;;14270:45;1359:16542;14270:45;;;:::i;:::-;;;;;;;;;;;;;;1359:16542;;14634:5;14596:34;14611:19;1359:16542;14596:34;;:::i;:::-;1359:16542;;;;;;;;;;;;;;;;-1:-1:-1;;;1359:16542:28;;;;;;;;14270:45;;;;;;;;;;;;;;;;;:::i;:::-;;;1359:16542;;;;;14270:45;;;;;;;;;;1359:16542;;;971:66:8;;;;;;;;1359:16542:28;;;;;;;;;;;;;;;;;1862:43;1359:16542;;;-1:-1:-1;;;;;1359:16542:28;;;;;;;;;;;;;;;-1:-1:-1;;1359:16542:28;;;;;;:::i;:::-;1303:62:4;;:::i;:::-;-1:-1:-1;;;;;;;;;;;1359:16542:28;;;3438:6:1;1359:16542:28;;;;;;;;-1:-1:-1;;;;;1359:16542:28;;;;;;;;;;;1620:29;;1359:16542;;;;7999:23:1;7995:149;;1359:16542:28;;;7995:149:1;1359:16542:28;;;3438:6:1;1359:16542:28;;;;;;;;;;;;;;;;;;;;;;8120:12:1;;:::i;:::-;1359:16542:28;8093:40:1;-1:-1:-1;;;;;;;;;;;8093:40:1;;;7995:149;;;1359:16542:28;;;;;;;;;;;;;;;;2522:34;1359:16542;;;-1:-1:-1;;;;;1359:16542:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1359:16542:28;;;;;14634:5;14596:34;14611:19;1359:16542;;;14596:34;:::i;:::-;1359:16542;;;;;;;;;;;;;;-1:-1:-1;;1359:16542:28;;;;;;:::i;:::-;4495:12;;:::i;:::-;-1:-1:-1;;;;;;;;;;;1359:16542:28;;3438:6:1;1359:16542:28;;;;;;;;-1:-1:-1;;;;;1359:16542:28;;;;;;;;;;;;;4469:78;;;;1359:16542;4448:135;;;:::i;:::-;1359:16542;;;;7488:23;1359:16542;;;;;;;-1:-1:-1;;;;;1359:16542:28;;;;;;;;;;4469:78;1359:16542;4448:135;1359:16542;1513:6:4;1359:16542:28;;4535:12;;;:::i;:::-;1359:16542;4524:23;4469:78;;;;1359:16542;;;;;;;-1:-1:-1;;1359:16542:28;;;;;;;;;;:::i;:::-;;;;;3438:6:1;1359:16542:28;;;;;-1:-1:-1;;;;;1359:16542:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1513:6:4;1359:16542:28;;;-1:-1:-1;;;;;1359:16542:28;;;;;;;;;;;;;;;;;;;;;7256:21;1359:16542;;;-1:-1:-1;;;;;1359:16542:28;;;;;;;;;;;;;;;;;;;;;5066:11:22;1359:16542:28;5066:16:22;:39;;;1359:16542:28;;;;;;;5671:5:22;1359:16542:28;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;5999:8:22;;1359:16542:28;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;1359:16542:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;5250:13:22;;1359:16542:28;;;;5285:4:22;1359:16542:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1359:16542:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1359:16542:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1359:16542:28;;;;;;;;;;;;-1:-1:-1;;;1359:16542:28;;;;;;;5066:39:22;1359:16542:28;5086:14:22;1359:16542:28;5086:19:22;5066:39;;1359:16542:28;;;;;;;;;;;;;5165:12;;:::i;:::-;-1:-1:-1;;;;;;;;;;;1359:16542:28;;3438:6:1;1359:16542:28;;;;;;;;-1:-1:-1;;;;;1359:16542:28;;;;;;;;;;;;;;;5144:89;;;;1359:16542;5144:129;;;;1359:16542;5123:186;;;:::i;:::-;1928:7:12;1359:16542:28;;;;;;;;-1:-1:-1;;;;1359:16542:28;-1:-1:-1;;;1359:16542:28;1928:7:12;1359:16542:28;2517:20:12;;1359:16542:28;2524:12:12;;:::i;:::-;1359:16542:28;;;;;;2517:20:12;1359:16542:28;;;;;-1:-1:-1;;;1359:16542:28;;;;;;;;;;;;;-1:-1:-1;;;1359:16542:28;;;;;;;5144:129;1359:16542;5123:186;1359:16542;1513:6:4;1359:16542:28;;5261:12;;;:::i;:::-;1359:16542;5250:23;5144:129;;;;:89;5220:12;;;:::i;:::-;-1:-1:-1;;;;;;;;;;;1359:16542:28;;3438:6:1;1359:16542:28;;;;;;;;;;;;;;;;;;5144:89;;1359:16542;;;;;;;;;;;;;;;;:::i;:::-;4495:12;;:::i;:::-;-1:-1:-1;;;;;;;;;;;1359:16542:28;;3438:6:1;1359:16542:28;;;;;;-1:-1:-1;;;;;1359:16542:28;;;;;;;;;;;;4469:78;;;;1359:16542;4448:135;;;:::i;:::-;-1:-1:-1;;;;;;;;;;;1359:16542:28;;;;3438:6:1;1359:16542:28;;;;;;;;;;;;;;;;;;;;7999:23:1;7995:149;;1359:16542:28;;;7995:149:1;1359:16542:28;;;3438:6:1;1359:16542:28;;;;;;;;;;;;;;;;;;;;;;8120:12:1;;:::i;:::-;1359:16542:28;8093:40:1;-1:-1:-1;;;;;;;;;;;8093:40:1;;;7995:149;;;;1359:16542:28;;;4469:78;1359:16542;4448:135;1359:16542;1513:6:4;1359:16542:28;;4535:12;;;:::i;:::-;1359:16542;4524:23;4469:78;;;;1359:16542;;;;;;;;;;;;;;2462:34;1359:16542;;;;;;;;;;;;;;-1:-1:-1;;1359:16542:28;;;;;;;;;;2113:59;1359:16542;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1359:16542:28;;;;4448:135;4495:12;;:::i;:::-;-1:-1:-1;;;;;;;;;;;1359:16542:28;;3438:6:1;1359:16542:28;;;;;;;;-1:-1:-1;;;;;1359:16542:28;;;;;;;;;;;;;;4469:78;;;;1359:16542;4448:135;;:::i;:::-;1359:16542;;7646:42;1359:16542;;;4469:78;1513:6:4;1359:16542:28;;;;-1:-1:-1;4535:12:28;;:::i;:::-;1359:16542;4524:23;4469:78;;;1359:16542;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1359:16542:28;;;;;;;;;;;;;;;;1303:62:4;;:::i;:::-;2758:6;1359:16542:28;;-1:-1:-1;;;;;;1359:16542:28;;;;;;;-1:-1:-1;;;;;1359:16542:28;2806:40:4;1359:16542:28;;2806:40:4;1359:16542:28;;;;;;;;;;;;;;;;;;:::i;:::-;4495:12;;:::i;:::-;-1:-1:-1;;;;;;;;;;;1359:16542:28;;3438:6:1;1359:16542:28;;;;;;-1:-1:-1;;;;;1359:16542:28;;;;;;;;;;;;4469:78;;;;1359:16542;4448:135;;;:::i;:::-;-1:-1:-1;;;;;;;;;;;1359:16542:28;;;;3438:6:1;1359:16542:28;;;;;;;;;;;;;;;;;;;;7999:23:1;7995:149;;1359:16542:28;;;4469:78;1359:16542;4448:135;1359:16542;1513:6:4;1359:16542:28;;4535:12;;;:::i;:::-;1359:16542;4524:23;4469:78;;;;1359:16542;;;;;;;;;;;;;;;;:::i;:::-;4495:12;;:::i;:::-;-1:-1:-1;;;;;;;;;;;1359:16542:28;;3438:6:1;1359:16542:28;;;;;;-1:-1:-1;;;;;1359:16542:28;;;;;;;;;;;;4469:78;;;;1359:16542;4448:135;;;:::i;:::-;-1:-1:-1;;;;;;;;;;;1359:16542:28;;;;3438:6:1;1359:16542:28;;;;;;;;;;;;;;;;;;;;8400:149:1;;1359:16542:28;;;8400:149:1;1359:16542:28;;;3438:6:1;1359:16542:28;;;;;;;;;;;;;;;;;;;;8525:12:1;;:::i;:::-;1359:16542:28;8498:40:1;-1:-1:-1;;;;;;;;;;;8498:40:1;;;8400:149;;;;1359:16542:28;;;4469:78;1359:16542;4448:135;1359:16542;1513:6:4;1359:16542:28;;4535:12;;;:::i;:::-;1359:16542;4524:23;4469:78;;;;1359:16542;;;;;;;-1:-1:-1;;1359:16542:28;;;;;;:::i;:::-;4495:12;;:::i;:::-;-1:-1:-1;;;;;;;;;;;1359:16542:28;;3438:6:1;1359:16542:28;;;;;;;;-1:-1:-1;;;;;1359:16542:28;;;;;;;;;;;;;4469:78;;;;1359:16542;4448:135;;;:::i;:::-;6812:60;1359:16542;;-1:-1:-1;;;;;1359:16542:28;;;;;;;;;;4469:78;1359:16542;4448:135;1359:16542;1513:6:4;1359:16542:28;;4535:12;;;:::i;:::-;1359:16542;4524:23;4469:78;;;;1359:16542;;;;;;;;;;;;;;;1928:7:12;1359:16542:28;;;;;;;;;;;;;-1:-1:-1;1359:16542:28;;-1:-1:-1;;1359:16542:28;;;;;;-1:-1:-1;;;;;1359:16542:28;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;;;;;1359:16542:28;;;;;;;;;;;:::i;:::-;;;;;;;11758:6;1359:16542;;11750:57;1359:16542;;;;;;;;11750:57;:::i;:::-;1359:16542;;11817:56;;-1:-1:-1;;;;;1359:16542:28;11825:25;;11817:56;:::i;:::-;11883:90;11914:13;1359:16542;;11891:36;;11883:90;:::i;:::-;1359:16542;;;;11991:23;1359:16542;;;;;;11983:115;;-1:-1:-1;;;;;1359:16542:28;11991:58;;11983:115;:::i;:::-;14634:5;14596:34;14611:19;1359:16542;12215:9;14596:34;:::i;:::-;1359:16542;12215:9;;12243:20;1359:16542;;12215:9;;;1359:16542;;;;12396:12;;:::i;:::-;14890:19;1359:16542;;-1:-1:-1;;;;;1359:16542:28;14890:33;;1359:16542;;14974:52;;;;;;;;;;;1359:16542;14974:52;;;;1359:16542;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;15041:94;1359:16542;;;15041:94;;12589:12;;:::i;:::-;1359:16542;-1:-1:-1;;;;;12629:12:28;;:::i;:::-;1359:16542;;;12615:13;1359:16542;;;;;11914:13;1359:16542;;;;;;;;;;;;;;;;;11991:23;1359:16542;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;12537:378;;1359:16542;;;;12537:378;;1359:16542;11914:13;1359:16542;12537:378;;1359:16542;;;;12537:378;;1359:16542;12782:4;1359:16542;12537:378;;1359:16542;12537:378;;;1359:16542;;12537:378;;1359:16542;;;;;;12940:12;;:::i;:::-;1359:16542;;;12615:13;1359:16542;;;;;11914:13;1359:16542;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11758:6;1359:16542;;;;;;;;;-1:-1:-1;;;13087:78:28;;1359:16542;;;;;;;;;-1:-1:-1;;;;;1359:16542:28;;;;13087:78;;1359:16542;;;;13087:78;;;:::i;:::-;;12215:9;;1359:16542;13087:78;;;;;;;;;1359:16542;;;13087:78;;;;;;;;;;:::i;:::-;;;1359:16542;;;;;;;;;;;-1:-1:-1;;;;;1359:16542:28;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;:::i;13087:78::-;1359:16542;;971:66:8;1359:16542:28;;971:66:8;;;;1359:16542:28;-1:-1:-1;;;1359:16542:28;;;;;;;;14974:52;1359:16542;;971:66:8;1359:16542:28;;971:66:8;;;;14974:52:28;;;;;1359:16542;;;-1:-1:-1;;;1359:16542:28;;;;;;;;;;;;;;;;;-1:-1:-1;;;1359:16542:28;;;;;;;;-1:-1:-1;;;1359:16542:28;;;;;;;;;;;-1:-1:-1;;;1359:16542:28;;;;;;;;;;;;;;;;;-1:-1:-1;;;1359:16542:28;;;;;;;;;;;;;;-1:-1:-1;;1359:16542:28;;;;;;;;;;;;8927:6;1359:16542;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1359:16542:28;;;;;;;:::i;:::-;1402:17:29;1359:16542:28;;;-1:-1:-1;;;;;1359:16542:28;;;;;;;1389:30:29;1359:16542:28;;;;;;;;;;;;;;;;;;;;4448:135;4495:12;;:::i;:::-;-1:-1:-1;;;;;;;;;;;1359:16542:28;;3438:6:1;1359:16542:28;;;;;;-1:-1:-1;;;;;1359:16542:28;;;;;;;;;;;;;4469:78;;;;4448:135;;:::i;:::-;1359:16542;;;8410:6;1359:16542;;;;8402:57;1359:16542;;;;;;;;8402:57;:::i;:::-;1359:16542;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;2333:6:11;-1:-1:-1;;;;;1359:16542:28;2324:4:11;2316:23;1359:16542:28;;;;;-1:-1:-1;;;;;;;;;;;1359:16542:28;;;;;;-1:-1:-1;;;1359:16542:28;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1359:16542:28;;-1:-1:-1;;1359:16542:28;;;;;;:::i;:::-;;;-1:-1:-1;;;;;1359:16542:28;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;1359:16542:28;;1898:6:11;1359:16542:28;;1873:80:11;1889:4;1881:23;;;1873:80;:::i;:::-;1963:87;-1:-1:-1;;;;;;;;;;;1359:16542:28;;;;;1971:30:11;1963:87;:::i;:::-;4168:12:28;;:::i;:::-;1359:16542;-1:-1:-1;;;;;;;;;;;1359:16542:28;;;;3438:6:1;1359:16542:28;;;;;;;;;;;;;;;;;;4145:75;;;;1359:16542;4124:132;;;:::i;:::-;971:66:8;1359:16542:28;;;;;;3330:17:8;;;;;;;:::i;3232:526::-;1359:16542:28;;;;;971:66:8;;;3383:63;;;;1359:16542:28;3383:63:8;;;;;;;;;3232:526;-1:-1:-1;3379:302:8;;1359:16542:28;;-1:-1:-1;;;3610:56:8;;1359:16542:28;3610:56:8;;971:66;;;;1359:16542:28;971:66:8;;1359:16542:28;971:66:8;1359:16542:28;;;971:66:8;-1:-1:-1;;;971:66:8;;;;;;3610:56;3379:302;3496:28;;;;;971:66;;2171:17;;;:::i;:::-;2204:27;;;;1359:16542:28;;2523:15:8;;;:28;;;3379:302;2519:123;;3379:302;3232:526;;;1359:16542:28;;2519:123:8;7318:69:17;1359:16542:28;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;1359:16542:28;;;;7276:25:17;;;;;;;;;1359:16542:28;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;7318:69:17;:::i;:::-;;2519:123:8;;;;;1359:16542:28;;;-1:-1:-1;7318:69:17;:::i;2523:28:8:-;;1359:16542:28;2523:28:8;;971:66;1359:16542:28;;-1:-1:-1;;;971:66:8;;1359:16542:28;971:66:8;;;;;;1359:16542:28;971:66:8;;1359:16542:28;971:66:8;1359:16542:28;;;971:66:8;-1:-1:-1;;;971:66:8;;;;;;;3383:63;;;;;;;;;;;;;;;;;:::i;:::-;;;971:66;;;;;3383:63;;;;;;;;;4145:75:28;1359:16542;4124:132;1359:16542;1513:6:4;1359:16542:28;;4208:12;;;:::i;:::-;1359:16542;4197:23;4145:75;;;;1359:16542;;;;;;;-1:-1:-1;;1359:16542:28;;;;;;:::i;:::-;1303:62:4;;:::i;:::-;-1:-1:-1;;;;;;;;;;;1359:16542:28;;;3438:6:1;1359:16542:28;;;;;;;;-1:-1:-1;;;;;1359:16542:28;;;;;;;;;;;1620:29;;1359:16542;;;;8400:149:1;;1359:16542:28;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1359:16542:28;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;1359:16542:28;;;;;2321:93;1359:16542;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5165:12;;:::i;:::-;-1:-1:-1;;;;;;;;;;;1359:16542:28;;3438:6:1;1359:16542:28;;;;;;;;-1:-1:-1;;;;;1359:16542:28;;;;;;;;;;;;;;;5144:89;;;;1359:16542;5144:129;;;;1359:16542;5123:186;;;:::i;:::-;1928:7:12;1359:16542:28;;;;;;;;;-1:-1:-1;;;;1359:16542:28;1928:7:12;1359:16542:28;2764:22:12;;1359:16542:28;2773:12:12;;:::i;1359:16542:28:-;;;-1:-1:-1;;;1359:16542:28;;;;;;;;;;;;;-1:-1:-1;;;1359:16542:28;;;;;;;5144:129;1359:16542;5123:186;1359:16542;1513:6:4;1359:16542:28;;5261:12;;;:::i;:::-;1359:16542;5250:23;5144:129;;;;:89;5220:12;;;:::i;:::-;-1:-1:-1;;;;;;;;;;;1359:16542:28;;3438:6:1;1359:16542:28;;;;;;;;;;;;;;;;;;5144:89;;1359:16542;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;1898:6:11;1359:16542:28;;1873:80:11;1889:4;1881:23;;;1873:80;:::i;:::-;1963:87;-1:-1:-1;;;;;;;;;;;1359:16542:28;;;;;1971:30:11;1963:87;:::i;:::-;4168:12:28;;:::i;:::-;-1:-1:-1;;;;;;;;;;;1359:16542:28;;3438:6:1;1359:16542:28;;;;;;;;;;;;;;;;;;4145:75;;;;1359:16542;4124:132;;;:::i;:::-;1359:16542;;;;;;;;;;-1:-1:-1;;;;;1359:16542:28;;;;;;;;;;;;971:66:8;1359:16542:28;;3232:526:8;1359:16542:28;;;3330:17:8;;;;;;;;:::i;3232:526::-;1359:16542:28;;;;;;;;971:66:8;;;3383:63;;;;1359:16542:28;3383:63:8;;;;;;;;;3232:526;-1:-1:-1;3379:302:8;;1359:16542:28;;-1:-1:-1;;;3610:56:8;;1359:16542:28;3610:56:8;;971:66;;;;;;;1359:16542:28;971:66:8;1359:16542:28;;;971:66:8;-1:-1:-1;;;971:66:8;;;;;;3610:56;3379:302;3496:28;;;;;971:66;;2171:17;;;:::i;:::-;2204:27;;;;1359:16542:28;;;2523:15:8;;;:28;;;3379:302;2519:123;;3379:302;3232:526;;;;;1359:16542:28;;2519:123:8;1359:16542:28;7318:69:17;1359:16542:28;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;1359:16542:28;;;;7276:25:17;;;;;;1359:16542:28;;;;;;;;:::i;7318:69:17:-;;2519:123:8;;;;;;;2523:28;;;;;971:66;1359:16542:28;;-1:-1:-1;;;971:66:8;;1359:16542:28;971:66:8;;;;;;;;;1359:16542:28;971:66:8;1359:16542:28;;;971:66:8;-1:-1:-1;;;971:66:8;;;;;;;3383:63;;;;;;;;;;;;;;;;;:::i;:::-;;;971:66;;;;;3383:63;;;;971:66;1359:16542:28;;;3383:63:8;;;;;4145:75:28;1359:16542;4124:132;1359:16542;1513:6:4;1359:16542:28;;4208:12;;;:::i;:::-;1359:16542;4197:23;4145:75;;;;1359:16542;;;;;;;-1:-1:-1;;1359:16542:28;;;;;;:::i;:::-;-1:-1:-1;;;;;1359:16542:28;6474:12:1;;:::i;:::-;1359:16542:28;;;;6463:23:1;1359:16542:28;;6567:7:1;1359:16542:28;;;6567:7:1;:::i;1359:16542:28:-;;;-1:-1:-1;;;1359:16542:28;;;;;;;;;;;;;;;;;-1:-1:-1;;;1359:16542:28;;;;;;;;;;;;;;-1:-1:-1;;1359:16542:28;;;;;;:::i;:::-;4495:12;;:::i;:::-;-1:-1:-1;;;;;;;;;;;1359:16542:28;;3438:6:1;1359:16542:28;;;;;;;;-1:-1:-1;;;;;1359:16542:28;;;;;;;;;;;;;4469:78;;;;1359:16542;4448:135;;;:::i;:::-;6983:46;1359:16542;;-1:-1:-1;;;;;1359:16542:28;;;;;;;;;;4469:78;1359:16542;4448:135;1359:16542;1513:6:4;1359:16542:28;;4535:12;;;:::i;:::-;1359:16542;4524:23;4469:78;;;;1359:16542;;;;;;;-1:-1:-1;;1359:16542:28;;;;;;;;:::i;:::-;;;;4934:6:1;1359:16542:28;;2939:4:1;1359:16542:28;;;;4934:22:1;1359:16542:28;2939:4:1;:::i;:::-;1359:16542:28;;;4934:6:1;1359:16542:28;;;;;;;;-1:-1:-1;;;;;1359:16542:28;;;;;;;;;;;;;;;;7999:23:1;7995:149;;1359:16542:28;;;;;;;;;;-1:-1:-1;;1359:16542:28;;;;-1:-1:-1;;;;;1359:16542:28;;;;;;;;;;;;;;;;:::i;:::-;4495:12;;;:::i;:::-;-1:-1:-1;;;;;;;;;;;1359:16542:28;;3438:6:1;1359:16542:28;;;;;;;;-1:-1:-1;;;;;1359:16542:28;;;;;;;;;;;;;4448:135;;1359:16542;;;4469:78;;;;4448:135;;:::i;:::-;1359:16542;;;9699:6;1359:16542;;;;9691:57;1359:16542;;;;;;;;9691:57;:::i;:::-;1359:16542;;;;;;;;;;9758:26;1359:16542;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1359:16542:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1359:16542:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;-1:-1:-1;;;1359:16542:28;;;;;;;;;;;;;;;-1:-1:-1;;1359:16542:28;;;;;;;;;;;;4934:6:1;1359:16542:28;;;4934:22:1;1359:16542:28;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;1359:16542:28;;;;;2178:89;1359:16542;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1359:16542:28;;;;;;;;;;8797:6;1359:16542;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4495:12;;:::i;:::-;-1:-1:-1;;;;;;;;;;;1359:16542:28;;3438:6:1;1359:16542:28;;;;;;-1:-1:-1;;;;;1359:16542:28;;;;;;;;;;;;4469:78;;;;1359:16542;4448:135;;;:::i;:::-;-1:-1:-1;;;;;;;;;;;1359:16542:28;;;;3438:6:1;1359:16542:28;;;;;;;;;;;;;;;;;;;;8400:149:1;;1359:16542:28;;;4469:78;1359:16542;4448:135;1359:16542;1513:6:4;1359:16542:28;;4535:12;;;:::i;:::-;1359:16542;4524:23;4469:78;;;;1359:16542;;;;;;;-1:-1:-1;;1359:16542:28;;;;;;;;:::i;:::-;4495:12;;:::i;:::-;1359:16542;-1:-1:-1;;;;;;;;;;;1359:16542:28;;3438:6:1;1359:16542:28;;;;;;;;;;;;;;;;;;;;;;;4469:78;;;;1359:16542;4448:135;;;:::i;:::-;1359:16542;9202:27;9194:58;9202:27;;;9194:58;:::i;:::-;1359:16542;;;9270:6;1359:16542;;;;9262:57;1359:16542;;;;;;;;9262:57;:::i;:::-;1359:16542;;;;;;;;;-1:-1:-1;;;;;;1359:16542:28;;;;;;;;4469:78;1359:16542;4448:135;1359:16542;1513:6:4;1359:16542:28;;4535:12;;;:::i;:::-;1359:16542;4524:23;4469:78;;;;1359:16542;;;;;;;-1:-1:-1;;1359:16542:28;;;;;;;;;;;;;;;;;;-1:-1:-1;;;3137:58:1;;;:98;;;;1359:16542:28;;;;;;;;;;3137:98:1;-1:-1:-1;;;1168:51:23;;-1:-1:-1;3137:98:1;;;1359:16542:28;;;;;;;-1:-1:-1;;1359:16542:28;;;;;;;;;;;;;;;9545:35;4495:12;4448:135;4495:12;;:::i;:::-;-1:-1:-1;;;;;;;;;;;1359:16542:28;;3438:6:1;1359:16542:28;;;;;;;;-1:-1:-1;;;;;1359:16542:28;;;;;;;;;;;;;;4469:78;;;;4448:135;;:::i;:::-;1359:16542;;;9486:6;1359:16542;;;;9478:57;1359:16542;;;;;;;;9478:57;:::i;:::-;1359:16542;;;;;;;;;-1:-1:-1;;;;1359:16542:28;;;;;;-1:-1:-1;;;1359:16542:28;;;;;;;;;;;;;;;-1:-1:-1;;1359:16542:28;;;;;;;;:::i;:::-;-1:-1:-1;;;;;1359:16542:28;;;;;;;;;;;;;;:::i;:::-;4495:12;;;:::i;:::-;1359:16542;-1:-1:-1;;;;;;;;;;;1359:16542:28;;;;3438:6:1;1359:16542:28;;;;;;;;;;;;;;;;;;;;;;;;;;4469:78;;;;1359:16542;4448:135;;;:::i;:::-;1359:16542;8121:58;8129:27;;;8121:58;:::i;:::-;1359:16542;;;8198:6;1359:16542;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8276:42;;;1359:16542;;;8276:42;;;1359:16542;;;;;;;;;;;;;;;;;-1:-1:-1;;;1359:16542:28;;;;;;-1:-1:-1;;;;;;1359:16542:28;;;;;-1:-1:-1;;;;1359:16542:28;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1359:16542:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;-1:-1:-1;;;1359:16542:28;;;;;;;;;;;-1:-1:-1;;;1359:16542:28;;;;;;;;;;;;;-1:-1:-1;;;1359:16542:28;;;;;;;4469:78;1359:16542;4448:135;1359:16542;1513:6:4;1359:16542:28;;4535:12;;;:::i;:::-;1359:16542;4524:23;4469:78;;;;1359:16542;;;;-1:-1:-1;;;;;1359:16542:28;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;1359:16542:28;;;;;;:::o;:::-;;;-1:-1:-1;;;;;1359:16542:28;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;1359:16542:28;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1359:16542:28;;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;1359:16542:28;;;;;;;:::o;:::-;-1:-1:-1;;;;;1359:16542:28;;;;;;-1:-1:-1;;1359:16542:28;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;1359:16542:28;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;;;;;;;;-1:-1:-1;;;;;1359:16542:28;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;-1:-1:-1;;;;;1359:16542:28;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;1359:16542:28;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;-1:-1:-1;;1359:16542:28;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;;1359:16542:28;;;;:::o;3768:103:1:-;3851:12;;:::i;:::-;-1:-1:-1;;1359:16542:28;;;;;;3438:6:1;1359:16542:28;;;;;;;;;;;;;;;;;;;;;;;;;;4239:23:1;4235:412;;3768:103;;;;;:::o;4235:412::-;1359:16542:28;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;2041:15:20;;;1359:16542:28;;;;;;;;;;2066:15:20;1359:16542:28;;;2066:15:20;1359:16542:28;2124:5:20;;;;;;2236:10;311:18;;1359:16542:28;;;;;;;;;-1:-1:-1;;;;;1359:16542:28;;;;;;;;;;;;;;;;;;;;;;;2041:15:20;;;1359:16542:28;;;;;;;;2066:15:20;1359:16542:28;;;2066:15:20;1359:16542:28;2091:128:20;2124:5;;;;;;2236:10;;;311:18;;1359:16542:28;;;;4330:274:1;1359:16542:28;;;;;;;4330:274:1;;;1359:16542:28;4330:274:1;;;1359:16542:28;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;;1359:16542:28;;;;;;;;;;;;:::i;:::-;;4330:274:1;;;;;;;;;:::i;:::-;1359:16542:28;;;;;;;4278:358:1;;2207:1:20;4278:358:1;;1359:16542:28;;;;;;:::i;:::-;4278:358:1;;;311:18:20;;1359:16542:28;;;;;;;311:18:20;;;2207:1;311:18;;;;;;1359:16542:28;311:18:20;1359:16542:28;;;311:18:20;;2131:3;2171:11;;;2179:3;2171:11;;2162:21;;;;;;-1:-1:-1;;;2162:21:20;;2150:33;;;;:::i;:::-;;2207:1;1359:16542:28;2131:3:20;1359:16542:28;;;;-1:-1:-1;;1359:16542:28;;2096:26:20;;;1359:16542:28;-1:-1:-1;;;1359:16542:28;;;2207:1:20;1359:16542:28;;;;2162:21:20;-1:-1:-1;;;1359:16542:28;;;2207:1:20;1359:16542:28;;;;;-1:-1:-1;;;1359:16542:28;;;2207:1:20;1359:16542:28;;;;311:18:20;;1359:16542:28;;;;;;;311:18:20;;;2207:1;311:18;;;;;;1359:16542:28;311:18:20;1359:16542:28;;;311:18:20;;2131:3;2171:11;2179:3;2171:11;;2162:21;;;;;;-1:-1:-1;;;2162:21:20;;2150:33;;;;:::i;:::-;;2207:1;1359:16542:28;2131:3:20;1359:16542:28;;;;-1:-1:-1;;1359:16542:28;2096:26:20;;1359:16542:28;-1:-1:-1;;;1359:16542:28;;;2207:1:20;1359:16542:28;;;;2162:21:20;-1:-1:-1;;;1359:16542:28;;;2207:1:20;1359:16542:28;;;;;-1:-1:-1;;;1359:16542:28;;;;;;;;;-1:-1:-1;;;1359:16542:28;;;;;;;;7917:233:1;-1:-1:-1;;;;;1359:16542:28;;;;;;;;;;;;;;;;;;;7999:23:1;7995:149;;7917:233;;;:::o;7995:149::-;1359:16542:28;;;3438:6:1;1359:16542:28;;;;;;;;;;;;;;;;;;;;;;8120:12:1;;:::i;:::-;1359:16542:28;8093:40:1;-1:-1:-1;;;;;;;;;;;8093:40:1;;;7917:233::o;8321:234::-;-1:-1:-1;1359:16542:28;;;3438:6:1;1359:16542:28;;;;;;;;-1:-1:-1;;;;;1359:16542:28;;;;;;;;;;;-1:-1:-1;;1359:16542:28;;8321:234:1;1359:16542:28;;8400:149:1;;8321:234;;;;;:::o;8400:149::-;-1:-1:-1;;;;;;;;;;;1359:16542:28;;;;3438:6:1;1359:16542:28;;;;;;;;;;;;;;;;;;;;8525:12:1;;:::i;:::-;1359:16542:28;8498:40:1;;;8400:149;;;;;;1599:130:4;1513:6;1359:16542:28;-1:-1:-1;;;;;1359:16542:28;;;;1673:12:4;;:::i;:::-;1359:16542:28;1662:23:4;1359:16542:28;;1599:130:4:o;1359:16542:28:-;;;;;;;;;;;;;;;;;;;;;;;;;2666:187:4;2758:6;1359:16542:28;;-1:-1:-1;;;;;1359:16542:28;;;-1:-1:-1;;;;;;1359:16542:28;;;;;;;;;;2806:40:4;-1:-1:-1;;2806:40:4;2666:187::o;1359:16542:28:-;;;;:::o;:::-;;;-1:-1:-1;;;1359:16542:28;;;;;;;;;;;;;;;;;-1:-1:-1;;;1359:16542:28;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;1359:16542:28;;;;;;;;;;;;;;;;;-1:-1:-1;;;1359:16542:28;;;;;;;1699:281:8;1713:19:17;;:23;1359:16542:28;;-1:-1:-1;;;;;;;;;;;1359:16542:28;;-1:-1:-1;;;;;;1359:16542:28;-1:-1:-1;;;;;1359:16542:28;;;;;;;;;1699:281:8:o;1359:16542:28:-;;;-1:-1:-1;;;1359:16542:28;;;;;;;;;;;;;;;;;-1:-1:-1;;;1359:16542:28;;;;;;;7682:628:17;;;;7886:418;;;1359:16542:28;;;7917:22:17;7913:286;;8212:17;;:::o;7913:286::-;1713:19;:23;1359:16542:28;;8212:17:17;:::o;1359:16542:28:-;;;-1:-1:-1;;;1359:16542:28;;;;;;;;;;;;;;;;;;;;7886:418:17;1359:16542:28;;;;-1:-1:-1;8991:21:17;:17;;9163:142;;;;;;;8987:379;1359:16542:28;;-1:-1:-1;;;9335:20:17;;1359:16542:28;9335:20:17;;;1359:16542:28;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1359:16542:28;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;-1:-1:-1;1359:16542:28;;;;-1:-1:-1;1359:16542:28;;-1:-1:-1;1359:16542:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1359:16542:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;1359:16542:28;;;;;;;;;;;;;;;;;-1:-1:-1;;;1359:16542:28;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;1359:16542:28;;;;;;;;;;;;-1:-1:-1;;;1359:16542:28;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;1359:16542:28;;;;;;;;;;;;-1:-1:-1;;;1359:16542:28;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;1359:16542:28;;;;;;;;;;;;-1:-1:-1;;;1359:16542:28;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;1359:16542:28;;;;;;;;;;;;;;;;;-1:-1:-1;;;1359:16542:28;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;1359:16542:28;;;;;;;;;;;;;;;;;-1:-1:-1;;;1359:16542:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::o;16581:511::-;1402:17:29;1359:16542:28;-1:-1:-1;;;;;1359:16542:28;16730:10;1389:30:29;;;16711:55:28;;16581:511;16707:379;;;-1:-1:-1;16923:97:28;-1:-1:-1;;16923:97:28;;;;;16581:511::o;16707:379::-;1578:2:29;1559:8;:21;;:55;;;;16707:379:28;-1:-1:-1;1555:456:29;;;1559:8;-1:-1:-1;;1862:92:29;;;;;17050:25:28:o;1555:456:29:-;16730:10:28;17050:25;:::o;1559:55:29:-;;;;;;16711::28;16745:8;16764:2;16745:8;:21;;16711:55;"},"gasEstimates":{"creation":{"codeDepositCost":"3370600","executionCost":"infinite","totalCost":"infinite"},"external":{"ADMIN_ROLE()":"845","DEFAULT_ADMIN_ROLE()":"1079","PAUSER_ROLE()":"1395","SUPER_ADMIN_ROLE()":"559","UPGRADER_ROLE()":"1439","addAdmin(address)":"infinite","addPauser(address)":"infinite","addRoute(uint256,address,string)":"infinite","addSuperAdmin(address)":"infinite","addUpgrader(address)":"infinite","crossSyncFeeAddress()":"3225","crossSyncFeePercent()":"2981","destChainGatewayAddress(uint256)":"3046","eip712Domain()":"infinite","getFee(uint256,uint256,(address,bytes),uint256)":"infinite","getNativeCurrencyAddress()":"3093","getNativeWrappedCurrencyAddress()":"2565","getRoleAdmin(bytes32)":"2481","getRoute(uint256)":"infinite","getRouteAddress(uint256)":"2452","getRouteName(uint256)":"infinite","getRouteValidity(uint256)":"2845","getSyncFee(uint256)":"3251","getTrustedForwarder()":"3313","grantRole(bytes32,address)":"infinite","handleReceive(bytes)":"infinite","hasRole(bytes32,address)":"3348","initialize(string,string,address,address,address,address)":"infinite","isTrustedForwarder(address)":"2848","nativeCurrencyAddress()":"2587","nativeCurrencyWrappedAddress()":"3269","owner()":"3115","pause()":"infinite","paused()":"2823","proxiableUUID()":"infinite","receiveUserNonceSeen(address,uint256,uint256)":"2923","removeAdmin(address)":"infinite","removePauser(address)":"infinite","removeRoute(uint256)":"infinite","removeSuperAdmin(address)":"infinite","removeUpgrader(address)":"infinite","renounceOwnership()":"31014","renounceRole(bytes32,address)":"infinite","revokeRole(bytes32,address)":"infinite","sendMessage(uint256,uint256,(address,bytes),uint256,bytes)":"infinite","sentUserNonce(address,uint256,uint256)":"2691","setCrossSyncFee(uint256)":"infinite","setCrossSyncFeeAddress(address)":"infinite","setDestChainGatewayAddress(uint256,address)":"infinite","setNativeCurrencyAddress(address)":"infinite","setNativeWrappedCurrencyAddress(address)":"infinite","setRouteAddress(uint256,address)":"infinite","setRouteName(uint256,string)":"infinite","setRouteValidity(uint256,bool)":"infinite","setTrustedForwarder(address)":"infinite","supportsInterface(bytes4)":"320","transferOwnership(address)":"infinite","unpause()":"infinite","upgradeTo(address)":"infinite","upgradeToAndCall(address,bytes)":"infinite"},"internal":{"__setOwner__(address)":"infinite","_authorizeUpgrade(address)":"infinite","_giveTokenApproval(address,address,uint256)":"infinite","_handleReceive(bytes calldata)":"infinite","_msgData()":"infinite","_msgSender()":"2288","_transferNativeSyncFee(address,uint256,uint256,uint256,uint256)":"infinite","_transferToken(address,address,address,uint256)":"infinite","_verifyAdmin(bytes32,bytes memory)":"infinite"}},"methodIdentifiers":{"ADMIN_ROLE()":"75b238fc","DEFAULT_ADMIN_ROLE()":"a217fddf","PAUSER_ROLE()":"e63ab1e9","SUPER_ADMIN_ROLE()":"4460bdd6","UPGRADER_ROLE()":"f72c0d8b","addAdmin(address)":"70480275","addPauser(address)":"82dc1ec4","addRoute(uint256,address,string)":"004c7591","addSuperAdmin(address)":"b3292ff0","addUpgrader(address)":"e5110158","crossSyncFeeAddress()":"acb7176b","crossSyncFeePercent()":"8262c317","destChainGatewayAddress(uint256)":"7faf251c","eip712Domain()":"84b0196e","getFee(uint256,uint256,(address,bytes),uint256)":"c50189b8","getNativeCurrencyAddress()":"8898009d","getNativeWrappedCurrencyAddress()":"36d8261a","getRoleAdmin(bytes32)":"248a9ca3","getRoute(uint256)":"fa66358a","getRouteAddress(uint256)":"196c881e","getRouteName(uint256)":"d10a0da3","getRouteValidity(uint256)":"59b52ca4","getSyncFee(uint256)":"9ef42cbb","getTrustedForwarder()":"ce1b815f","grantRole(bytes32,address)":"2f2ff15d","handleReceive(bytes)":"e34381a1","hasRole(bytes32,address)":"91d14854","initialize(string,string,address,address,address,address)":"e56f2fe4","isTrustedForwarder(address)":"572b6c05","nativeCurrencyAddress()":"38073f0c","nativeCurrencyWrappedAddress()":"bd826ed7","owner()":"8da5cb5b","pause()":"8456cb59","paused()":"5c975abb","proxiableUUID()":"52d1902d","receiveUserNonceSeen(address,uint256,uint256)":"4429c25f","removeAdmin(address)":"1785f53c","removePauser(address)":"6b2c0f55","removeRoute(uint256)":"56e3008b","removeSuperAdmin(address)":"4902e4aa","removeUpgrader(address)":"d264a803","renounceOwnership()":"715018a6","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f","sendMessage(uint256,uint256,(address,bytes),uint256,bytes)":"5c96a561","sentUserNonce(address,uint256,uint256)":"1fa5d2e7","setCrossSyncFee(uint256)":"7d0517d0","setCrossSyncFeeAddress(address)":"fde278bc","setDestChainGatewayAddress(uint256,address)":"98c33904","setNativeCurrencyAddress(address)":"32495ce1","setNativeWrappedCurrencyAddress(address)":"6050cafe","setRouteAddress(uint256,address)":"09b7d791","setRouteName(uint256,string)":"2b33cc87","setRouteValidity(uint256,bool)":"005e8eef","setTrustedForwarder(address)":"da742228","supportsInterface(bytes4)":"01ffc9a7","transferOwnership(address)":"f2fde38b","unpause()":"3f4ba83a","upgradeTo(address)":"3659cfe6","upgradeToAndCall(address,bytes)":"4f1ef286"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"destinationChainId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"routeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"}],\"name\":\"SyncFeeCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SUPER_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_routeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_routeAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_routeName\",\"type\":\"string\"}],\"name\":\"addRoute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_superAdmin\",\"type\":\"address\"}],\"name\":\"addSuperAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_upgrader\",\"type\":\"address\"}],\"name\":\"addUpgrader\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crossSyncFeeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crossSyncFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"destChainGatewayAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_destinationChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_routeId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct ICrossSyncGateway.MessagingPayload\",\"name\":\"_payload\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_gasLimit\",\"type\":\"uint256\"}],\"name\":\"getFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNativeCurrencyAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNativeWrappedCurrencyAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_routeId\",\"type\":\"uint256\"}],\"name\":\"getRoute\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_routeId\",\"type\":\"uint256\"}],\"name\":\"getRouteAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_routeId\",\"type\":\"uint256\"}],\"name\":\"getRouteName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_routeId\",\"type\":\"uint256\"}],\"name\":\"getRouteValidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"messengerFee\",\"type\":\"uint256\"}],\"name\":\"getSyncFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTrustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"handleReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_version\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_nativeCurrencyWrappedAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nativeCurrencyAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_crossSyncFeeAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nativeCurrencyAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nativeCurrencyWrappedAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"receiveUserNonceSeen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pauser\",\"type\":\"address\"}],\"name\":\"removePauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_routeId\",\"type\":\"uint256\"}],\"name\":\"removeRoute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_superAdmin\",\"type\":\"address\"}],\"name\":\"removeSuperAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_upgrader\",\"type\":\"address\"}],\"name\":\"removeUpgrader\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_destinationChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_routeId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct ICrossSyncGateway.MessagingPayload\",\"name\":\"_payload\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_routeData\",\"type\":\"bytes\"}],\"name\":\"sendMessage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sentUserNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_crossSyncFeePercent\",\"type\":\"uint256\"}],\"name\":\"setCrossSyncFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_crossSyncFeeAddress\",\"type\":\"address\"}],\"name\":\"setCrossSyncFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"crossSyncGatewayAddress\",\"type\":\"address\"}],\"name\":\"setDestChainGatewayAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nativeCurrencyAddress\",\"type\":\"address\"}],\"name\":\"setNativeCurrencyAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nativeCurrencyWrappedAddress\",\"type\":\"address\"}],\"name\":\"setNativeWrappedCurrencyAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_routeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_routeAddress\",\"type\":\"address\"}],\"name\":\"setRouteAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_routeId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_routeName\",\"type\":\"string\"}],\"name\":\"setRouteName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_routeId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isValid\",\"type\":\"bool\"}],\"name\":\"setRouteValidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newtrustedForwarder\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"eip712Domain()\":{\"details\":\"See {EIP-5267}. _Available since v4.9._\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getTrustedForwarder()\":{\"returns\":{\"forwarder\":\"The address of the Forwarder contract that is being used.\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"The address of the Forwarder contract that is being used.\"},\"returns\":{\"_0\":\"isTrustedForwarder `true` if the Forwarder is trusted to forward relayed transactions by this Recipient.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"overriding the inherited {transferOwnership} function to reflect the admin changes into the {DEFAULT_ADMIN_ROLE}\"},\"upgradeTo(address)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getTrustedForwarder()\":{\"notice\":\":warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.Method is not a required method to allow Recipients to trust multiple Forwarders. Not recommended yet.\"},\"isTrustedForwarder(address)\":{\"notice\":\":warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CrossSyncGateway.sol\":\"CrossSyncGateway\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"./AccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\\n    function __AccessControlEnumerable_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControlEnumerable_init_unchained() internal onlyInitializing {\\n    }\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc2dfd6ba9449f61b6b03b262182faf302f093a8c05dd10792aeecb4ed1663c0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xfeefb24d068524440e1ba885efdf105d91f83504af3c2d745ffacc4595396831\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7acbc538aad6eb4614e26612a8c5c0149bb8808db95e2638d245a8365f63e572\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x47d6e06872b12e72c79d1b5eb55842f860b5fb1207b2317c2358d2766b950a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC5267Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC5267Upgradeable {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\",\"keccak256\":\"0xe562dab443278837fa50faddb76743399e942181881db8dccaea3bd1712994db\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x584ebdf9c1118a7c773f98788e3f3ede01982bdf8932aa06f5acc7d54876e161\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb607cb94c27e89750f5ae2ccebcb94e654e926f6125f4fd4c6262c89875118ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb82ef33f43b6b96109687d91b39c94573fdccaaa423fe28e8ba0977b31c023e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xd60f939a3ca0199014d079b4dd66aa757954334947d81eb5c1d35d7a83061ab3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// EIP-2612 is Final as of 2022-11-01. This file is deprecated.\\n\\nimport \\\"./IERC20PermitUpgradeable.sol\\\";\\n\",\"keccak256\":\"0x5225f0310a2992589600ebddffd0dd512a61836bda672b46744b416765d7ac31\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x07ac95acad040f1fb1f6120dd0aa5f702db69446e95f82613721879d30de0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0xa014f65d84b02827055d99993ccdbfb4b56b2c9e91eb278d82a93330659d06e4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"./ECDSAUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC5267Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the `_domainSeparatorV4` function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * _Available since v3.4._\\n *\\n * @custom:storage-size 52\\n */\\nabstract contract EIP712Upgradeable is Initializable, IERC5267Upgradeable {\\n    bytes32 private constant _TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /// @custom:oz-renamed-from _HASHED_NAME\\n    bytes32 private _hashedName;\\n    /// @custom:oz-renamed-from _HASHED_VERSION\\n    bytes32 private _hashedVersion;\\n\\n    string private _name;\\n    string private _version;\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\\n        _name = name;\\n        _version = version;\\n\\n        // Reset prior values in storage if upgrading\\n        _hashedName = 0;\\n        _hashedVersion = 0;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator();\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash(), block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {EIP-5267}.\\n     *\\n     * _Available since v4.9._\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        override\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        // If the hashed name and version in storage are non-zero, the contract hasn't been properly initialized\\n        // and the EIP712 domain is not reliable, as it will be missing name and version.\\n        require(_hashedName == 0 && _hashedVersion == 0, \\\"EIP712: Uninitialized\\\");\\n\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _EIP712Name(),\\n            _EIP712Version(),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n\\n    /**\\n     * @dev The name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712Name() internal virtual view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev The version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712Version() internal virtual view returns (string memory) {\\n        return _version;\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Name` instead.\\n     */\\n    function _EIP712NameHash() internal view returns (bytes32) {\\n        string memory name = _EIP712Name();\\n        if (bytes(name).length > 0) {\\n            return keccak256(bytes(name));\\n        } else {\\n            // If the name is empty, the contract may have been upgraded without initializing the new storage.\\n            // We return the name hash in storage if non-zero, otherwise we assume the name is empty by design.\\n            bytes32 hashedName = _hashedName;\\n            if (hashedName != 0) {\\n                return hashedName;\\n            } else {\\n                return keccak256(\\\"\\\");\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Version` instead.\\n     */\\n    function _EIP712VersionHash() internal view returns (bytes32) {\\n        string memory version = _EIP712Version();\\n        if (bytes(version).length > 0) {\\n            return keccak256(bytes(version));\\n        } else {\\n            // If the version is empty, the contract may have been upgraded without initializing the new storage.\\n            // We return the version hash in storage if non-zero, otherwise we assume the version is empty by design.\\n            bytes32 hashedVersion = _hashedVersion;\\n            if (hashedVersion != 0) {\\n                return hashedVersion;\\n            } else {\\n                return keccak256(\\\"\\\");\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[48] private __gap;\\n}\\n\",\"keccak256\":\"0xeb8d6be406a373771724922eb41b5d593bc8e2dc705daa22cd1145cfc8f5a3a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x1c65595a26548a1b2263315b08a56334a2d7087319814437559c3c96025e939f\",\"license\":\"MIT\"},\"contracts/CrossSyncGateway.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\npragma abicoder v2;\\n\\n\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\n\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol';\\n\\nimport '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\\n\\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol';\\n\\nimport '@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol';\\n\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol';\\n\\n\\nimport './helpers/ERC2771Recipient.sol';\\nimport './interfaces/ICrossSyncGateway.sol';\\n\\nimport './interfaces/IMessagingImpl.sol';\\nimport './interfaces/ICrossSyncReceiverImplementer.sol';\\n\\n\\n\\ninterface IWETH9 {\\n\\n    function deposit() external payable ;\\n    function withdraw(uint wad) external payable;\\n    function totalSupply() external returns (uint);  \\n    function approve(address guy, uint wad) external returns (bool);\\n\\n}\\n\\n\\ncontract CrossSyncGateway is ICrossSyncGateway, Initializable, OwnableUpgradeable, ERC2771Recipient, PausableUpgradeable, AccessControlUpgradeable, ReentrancyGuardUpgradeable, EIP712Upgradeable, UUPSUpgradeable {\\n\\n    bytes32 public constant SUPER_ADMIN_ROLE = keccak256('SUPER_ADMIN_ROLE');\\n    bytes32 public constant ADMIN_ROLE = keccak256('ADMIN_ROLE');\\n    bytes32 public constant PAUSER_ROLE = keccak256('PAUSER_ROLE');\\n    bytes32 public constant UPGRADER_ROLE = keccak256('UPGRADER_ROLE');\\n\\n    address public nativeCurrencyWrappedAddress;\\n    address public nativeCurrencyAddress;\\n\\n    struct RouteData {\\n        address routeAddress;\\n        bool isValid;\\n        string routeName;\\n    }\\n\\n    mapping (uint256 => RouteData) private routes;\\n    mapping (uint256 => address) public destChainGatewayAddress;\\n    mapping (address => mapping(uint256 => mapping(uint256 => uint256))) public sentUserNonce; //address => srcChainId => destChainId => nonce\\n    mapping (address => mapping(uint256 => mapping(uint256 => bool))) public receiveUserNonceSeen; //address => srcChainId => nonce => bool\\n\\n    uint256 public crossSyncFeePercent; // Divided By 10000\\n    address public crossSyncFeeAddress;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(string calldata _name, string calldata _version, address _nativeCurrencyWrappedAddress, address _nativeCurrencyAddress, address _owner, address _crossSyncFeeAddress) public initializer {\\n        __Pausable_init();\\n        __Ownable_init();\\n        __AccessControl_init();\\n        __ReentrancyGuard_init();\\n        __EIP712_init(_name, _version);\\n        __UUPSUpgradeable_init();\\n\\n\\n        __setOwner__(_owner);\\n        _setRoleAdmin(ADMIN_ROLE, SUPER_ADMIN_ROLE);\\n        _setRoleAdmin(PAUSER_ROLE, SUPER_ADMIN_ROLE);\\n\\n        nativeCurrencyWrappedAddress = _nativeCurrencyWrappedAddress;\\n        nativeCurrencyAddress = _nativeCurrencyAddress;\\n        crossSyncFeePercent = 40; //Default to 40/10000 = 0.4%\\n        crossSyncFeeAddress = _crossSyncFeeAddress;\\n    }\\n\\n/*\\n******************************************Contract Settings Functions****************************************************\\n*/\\n\\n    /**\\n    * @dev overriding the inherited {transferOwnership} function to reflect the admin changes into the {DEFAULT_ADMIN_ROLE}\\n    */\\n    \\n    function transferOwnership(address newOwner) public override onlyOwner {\\n        super.transferOwnership(newOwner);\\n        _grantRole(DEFAULT_ADMIN_ROLE, newOwner);\\n        renounceRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n    }\\n\\n    /**\\n    * @dev modifier to check Upgrader rights.\\n    * contract Owner and Upgrader have Upgrader rights\\n    */\\n\\n    modifier onlyUpgrader() {\\n        require(\\n            hasRole(UPGRADER_ROLE, _msgSender()) ||\\n            owner() == _msgSender(),\\n            'Unauthorized Access');\\n        _;\\n    }\\n\\n    \\n\\n    /**\\n    * @dev modifier to check super admin rights.\\n    * contract owner and super admin have super admin rights\\n    */\\n\\n    modifier onlySuperAdmin() {\\n        require(\\n            hasRole(SUPER_ADMIN_ROLE, _msgSender()) ||\\n            owner() == _msgSender(),\\n            'Unauthorized Access');\\n        _;\\n    }\\n\\n    /**\\n    * @dev modifier to check admin rights.\\n    * contract owner, super admin and admins have admin rights\\n    */\\n    modifier onlyAdmin() {\\n        require(\\n            hasRole(ADMIN_ROLE, _msgSender()) ||\\n            hasRole(SUPER_ADMIN_ROLE, _msgSender()) ||\\n            owner() == _msgSender(),\\n            'Unauthorized Access');\\n        _;\\n    }\\n\\n    /**\\n    * @dev modifier to check pause rights.\\n    * contract owner, super admin and pausers's have pause rights\\n    */\\n    modifier onlyPauser() {\\n        require(\\n            hasRole(PAUSER_ROLE, _msgSender()) ||\\n            hasRole(SUPER_ADMIN_ROLE, _msgSender()) || \\n            owner() == _msgSender(),\\n            'Unauthorized Access');\\n        _;\\n    }\\n\\n    function pause() public onlyPauser {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyPauser {\\n        _unpause();\\n    }\\n\\n    function addUpgrader(address _upgrader) public onlyOwner {\\n        _grantRole(UPGRADER_ROLE, _upgrader);\\n    }\\n\\n    function addSuperAdmin(address _superAdmin) public onlyOwner {\\n        _grantRole(SUPER_ADMIN_ROLE, _superAdmin);\\n    }\\n\\n    function addAdmin(address _admin) public onlySuperAdmin {\\n        _grantRole(ADMIN_ROLE, _admin);\\n    }\\n\\n    function addPauser(address account) public onlySuperAdmin {\\n        _grantRole(PAUSER_ROLE, account);\\n    }\\n\\n    function removeUpgrader(address _upgrader) public onlyOwner {\\n        _revokeRole(UPGRADER_ROLE, _upgrader);\\n    }\\n\\n    function removeSuperAdmin(address _superAdmin) public onlyOwner {\\n        _revokeRole(SUPER_ADMIN_ROLE, _superAdmin);\\n    }\\n\\n    function removeAdmin(address _admin) public onlySuperAdmin {\\n        _revokeRole(ADMIN_ROLE, _admin);\\n    }\\n\\n    function removePauser(address _pauser) public onlySuperAdmin {\\n        _revokeRole(PAUSER_ROLE, _pauser);\\n    }        \\n\\n/*\\n************************************************************Setter Functions***************************************************\\n*/\\n\\n    function setTrustedForwarder(address _newtrustedForwarder) public onlySuperAdmin {\\n        _setTrustedForwarder(_newtrustedForwarder);\\n    }\\n\\n    function setNativeWrappedCurrencyAddress(address _nativeCurrencyWrappedAddress) public onlySuperAdmin {\\n        nativeCurrencyWrappedAddress = _nativeCurrencyWrappedAddress;\\n    }\\n\\n    function setNativeCurrencyAddress(address _nativeCurrencyAddress) public onlySuperAdmin {\\n        nativeCurrencyAddress = _nativeCurrencyAddress;\\n    }\\n\\n    function getNativeWrappedCurrencyAddress() public view returns (address) {\\n        return nativeCurrencyWrappedAddress;\\n    }\\n\\n    function getNativeCurrencyAddress() public view returns (address) {\\n        return nativeCurrencyAddress;\\n    }\\n\\n    // Setter function for destChainGatewayAddress with onlySuperAdmin modifier\\n    function setDestChainGatewayAddress(uint256 chainId, address crossSyncGatewayAddress) public onlySuperAdmin {\\n        destChainGatewayAddress[chainId] = crossSyncGatewayAddress;\\n    }\\n\\n    function setCrossSyncFee(uint256 _crossSyncFeePercent) public onlySuperAdmin {\\n        crossSyncFeePercent = _crossSyncFeePercent;\\n    }\\n\\n    function setCrossSyncFeeAddress(address _crossSyncFeeAddress) public onlySuperAdmin {\\n        crossSyncFeeAddress = _crossSyncFeeAddress;\\n    }\\n\\n/*\\n************************************************************ Adding Messaging Routes Functions ***************************************************\\n*/\\n\\n    function addRoute(uint256 _routeId, address _routeAddress, string memory _routeName) public onlySuperAdmin {\\n        require(_routeAddress != address(0), 'Address 0 Provided');\\n        require(!routes[_routeId].isValid, 'Route Already Exists');\\n        routes[_routeId] = RouteData(_routeAddress, true, _routeName);\\n    }\\n\\n    function removeRoute(uint256 _routeId) public onlySuperAdmin {\\n        require(routes[_routeId].isValid, 'Route Does Not Exist');\\n        delete routes[_routeId];\\n    }\\n\\n    function getRoute(uint256 _routeId) public view returns (address, bool, string memory) {\\n        return (routes[_routeId].routeAddress, routes[_routeId].isValid, routes[_routeId].routeName);\\n    }\\n\\n    function getRouteAddress(uint256 _routeId) public view returns (address) {\\n        return routes[_routeId].routeAddress;\\n    }\\n\\n    function getRouteValidity(uint256 _routeId) public view returns (bool) {\\n        return routes[_routeId].isValid;\\n    }\\n\\n    function getRouteName(uint256 _routeId) public view returns (string memory) {\\n        return routes[_routeId].routeName;\\n    }\\n\\n    function setRouteAddress(uint256 _routeId, address _routeAddress) public onlySuperAdmin {\\n        require(_routeAddress != address(0), 'Address 0 Provided');\\n        require(routes[_routeId].isValid, 'Route Does Not Exist');\\n        routes[_routeId].routeAddress = _routeAddress;\\n    }\\n\\n    function setRouteValidity(uint256 _routeId, bool _isValid) public onlySuperAdmin {\\n        require(routes[_routeId].isValid, 'Route Does Not Exist');\\n        routes[_routeId].isValid = _isValid;\\n    }\\n\\n    function setRouteName(uint256 _routeId, string memory _routeName) public onlySuperAdmin {\\n        require(routes[_routeId].isValid, 'Route Does Not Exist');\\n        routes[_routeId].routeName = _routeName;\\n    }\\n\\n/*\\n*********************************************************  Events ***********************************************************************\\n*/    \\n\\n    event SyncFeeCollected(address from, uint256 amount, address feeAddress, uint256 indexed destinationChainId, uint256 indexed routeId, uint256 gasLimit);\\n/*\\n*********************************************************  Gateway Functions ***********************************************************************\\n*/   \\n\\n    function handleReceive(\\n        bytes calldata _payload\\n    ) external override nonReentrant{\\n        _handleReceive(_payload);\\n    }\\n\\n    function _handleReceive(bytes calldata _payload) internal {\\n        IMessagingImpl.ICrossSyncMessagingData memory decodePayload = abi.decode(_payload, (IMessagingImpl.ICrossSyncMessagingData));\\n        // require(routes[decodePayload.messagingRouteId].routeAddress == _msgSender(), 'Route Address Mismatch/Invalid Caller');\\n        \\n        // require(decodePayload.destinationChainId == block.chainid, 'Destination Chain Id is not same as current chain id');\\n        // require(decodePayload.destinationGatewayAddress == address(this), 'Destinatin Gateway Address Mismatch');\\n       \\n        // require(!receiveUserNonceSeen[decodePayload.sender][decodePayload.sourceChainId][decodePayload.nonce], 'Receive Users Nonce is already seen for this src Chain Id');\\n        // receiveUserNonceSeen[decodePayload.sender][decodePayload.sourceChainId][decodePayload.nonce] = true;\\n\\n        ICrossSyncReceiverImplementer(decodePayload.payload.to).receiveMessage(\\n            decodePayload.sourceChainId,\\n            decodePayload.sender,\\n            decodePayload.payload.data\\n        );            \\n    }\\n\\n    function sendMessage( uint256 _destinationChainId,\\n        uint256 _routeId,\\n        ICrossSyncGateway.MessagingPayload memory _payload,\\n        uint256 _gasLimit,\\n        bytes calldata _routeData) override public payable  {\\n        require(routes[_routeId].isValid, 'Route Does Not Exist');\\n        require(_payload.to != address(0), 'Address 0 Provided');\\n        require(_destinationChainId != block.chainid, 'Source and Destination Chain Ids are same');\\n        require(destChainGatewayAddress[_destinationChainId] != address(0), 'Destination Chain Gateway Address is not set');\\n        // require(msg.value > 0, 'Relayer(msg.value) Fee can not be zero');\\n\\n        uint256 syncFee = getSyncFee(msg.value);\\n        require(msg.value >= syncFee, 'Relayer(msg.value) Fee is less than syncFee');\\n        uint256 messengerFee = msg.value - syncFee;\\n        _transferNativeSyncFee(_msgSender(), _destinationChainId, _routeId, _gasLimit, syncFee);\\n\\n\\n        IMessagingImpl.ICrossSyncMessagingData memory crossSyncPayload = IMessagingImpl.ICrossSyncMessagingData(\\n            _msgSender(),\\n            sentUserNonce[_msgSender()][block.chainid][_destinationChainId],\\n            _routeId,\\n            block.chainid,\\n            _destinationChainId,\\n            address(this),\\n            destChainGatewayAddress[_destinationChainId], // To Be Filled By Route Impl Address\\n            _payload\\n        );\\n\\n        sentUserNonce[_msgSender()][block.chainid][_destinationChainId] += 1;\\n\\n        IMessagingImpl messenger = IMessagingImpl(routes[_routeId].routeAddress);\\n        messenger.executeSendMessage{value: messengerFee}(crossSyncPayload, _gasLimit);\\n    }\\n\\n\\n\\n\\n    \\n    function getFee(\\n        uint256 _destinationChainId,\\n        uint256 _routeId,\\n        MessagingPayload calldata _payload,\\n        uint256 _gasLimit\\n    ) public override view returns(uint256){\\n        require(routes[_routeId].isValid, 'Route Does Not Exist');\\n        require(_payload.to != address(0), 'Address 0 Provided');\\n        require(_destinationChainId != block.chainid, 'Source and Destination Chain Ids are same');\\n        require(destChainGatewayAddress[_destinationChainId] != address(0), 'Destination Chain Gateway Address is not set');\\n\\n        IMessagingImpl.ICrossSyncMessagingData memory crossSyncPayload = IMessagingImpl.ICrossSyncMessagingData(\\n            _msgSender(),\\n            sentUserNonce[_msgSender()][block.chainid][_destinationChainId],\\n            _routeId,\\n            block.chainid,\\n            _destinationChainId,\\n            address(this),\\n            destChainGatewayAddress[_destinationChainId],\\n            _payload\\n        );\\n\\n\\n        IMessagingImpl messenger = IMessagingImpl(routes[_routeId].routeAddress);\\n        uint256 messengerFee = messenger.getFee(crossSyncPayload, _gasLimit);\\n        uint256 syncFee = getSyncFee(messengerFee);\\n        uint256 finalFee = messengerFee + syncFee;\\n        return finalFee;\\n    }\\n\\n    function getSyncFee(uint256 messengerFee) public view returns (uint256) {\\n        // Calculate 0.4% of the value\\n        uint256 syncFee = (messengerFee * crossSyncFeePercent) / 10000;\\n\\n        // Add the calculated value to the original value\\n       return syncFee;\\n    }\\n\\n    function _transferNativeSyncFee(address _from, uint256 _destChainId, uint256 _routeId, uint256 _gasLimit, uint256 _crossSyncFee) internal {\\n        require(crossSyncFeeAddress != address(0), 'CrossSyncFee Address Is Zero Address');\\n        payable(crossSyncFeeAddress).transfer(_crossSyncFee);\\n        emit SyncFeeCollected(_from, _crossSyncFee, crossSyncFeeAddress, _destChainId, _routeId, _gasLimit);\\n    }\\n/*\\n********************************************************************** ERC20 HELPER FUNCTIONS **********************************************************************\\n*/\\n\\n    function _giveTokenApproval(address _spender, address _tokenAddress, uint256 _tokenAmount) internal {\\n        IERC20Upgradeable token = IERC20Upgradeable(_tokenAddress);\\n        token.approve(_spender, _tokenAmount); // Approving Spender to use tokens from contract\\n    }\\n\\n    function _transferToken(address _from, address _to, address _tokenAddress, uint256 _tokenAmount) internal {\\n        if(_from == address(this)){\\n            IERC20Upgradeable transferAsset = IERC20Upgradeable(_tokenAddress);\\n            transferAsset.transfer(_to, _tokenAmount);\\n        }else {\\n            IERC20Upgradeable transferAsset = IERC20Upgradeable(_tokenAddress);\\n            transferAsset.transferFrom(_from, _to, _tokenAmount);\\n        }\\n    }\\n\\n/*\\n************************************************************ EIP712, Hashing and Signature Handling ***********************************************\\n*/\\n\\n    function _verifyAdmin(bytes32 digest, bytes memory signature) internal view returns (bool) {\\n        address signer = ECDSAUpgradeable.recover(digest, signature);\\n        return (hasRole(ADMIN_ROLE, signer));\\n    }\\n\\n/*\\n***************************************** Important Functions - Edit With Care ***********************************************************\\n*/   \\n    function _msgSender() internal view virtual override(ContextUpgradeable, ERC2771Recipient) returns (address sender) {\\n        if (isTrustedForwarder(msg.sender) && msg.data.length >= 20) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return super._msgSender();\\n        }\\n    }\\n\\n    function _msgData() internal view virtual override(ContextUpgradeable, ERC2771Recipient) returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender) && msg.data.length >= 20) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return super._msgData();\\n        }\\n    }\\n\\n    function _authorizeUpgrade(address newImplementation)\\n        internal\\n        onlyUpgrader\\n        override\\n    {}\\n\\n    function __setOwner__(address _owner) internal {\\n         super.transferOwnership(_owner);\\n        _grantRole(DEFAULT_ADMIN_ROLE, _owner);\\n    }\\n     \\n    function supportsInterface(bytes4 interfaceId) public view virtual override(AccessControlUpgradeable) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n   receive() external payable {}\\n\\n}\",\"keccak256\":\"0x94133d34160153db9c186531e5ed46052300faace925102fda8669b3bac38fd2\",\"license\":\"MIT\"},\"contracts/helpers/ERC2771Recipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable no-inline-assembly\\npragma solidity >=0.6.9;\\n\\nimport \\\"./IERC2771Recipient.sol\\\";\\n\\n/**\\n * @title The ERC-2771 Recipient Base Abstract Class - Implementation\\n *\\n * @notice Note that this contract was called `BaseRelayRecipient` in the previous revision of the GSN.\\n *\\n * @notice A base contract to be inherited by any contract that want to receive relayed transactions.\\n *\\n * @notice A subclass must use `_msgSender()` instead of `msg.sender`.\\n */\\nabstract contract ERC2771Recipient is IERC2771Recipient {\\n\\n    /*\\n     * Forwarder singleton we accept calls from\\n     */\\n    address private _trustedForwarder;\\n\\n    /**\\n     * :warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.\\n     * @notice Method is not a required method to allow Recipients to trust multiple Forwarders. Not recommended yet.\\n     * @return forwarder The address of the Forwarder contract that is being used.\\n     */\\n    function getTrustedForwarder() public virtual view returns (address forwarder){\\n        return _trustedForwarder;\\n    }\\n\\n    function _setTrustedForwarder(address _forwarder) internal {\\n        _trustedForwarder = _forwarder;\\n    }\\n\\n    /// @inheritdoc IERC2771Recipient\\n    function isTrustedForwarder(address forwarder) public virtual override view returns(bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    /// @inheritdoc IERC2771Recipient\\n    function _msgSender() internal override virtual view returns (address ret) {\\n        if (msg.data.length >= 20 && isTrustedForwarder(msg.sender)) {\\n            // At this point we know that the sender is a trusted forwarder,\\n            // so we trust that the last bytes of msg.data are the verified sender address.\\n            // extract sender address from the end of msg.data\\n            assembly {\\n                ret := shr(96,calldataload(sub(calldatasize(),20)))\\n            }\\n        } else {\\n            ret = msg.sender;\\n        }\\n    }\\n\\n    /// @inheritdoc IERC2771Recipient\\n    function _msgData() internal override virtual view returns (bytes calldata ret) {\\n        if (msg.data.length >= 20 && isTrustedForwarder(msg.sender)) {\\n            return msg.data[0:msg.data.length-20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n}\",\"keccak256\":\"0x626663d096a6a209f085db4ed90ee80b5b33693df218e89e09ad02be922b6ae9\",\"license\":\"MIT\"},\"contracts/helpers/IERC2771Recipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\n/**\\n * @title The ERC-2771 Recipient Base Abstract Class - Declarations\\n *\\n * @notice A contract must implement this interface in order to support relayed transaction.\\n *\\n * @notice It is recommended that your contract inherits from the ERC2771Recipient contract.\\n */\\nabstract contract IERC2771Recipient {\\n\\n    /**\\n     * :warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.\\n     * @param forwarder The address of the Forwarder contract that is being used.\\n     * @return isTrustedForwarder `true` if the Forwarder is trusted to forward relayed transactions by this Recipient.\\n     */\\n    function isTrustedForwarder(address forwarder) public virtual view returns(bool);\\n\\n    /**\\n     * @notice Use this method the contract anywhere instead of msg.sender to support relayed transactions.\\n     * @return sender The real sender of this call.\\n     * For a call that came through the Forwarder the real sender is extracted from the last 20 bytes of the `msg.data`.\\n     * Otherwise simply returns `msg.sender`.\\n     */\\n    function _msgSender() internal virtual view returns (address);\\n\\n    /**\\n     * @notice Use this method in the contract instead of `msg.data` when difference matters (hashing, signature, etc.)\\n     * @return data The real `msg.data` of this call.\\n     * For a call that came through the Forwarder, the real sender address was appended as the last 20 bytes\\n     * of the `msg.data` - so this method will strip those 20 bytes off.\\n     * Otherwise (if the call was made directly and not through the forwarder) simply returns `msg.data`.\\n     */\\n    function _msgData() internal virtual view returns (bytes calldata);\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\",\"keccak256\":\"0x30231e8682866755b2f437baef3f608115f459f061bf87fd0975e3091b6619fd\",\"license\":\"MIT\"},\"contracts/interfaces/ICrossSyncGateway.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\npragma abicoder v2;\\n\\nimport './ICrossSyncReceiver.sol';\\n\\ninterface ICrossSyncGateway is ICrossSyncReceiver {\\n\\n    struct MessagingPayload{\\n        address to;\\n        bytes data;\\n    }\\n\\n    function sendMessage(\\n        uint256 _destinationChainId,\\n        uint256 _routeId,\\n        MessagingPayload calldata _payload,\\n        uint256 gasLimit,\\n        bytes calldata _routeData\\n    ) external payable;\\n\\n    // function sendMessageUsingManualMultiHop(\\n    //     uint256[] memory _destinationChainIds,\\n    //     uint256[] memory _routeIds,\\n    //     MessagingPayload calldata _payload,\\n    //     uint256 gasLimit,\\n    //     bytes[] calldata _routeData\\n    // ) external payable;\\n\\n    function getFee(\\n        uint256 _destinationChainId,\\n        uint256 _routeId,\\n        MessagingPayload calldata _payload,\\n        uint256 _gasLimit\\n    ) external view returns(uint256);\\n    \\n       \\n}\",\"keccak256\":\"0x0ed47f443e527e4b547c57c6a5a5cddec342515d06017208624c40a85b012dcb\",\"license\":\"MIT\"},\"contracts/interfaces/ICrossSyncReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\npragma abicoder v2;\\n\\n\\ninterface ICrossSyncReceiver {\\n\\n    function handleReceive(\\n        bytes calldata _payload\\n    ) external;  \\n\\n}\",\"keccak256\":\"0xdf108eab0e23b8c206d6888d694b47bb4a42f8be2918f9798b898941150c486a\",\"license\":\"MIT\"},\"contracts/interfaces/ICrossSyncReceiverImplementer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\npragma abicoder v2;\\n\\ninterface ICrossSyncReceiverImplementer {\\n\\n    function receiveMessage(\\n        uint256 _sourceChainId,\\n        address _sourceAddress,\\n        bytes calldata _payload\\n    ) external payable ;    \\n  \\n        \\n}\",\"keccak256\":\"0x0e7bbcb5fa79635acf3134d5f9b6337219e1d88fc6b5dc1067f2de2c8258c9c0\",\"license\":\"MIT\"},\"contracts/interfaces/IMessagingImpl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\npragma abicoder v2;\\n\\nimport './ICrossSyncGateway.sol';\\n\\ninterface IMessagingImpl {\\n\\n    struct ICrossSyncMessagingData {\\n        address sender;\\n        uint256 nonce;\\n        uint256 messagingRouteId;\\n        uint256 sourceChainId;\\n        uint256 destinationChainId;\\n        address sourceGatewayAddress;\\n        address destinationGatewayAddress;\\n        ICrossSyncGateway.MessagingPayload payload;\\n    }\\n\\n    struct ICrossSyncMultiHopMessagingData {\\n        address sender;\\n        uint256 nonce;\\n        uint256[] messagingRouteIds;\\n        uint256 sourceChainId;\\n        uint256[] destinationChainIds;\\n        address sourceGatewayAddress;\\n        address destinationGatewayAddress;\\n        ICrossSyncGateway.MessagingPayload payload;\\n    }\\n\\n    function executeSendMessage(\\n        ICrossSyncMessagingData calldata _data, uint256 _gasLimit) external payable returns(bytes calldata) ;\\n\\n    // function executeMultiHopSendMessage(\\n    //     ICrossSyncMultiHopMessagingData calldata _data, uint256 _gasLimit) external payable returns(bytes calldata) ;    \\n\\n    function getFee(ICrossSyncMessagingData calldata _data, uint256 _gasLimit) external view returns(uint256);    \\n\\n}\",\"keccak256\":\"0xc365c7b6486004595604a50afe2c421d9fb9d28ddcb4ef6d45e47b1a2b399734\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1107,"contract":"contracts/CrossSyncGateway.sol:CrossSyncGateway","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":1110,"contract":"contracts/CrossSyncGateway.sol:CrossSyncGateway","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":2104,"contract":"contracts/CrossSyncGateway.sol:CrossSyncGateway","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":589,"contract":"contracts/CrossSyncGateway.sol:CrossSyncGateway","label":"_owner","offset":0,"slot":"51","type":"t_address"},{"astId":709,"contract":"contracts/CrossSyncGateway.sol:CrossSyncGateway","label":"__gap","offset":0,"slot":"52","type":"t_array(t_uint256)49_storage"},{"astId":6199,"contract":"contracts/CrossSyncGateway.sol:CrossSyncGateway","label":"__gap","offset":0,"slot":"101","type":"t_array(t_uint256)50_storage"},{"astId":6076,"contract":"contracts/CrossSyncGateway.sol:CrossSyncGateway","label":"_trustedForwarder","offset":0,"slot":"151","type":"t_address"},{"astId":1426,"contract":"contracts/CrossSyncGateway.sol:CrossSyncGateway","label":"_paused","offset":20,"slot":"151","type":"t_bool"},{"astId":1531,"contract":"contracts/CrossSyncGateway.sol:CrossSyncGateway","label":"__gap","offset":0,"slot":"152","type":"t_array(t_uint256)49_storage"},{"astId":3137,"contract":"contracts/CrossSyncGateway.sol:CrossSyncGateway","label":"__gap","offset":0,"slot":"201","type":"t_array(t_uint256)50_storage"},{"astId":184,"contract":"contracts/CrossSyncGateway.sol:CrossSyncGateway","label":"_roles","offset":0,"slot":"251","type":"t_mapping(t_bytes32,t_struct(RoleData)179_storage)"},{"astId":479,"contract":"contracts/CrossSyncGateway.sol:CrossSyncGateway","label":"__gap","offset":0,"slot":"252","type":"t_array(t_uint256)49_storage"},{"astId":1546,"contract":"contracts/CrossSyncGateway.sol:CrossSyncGateway","label":"_status","offset":0,"slot":"301","type":"t_uint256"},{"astId":1615,"contract":"contracts/CrossSyncGateway.sol:CrossSyncGateway","label":"__gap","offset":0,"slot":"302","type":"t_array(t_uint256)49_storage"},{"astId":2828,"contract":"contracts/CrossSyncGateway.sol:CrossSyncGateway","label":"_hashedName","offset":0,"slot":"351","type":"t_bytes32"},{"astId":2831,"contract":"contracts/CrossSyncGateway.sol:CrossSyncGateway","label":"_hashedVersion","offset":0,"slot":"352","type":"t_bytes32"},{"astId":2833,"contract":"contracts/CrossSyncGateway.sol:CrossSyncGateway","label":"_name","offset":0,"slot":"353","type":"t_string_storage"},{"astId":2835,"contract":"contracts/CrossSyncGateway.sol:CrossSyncGateway","label":"_version","offset":0,"slot":"354","type":"t_string_storage"},{"astId":3093,"contract":"contracts/CrossSyncGateway.sol:CrossSyncGateway","label":"__gap","offset":0,"slot":"355","type":"t_array(t_uint256)48_storage"},{"astId":1089,"contract":"contracts/CrossSyncGateway.sol:CrossSyncGateway","label":"__gap","offset":0,"slot":"403","type":"t_array(t_uint256)50_storage"},{"astId":1404,"contract":"contracts/CrossSyncGateway.sol:CrossSyncGateway","label":"__gap","offset":0,"slot":"453","type":"t_array(t_uint256)50_storage"},{"astId":4814,"contract":"contracts/CrossSyncGateway.sol:CrossSyncGateway","label":"nativeCurrencyWrappedAddress","offset":0,"slot":"503","type":"t_address"},{"astId":4816,"contract":"contracts/CrossSyncGateway.sol:CrossSyncGateway","label":"nativeCurrencyAddress","offset":0,"slot":"504","type":"t_address"},{"astId":4828,"contract":"contracts/CrossSyncGateway.sol:CrossSyncGateway","label":"routes","offset":0,"slot":"505","type":"t_mapping(t_uint256,t_struct(RouteData)4823_storage)"},{"astId":4832,"contract":"contracts/CrossSyncGateway.sol:CrossSyncGateway","label":"destChainGatewayAddress","offset":0,"slot":"506","type":"t_mapping(t_uint256,t_address)"},{"astId":4840,"contract":"contracts/CrossSyncGateway.sol:CrossSyncGateway","label":"sentUserNonce","offset":0,"slot":"507","type":"t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint256,t_uint256)))"},{"astId":4848,"contract":"contracts/CrossSyncGateway.sol:CrossSyncGateway","label":"receiveUserNonceSeen","offset":0,"slot":"508","type":"t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint256,t_bool)))"},{"astId":4850,"contract":"contracts/CrossSyncGateway.sol:CrossSyncGateway","label":"crossSyncFeePercent","offset":0,"slot":"509","type":"t_uint256"},{"astId":4852,"contract":"contracts/CrossSyncGateway.sol:CrossSyncGateway","label":"crossSyncFeeAddress","offset":0,"slot":"510","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)48_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[48]","numberOfBytes":"1536"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint256,t_bool)))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(uint256 => mapping(uint256 => bool)))","numberOfBytes":"32","value":"t_mapping(t_uint256,t_mapping(t_uint256,t_bool))"},"t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint256,t_uint256)))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(uint256 => mapping(uint256 => uint256)))","numberOfBytes":"32","value":"t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))"},"t_mapping(t_bytes32,t_struct(RoleData)179_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData)","numberOfBytes":"32","value":"t_struct(RoleData)179_storage"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_mapping(t_uint256,t_bool)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_uint256,t_mapping(t_uint256,t_bool))":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => mapping(uint256 => bool))","numberOfBytes":"32","value":"t_mapping(t_uint256,t_bool)"},"t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => mapping(uint256 => uint256))","numberOfBytes":"32","value":"t_mapping(t_uint256,t_uint256)"},"t_mapping(t_uint256,t_struct(RouteData)4823_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => struct CrossSyncGateway.RouteData)","numberOfBytes":"32","value":"t_struct(RouteData)4823_storage"},"t_mapping(t_uint256,t_uint256)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(RoleData)179_storage":{"encoding":"inplace","label":"struct AccessControlUpgradeable.RoleData","members":[{"astId":176,"contract":"contracts/CrossSyncGateway.sol:CrossSyncGateway","label":"members","offset":0,"slot":"0","type":"t_mapping(t_address,t_bool)"},{"astId":178,"contract":"contracts/CrossSyncGateway.sol:CrossSyncGateway","label":"adminRole","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"},"t_struct(RouteData)4823_storage":{"encoding":"inplace","label":"struct CrossSyncGateway.RouteData","members":[{"astId":4818,"contract":"contracts/CrossSyncGateway.sol:CrossSyncGateway","label":"routeAddress","offset":0,"slot":"0","type":"t_address"},{"astId":4820,"contract":"contracts/CrossSyncGateway.sol:CrossSyncGateway","label":"isValid","offset":20,"slot":"0","type":"t_bool"},{"astId":4822,"contract":"contracts/CrossSyncGateway.sol:CrossSyncGateway","label":"routeName","offset":0,"slot":"1","type":"t_string_storage"}],"numberOfBytes":"64"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{"getTrustedForwarder()":{"notice":":warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.Method is not a required method to allow Recipients to trust multiple Forwarders. Not recommended yet."},"isTrustedForwarder(address)":{"notice":":warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder."}},"version":1}},"IWETH9":{"abi":[{"inputs":[{"internalType":"address","name":"guy","type":"address"},{"internalType":"uint256","name":"wad","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"deposit","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"wad","type":"uint256"}],"name":"withdraw","outputs":[],"stateMutability":"payable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","deposit()":"d0e30db0","totalSupply()":"18160ddd","withdraw(uint256)":"2e1a7d4d"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CrossSyncGateway.sol\":\"IWETH9\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"./AccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\\n    function __AccessControlEnumerable_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControlEnumerable_init_unchained() internal onlyInitializing {\\n    }\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc2dfd6ba9449f61b6b03b262182faf302f093a8c05dd10792aeecb4ed1663c0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xfeefb24d068524440e1ba885efdf105d91f83504af3c2d745ffacc4595396831\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7acbc538aad6eb4614e26612a8c5c0149bb8808db95e2638d245a8365f63e572\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x47d6e06872b12e72c79d1b5eb55842f860b5fb1207b2317c2358d2766b950a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC5267Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC5267Upgradeable {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\",\"keccak256\":\"0xe562dab443278837fa50faddb76743399e942181881db8dccaea3bd1712994db\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x584ebdf9c1118a7c773f98788e3f3ede01982bdf8932aa06f5acc7d54876e161\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb607cb94c27e89750f5ae2ccebcb94e654e926f6125f4fd4c6262c89875118ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb82ef33f43b6b96109687d91b39c94573fdccaaa423fe28e8ba0977b31c023e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xd60f939a3ca0199014d079b4dd66aa757954334947d81eb5c1d35d7a83061ab3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// EIP-2612 is Final as of 2022-11-01. This file is deprecated.\\n\\nimport \\\"./IERC20PermitUpgradeable.sol\\\";\\n\",\"keccak256\":\"0x5225f0310a2992589600ebddffd0dd512a61836bda672b46744b416765d7ac31\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x07ac95acad040f1fb1f6120dd0aa5f702db69446e95f82613721879d30de0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0xa014f65d84b02827055d99993ccdbfb4b56b2c9e91eb278d82a93330659d06e4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"./ECDSAUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC5267Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the `_domainSeparatorV4` function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * _Available since v3.4._\\n *\\n * @custom:storage-size 52\\n */\\nabstract contract EIP712Upgradeable is Initializable, IERC5267Upgradeable {\\n    bytes32 private constant _TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /// @custom:oz-renamed-from _HASHED_NAME\\n    bytes32 private _hashedName;\\n    /// @custom:oz-renamed-from _HASHED_VERSION\\n    bytes32 private _hashedVersion;\\n\\n    string private _name;\\n    string private _version;\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\\n        _name = name;\\n        _version = version;\\n\\n        // Reset prior values in storage if upgrading\\n        _hashedName = 0;\\n        _hashedVersion = 0;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator();\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash(), block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {EIP-5267}.\\n     *\\n     * _Available since v4.9._\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        override\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        // If the hashed name and version in storage are non-zero, the contract hasn't been properly initialized\\n        // and the EIP712 domain is not reliable, as it will be missing name and version.\\n        require(_hashedName == 0 && _hashedVersion == 0, \\\"EIP712: Uninitialized\\\");\\n\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _EIP712Name(),\\n            _EIP712Version(),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n\\n    /**\\n     * @dev The name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712Name() internal virtual view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev The version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712Version() internal virtual view returns (string memory) {\\n        return _version;\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Name` instead.\\n     */\\n    function _EIP712NameHash() internal view returns (bytes32) {\\n        string memory name = _EIP712Name();\\n        if (bytes(name).length > 0) {\\n            return keccak256(bytes(name));\\n        } else {\\n            // If the name is empty, the contract may have been upgraded without initializing the new storage.\\n            // We return the name hash in storage if non-zero, otherwise we assume the name is empty by design.\\n            bytes32 hashedName = _hashedName;\\n            if (hashedName != 0) {\\n                return hashedName;\\n            } else {\\n                return keccak256(\\\"\\\");\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Version` instead.\\n     */\\n    function _EIP712VersionHash() internal view returns (bytes32) {\\n        string memory version = _EIP712Version();\\n        if (bytes(version).length > 0) {\\n            return keccak256(bytes(version));\\n        } else {\\n            // If the version is empty, the contract may have been upgraded without initializing the new storage.\\n            // We return the version hash in storage if non-zero, otherwise we assume the version is empty by design.\\n            bytes32 hashedVersion = _hashedVersion;\\n            if (hashedVersion != 0) {\\n                return hashedVersion;\\n            } else {\\n                return keccak256(\\\"\\\");\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[48] private __gap;\\n}\\n\",\"keccak256\":\"0xeb8d6be406a373771724922eb41b5d593bc8e2dc705daa22cd1145cfc8f5a3a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x1c65595a26548a1b2263315b08a56334a2d7087319814437559c3c96025e939f\",\"license\":\"MIT\"},\"contracts/CrossSyncGateway.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\npragma abicoder v2;\\n\\n\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\n\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol';\\n\\nimport '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\\n\\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol';\\n\\nimport '@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol';\\n\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol';\\n\\n\\nimport './helpers/ERC2771Recipient.sol';\\nimport './interfaces/ICrossSyncGateway.sol';\\n\\nimport './interfaces/IMessagingImpl.sol';\\nimport './interfaces/ICrossSyncReceiverImplementer.sol';\\n\\n\\n\\ninterface IWETH9 {\\n\\n    function deposit() external payable ;\\n    function withdraw(uint wad) external payable;\\n    function totalSupply() external returns (uint);  \\n    function approve(address guy, uint wad) external returns (bool);\\n\\n}\\n\\n\\ncontract CrossSyncGateway is ICrossSyncGateway, Initializable, OwnableUpgradeable, ERC2771Recipient, PausableUpgradeable, AccessControlUpgradeable, ReentrancyGuardUpgradeable, EIP712Upgradeable, UUPSUpgradeable {\\n\\n    bytes32 public constant SUPER_ADMIN_ROLE = keccak256('SUPER_ADMIN_ROLE');\\n    bytes32 public constant ADMIN_ROLE = keccak256('ADMIN_ROLE');\\n    bytes32 public constant PAUSER_ROLE = keccak256('PAUSER_ROLE');\\n    bytes32 public constant UPGRADER_ROLE = keccak256('UPGRADER_ROLE');\\n\\n    address public nativeCurrencyWrappedAddress;\\n    address public nativeCurrencyAddress;\\n\\n    struct RouteData {\\n        address routeAddress;\\n        bool isValid;\\n        string routeName;\\n    }\\n\\n    mapping (uint256 => RouteData) private routes;\\n    mapping (uint256 => address) public destChainGatewayAddress;\\n    mapping (address => mapping(uint256 => mapping(uint256 => uint256))) public sentUserNonce; //address => srcChainId => destChainId => nonce\\n    mapping (address => mapping(uint256 => mapping(uint256 => bool))) public receiveUserNonceSeen; //address => srcChainId => nonce => bool\\n\\n    uint256 public crossSyncFeePercent; // Divided By 10000\\n    address public crossSyncFeeAddress;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(string calldata _name, string calldata _version, address _nativeCurrencyWrappedAddress, address _nativeCurrencyAddress, address _owner, address _crossSyncFeeAddress) public initializer {\\n        __Pausable_init();\\n        __Ownable_init();\\n        __AccessControl_init();\\n        __ReentrancyGuard_init();\\n        __EIP712_init(_name, _version);\\n        __UUPSUpgradeable_init();\\n\\n\\n        __setOwner__(_owner);\\n        _setRoleAdmin(ADMIN_ROLE, SUPER_ADMIN_ROLE);\\n        _setRoleAdmin(PAUSER_ROLE, SUPER_ADMIN_ROLE);\\n\\n        nativeCurrencyWrappedAddress = _nativeCurrencyWrappedAddress;\\n        nativeCurrencyAddress = _nativeCurrencyAddress;\\n        crossSyncFeePercent = 40; //Default to 40/10000 = 0.4%\\n        crossSyncFeeAddress = _crossSyncFeeAddress;\\n    }\\n\\n/*\\n******************************************Contract Settings Functions****************************************************\\n*/\\n\\n    /**\\n    * @dev overriding the inherited {transferOwnership} function to reflect the admin changes into the {DEFAULT_ADMIN_ROLE}\\n    */\\n    \\n    function transferOwnership(address newOwner) public override onlyOwner {\\n        super.transferOwnership(newOwner);\\n        _grantRole(DEFAULT_ADMIN_ROLE, newOwner);\\n        renounceRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n    }\\n\\n    /**\\n    * @dev modifier to check Upgrader rights.\\n    * contract Owner and Upgrader have Upgrader rights\\n    */\\n\\n    modifier onlyUpgrader() {\\n        require(\\n            hasRole(UPGRADER_ROLE, _msgSender()) ||\\n            owner() == _msgSender(),\\n            'Unauthorized Access');\\n        _;\\n    }\\n\\n    \\n\\n    /**\\n    * @dev modifier to check super admin rights.\\n    * contract owner and super admin have super admin rights\\n    */\\n\\n    modifier onlySuperAdmin() {\\n        require(\\n            hasRole(SUPER_ADMIN_ROLE, _msgSender()) ||\\n            owner() == _msgSender(),\\n            'Unauthorized Access');\\n        _;\\n    }\\n\\n    /**\\n    * @dev modifier to check admin rights.\\n    * contract owner, super admin and admins have admin rights\\n    */\\n    modifier onlyAdmin() {\\n        require(\\n            hasRole(ADMIN_ROLE, _msgSender()) ||\\n            hasRole(SUPER_ADMIN_ROLE, _msgSender()) ||\\n            owner() == _msgSender(),\\n            'Unauthorized Access');\\n        _;\\n    }\\n\\n    /**\\n    * @dev modifier to check pause rights.\\n    * contract owner, super admin and pausers's have pause rights\\n    */\\n    modifier onlyPauser() {\\n        require(\\n            hasRole(PAUSER_ROLE, _msgSender()) ||\\n            hasRole(SUPER_ADMIN_ROLE, _msgSender()) || \\n            owner() == _msgSender(),\\n            'Unauthorized Access');\\n        _;\\n    }\\n\\n    function pause() public onlyPauser {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyPauser {\\n        _unpause();\\n    }\\n\\n    function addUpgrader(address _upgrader) public onlyOwner {\\n        _grantRole(UPGRADER_ROLE, _upgrader);\\n    }\\n\\n    function addSuperAdmin(address _superAdmin) public onlyOwner {\\n        _grantRole(SUPER_ADMIN_ROLE, _superAdmin);\\n    }\\n\\n    function addAdmin(address _admin) public onlySuperAdmin {\\n        _grantRole(ADMIN_ROLE, _admin);\\n    }\\n\\n    function addPauser(address account) public onlySuperAdmin {\\n        _grantRole(PAUSER_ROLE, account);\\n    }\\n\\n    function removeUpgrader(address _upgrader) public onlyOwner {\\n        _revokeRole(UPGRADER_ROLE, _upgrader);\\n    }\\n\\n    function removeSuperAdmin(address _superAdmin) public onlyOwner {\\n        _revokeRole(SUPER_ADMIN_ROLE, _superAdmin);\\n    }\\n\\n    function removeAdmin(address _admin) public onlySuperAdmin {\\n        _revokeRole(ADMIN_ROLE, _admin);\\n    }\\n\\n    function removePauser(address _pauser) public onlySuperAdmin {\\n        _revokeRole(PAUSER_ROLE, _pauser);\\n    }        \\n\\n/*\\n************************************************************Setter Functions***************************************************\\n*/\\n\\n    function setTrustedForwarder(address _newtrustedForwarder) public onlySuperAdmin {\\n        _setTrustedForwarder(_newtrustedForwarder);\\n    }\\n\\n    function setNativeWrappedCurrencyAddress(address _nativeCurrencyWrappedAddress) public onlySuperAdmin {\\n        nativeCurrencyWrappedAddress = _nativeCurrencyWrappedAddress;\\n    }\\n\\n    function setNativeCurrencyAddress(address _nativeCurrencyAddress) public onlySuperAdmin {\\n        nativeCurrencyAddress = _nativeCurrencyAddress;\\n    }\\n\\n    function getNativeWrappedCurrencyAddress() public view returns (address) {\\n        return nativeCurrencyWrappedAddress;\\n    }\\n\\n    function getNativeCurrencyAddress() public view returns (address) {\\n        return nativeCurrencyAddress;\\n    }\\n\\n    // Setter function for destChainGatewayAddress with onlySuperAdmin modifier\\n    function setDestChainGatewayAddress(uint256 chainId, address crossSyncGatewayAddress) public onlySuperAdmin {\\n        destChainGatewayAddress[chainId] = crossSyncGatewayAddress;\\n    }\\n\\n    function setCrossSyncFee(uint256 _crossSyncFeePercent) public onlySuperAdmin {\\n        crossSyncFeePercent = _crossSyncFeePercent;\\n    }\\n\\n    function setCrossSyncFeeAddress(address _crossSyncFeeAddress) public onlySuperAdmin {\\n        crossSyncFeeAddress = _crossSyncFeeAddress;\\n    }\\n\\n/*\\n************************************************************ Adding Messaging Routes Functions ***************************************************\\n*/\\n\\n    function addRoute(uint256 _routeId, address _routeAddress, string memory _routeName) public onlySuperAdmin {\\n        require(_routeAddress != address(0), 'Address 0 Provided');\\n        require(!routes[_routeId].isValid, 'Route Already Exists');\\n        routes[_routeId] = RouteData(_routeAddress, true, _routeName);\\n    }\\n\\n    function removeRoute(uint256 _routeId) public onlySuperAdmin {\\n        require(routes[_routeId].isValid, 'Route Does Not Exist');\\n        delete routes[_routeId];\\n    }\\n\\n    function getRoute(uint256 _routeId) public view returns (address, bool, string memory) {\\n        return (routes[_routeId].routeAddress, routes[_routeId].isValid, routes[_routeId].routeName);\\n    }\\n\\n    function getRouteAddress(uint256 _routeId) public view returns (address) {\\n        return routes[_routeId].routeAddress;\\n    }\\n\\n    function getRouteValidity(uint256 _routeId) public view returns (bool) {\\n        return routes[_routeId].isValid;\\n    }\\n\\n    function getRouteName(uint256 _routeId) public view returns (string memory) {\\n        return routes[_routeId].routeName;\\n    }\\n\\n    function setRouteAddress(uint256 _routeId, address _routeAddress) public onlySuperAdmin {\\n        require(_routeAddress != address(0), 'Address 0 Provided');\\n        require(routes[_routeId].isValid, 'Route Does Not Exist');\\n        routes[_routeId].routeAddress = _routeAddress;\\n    }\\n\\n    function setRouteValidity(uint256 _routeId, bool _isValid) public onlySuperAdmin {\\n        require(routes[_routeId].isValid, 'Route Does Not Exist');\\n        routes[_routeId].isValid = _isValid;\\n    }\\n\\n    function setRouteName(uint256 _routeId, string memory _routeName) public onlySuperAdmin {\\n        require(routes[_routeId].isValid, 'Route Does Not Exist');\\n        routes[_routeId].routeName = _routeName;\\n    }\\n\\n/*\\n*********************************************************  Events ***********************************************************************\\n*/    \\n\\n    event SyncFeeCollected(address from, uint256 amount, address feeAddress, uint256 indexed destinationChainId, uint256 indexed routeId, uint256 gasLimit);\\n/*\\n*********************************************************  Gateway Functions ***********************************************************************\\n*/   \\n\\n    function handleReceive(\\n        bytes calldata _payload\\n    ) external override nonReentrant{\\n        _handleReceive(_payload);\\n    }\\n\\n    function _handleReceive(bytes calldata _payload) internal {\\n        IMessagingImpl.ICrossSyncMessagingData memory decodePayload = abi.decode(_payload, (IMessagingImpl.ICrossSyncMessagingData));\\n        // require(routes[decodePayload.messagingRouteId].routeAddress == _msgSender(), 'Route Address Mismatch/Invalid Caller');\\n        \\n        // require(decodePayload.destinationChainId == block.chainid, 'Destination Chain Id is not same as current chain id');\\n        // require(decodePayload.destinationGatewayAddress == address(this), 'Destinatin Gateway Address Mismatch');\\n       \\n        // require(!receiveUserNonceSeen[decodePayload.sender][decodePayload.sourceChainId][decodePayload.nonce], 'Receive Users Nonce is already seen for this src Chain Id');\\n        // receiveUserNonceSeen[decodePayload.sender][decodePayload.sourceChainId][decodePayload.nonce] = true;\\n\\n        ICrossSyncReceiverImplementer(decodePayload.payload.to).receiveMessage(\\n            decodePayload.sourceChainId,\\n            decodePayload.sender,\\n            decodePayload.payload.data\\n        );            \\n    }\\n\\n    function sendMessage( uint256 _destinationChainId,\\n        uint256 _routeId,\\n        ICrossSyncGateway.MessagingPayload memory _payload,\\n        uint256 _gasLimit,\\n        bytes calldata _routeData) override public payable  {\\n        require(routes[_routeId].isValid, 'Route Does Not Exist');\\n        require(_payload.to != address(0), 'Address 0 Provided');\\n        require(_destinationChainId != block.chainid, 'Source and Destination Chain Ids are same');\\n        require(destChainGatewayAddress[_destinationChainId] != address(0), 'Destination Chain Gateway Address is not set');\\n        // require(msg.value > 0, 'Relayer(msg.value) Fee can not be zero');\\n\\n        uint256 syncFee = getSyncFee(msg.value);\\n        require(msg.value >= syncFee, 'Relayer(msg.value) Fee is less than syncFee');\\n        uint256 messengerFee = msg.value - syncFee;\\n        _transferNativeSyncFee(_msgSender(), _destinationChainId, _routeId, _gasLimit, syncFee);\\n\\n\\n        IMessagingImpl.ICrossSyncMessagingData memory crossSyncPayload = IMessagingImpl.ICrossSyncMessagingData(\\n            _msgSender(),\\n            sentUserNonce[_msgSender()][block.chainid][_destinationChainId],\\n            _routeId,\\n            block.chainid,\\n            _destinationChainId,\\n            address(this),\\n            destChainGatewayAddress[_destinationChainId], // To Be Filled By Route Impl Address\\n            _payload\\n        );\\n\\n        sentUserNonce[_msgSender()][block.chainid][_destinationChainId] += 1;\\n\\n        IMessagingImpl messenger = IMessagingImpl(routes[_routeId].routeAddress);\\n        messenger.executeSendMessage{value: messengerFee}(crossSyncPayload, _gasLimit);\\n    }\\n\\n\\n\\n\\n    \\n    function getFee(\\n        uint256 _destinationChainId,\\n        uint256 _routeId,\\n        MessagingPayload calldata _payload,\\n        uint256 _gasLimit\\n    ) public override view returns(uint256){\\n        require(routes[_routeId].isValid, 'Route Does Not Exist');\\n        require(_payload.to != address(0), 'Address 0 Provided');\\n        require(_destinationChainId != block.chainid, 'Source and Destination Chain Ids are same');\\n        require(destChainGatewayAddress[_destinationChainId] != address(0), 'Destination Chain Gateway Address is not set');\\n\\n        IMessagingImpl.ICrossSyncMessagingData memory crossSyncPayload = IMessagingImpl.ICrossSyncMessagingData(\\n            _msgSender(),\\n            sentUserNonce[_msgSender()][block.chainid][_destinationChainId],\\n            _routeId,\\n            block.chainid,\\n            _destinationChainId,\\n            address(this),\\n            destChainGatewayAddress[_destinationChainId],\\n            _payload\\n        );\\n\\n\\n        IMessagingImpl messenger = IMessagingImpl(routes[_routeId].routeAddress);\\n        uint256 messengerFee = messenger.getFee(crossSyncPayload, _gasLimit);\\n        uint256 syncFee = getSyncFee(messengerFee);\\n        uint256 finalFee = messengerFee + syncFee;\\n        return finalFee;\\n    }\\n\\n    function getSyncFee(uint256 messengerFee) public view returns (uint256) {\\n        // Calculate 0.4% of the value\\n        uint256 syncFee = (messengerFee * crossSyncFeePercent) / 10000;\\n\\n        // Add the calculated value to the original value\\n       return syncFee;\\n    }\\n\\n    function _transferNativeSyncFee(address _from, uint256 _destChainId, uint256 _routeId, uint256 _gasLimit, uint256 _crossSyncFee) internal {\\n        require(crossSyncFeeAddress != address(0), 'CrossSyncFee Address Is Zero Address');\\n        payable(crossSyncFeeAddress).transfer(_crossSyncFee);\\n        emit SyncFeeCollected(_from, _crossSyncFee, crossSyncFeeAddress, _destChainId, _routeId, _gasLimit);\\n    }\\n/*\\n********************************************************************** ERC20 HELPER FUNCTIONS **********************************************************************\\n*/\\n\\n    function _giveTokenApproval(address _spender, address _tokenAddress, uint256 _tokenAmount) internal {\\n        IERC20Upgradeable token = IERC20Upgradeable(_tokenAddress);\\n        token.approve(_spender, _tokenAmount); // Approving Spender to use tokens from contract\\n    }\\n\\n    function _transferToken(address _from, address _to, address _tokenAddress, uint256 _tokenAmount) internal {\\n        if(_from == address(this)){\\n            IERC20Upgradeable transferAsset = IERC20Upgradeable(_tokenAddress);\\n            transferAsset.transfer(_to, _tokenAmount);\\n        }else {\\n            IERC20Upgradeable transferAsset = IERC20Upgradeable(_tokenAddress);\\n            transferAsset.transferFrom(_from, _to, _tokenAmount);\\n        }\\n    }\\n\\n/*\\n************************************************************ EIP712, Hashing and Signature Handling ***********************************************\\n*/\\n\\n    function _verifyAdmin(bytes32 digest, bytes memory signature) internal view returns (bool) {\\n        address signer = ECDSAUpgradeable.recover(digest, signature);\\n        return (hasRole(ADMIN_ROLE, signer));\\n    }\\n\\n/*\\n***************************************** Important Functions - Edit With Care ***********************************************************\\n*/   \\n    function _msgSender() internal view virtual override(ContextUpgradeable, ERC2771Recipient) returns (address sender) {\\n        if (isTrustedForwarder(msg.sender) && msg.data.length >= 20) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return super._msgSender();\\n        }\\n    }\\n\\n    function _msgData() internal view virtual override(ContextUpgradeable, ERC2771Recipient) returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender) && msg.data.length >= 20) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return super._msgData();\\n        }\\n    }\\n\\n    function _authorizeUpgrade(address newImplementation)\\n        internal\\n        onlyUpgrader\\n        override\\n    {}\\n\\n    function __setOwner__(address _owner) internal {\\n         super.transferOwnership(_owner);\\n        _grantRole(DEFAULT_ADMIN_ROLE, _owner);\\n    }\\n     \\n    function supportsInterface(bytes4 interfaceId) public view virtual override(AccessControlUpgradeable) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n   receive() external payable {}\\n\\n}\",\"keccak256\":\"0x94133d34160153db9c186531e5ed46052300faace925102fda8669b3bac38fd2\",\"license\":\"MIT\"},\"contracts/helpers/ERC2771Recipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable no-inline-assembly\\npragma solidity >=0.6.9;\\n\\nimport \\\"./IERC2771Recipient.sol\\\";\\n\\n/**\\n * @title The ERC-2771 Recipient Base Abstract Class - Implementation\\n *\\n * @notice Note that this contract was called `BaseRelayRecipient` in the previous revision of the GSN.\\n *\\n * @notice A base contract to be inherited by any contract that want to receive relayed transactions.\\n *\\n * @notice A subclass must use `_msgSender()` instead of `msg.sender`.\\n */\\nabstract contract ERC2771Recipient is IERC2771Recipient {\\n\\n    /*\\n     * Forwarder singleton we accept calls from\\n     */\\n    address private _trustedForwarder;\\n\\n    /**\\n     * :warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.\\n     * @notice Method is not a required method to allow Recipients to trust multiple Forwarders. Not recommended yet.\\n     * @return forwarder The address of the Forwarder contract that is being used.\\n     */\\n    function getTrustedForwarder() public virtual view returns (address forwarder){\\n        return _trustedForwarder;\\n    }\\n\\n    function _setTrustedForwarder(address _forwarder) internal {\\n        _trustedForwarder = _forwarder;\\n    }\\n\\n    /// @inheritdoc IERC2771Recipient\\n    function isTrustedForwarder(address forwarder) public virtual override view returns(bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    /// @inheritdoc IERC2771Recipient\\n    function _msgSender() internal override virtual view returns (address ret) {\\n        if (msg.data.length >= 20 && isTrustedForwarder(msg.sender)) {\\n            // At this point we know that the sender is a trusted forwarder,\\n            // so we trust that the last bytes of msg.data are the verified sender address.\\n            // extract sender address from the end of msg.data\\n            assembly {\\n                ret := shr(96,calldataload(sub(calldatasize(),20)))\\n            }\\n        } else {\\n            ret = msg.sender;\\n        }\\n    }\\n\\n    /// @inheritdoc IERC2771Recipient\\n    function _msgData() internal override virtual view returns (bytes calldata ret) {\\n        if (msg.data.length >= 20 && isTrustedForwarder(msg.sender)) {\\n            return msg.data[0:msg.data.length-20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n}\",\"keccak256\":\"0x626663d096a6a209f085db4ed90ee80b5b33693df218e89e09ad02be922b6ae9\",\"license\":\"MIT\"},\"contracts/helpers/IERC2771Recipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\n/**\\n * @title The ERC-2771 Recipient Base Abstract Class - Declarations\\n *\\n * @notice A contract must implement this interface in order to support relayed transaction.\\n *\\n * @notice It is recommended that your contract inherits from the ERC2771Recipient contract.\\n */\\nabstract contract IERC2771Recipient {\\n\\n    /**\\n     * :warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.\\n     * @param forwarder The address of the Forwarder contract that is being used.\\n     * @return isTrustedForwarder `true` if the Forwarder is trusted to forward relayed transactions by this Recipient.\\n     */\\n    function isTrustedForwarder(address forwarder) public virtual view returns(bool);\\n\\n    /**\\n     * @notice Use this method the contract anywhere instead of msg.sender to support relayed transactions.\\n     * @return sender The real sender of this call.\\n     * For a call that came through the Forwarder the real sender is extracted from the last 20 bytes of the `msg.data`.\\n     * Otherwise simply returns `msg.sender`.\\n     */\\n    function _msgSender() internal virtual view returns (address);\\n\\n    /**\\n     * @notice Use this method in the contract instead of `msg.data` when difference matters (hashing, signature, etc.)\\n     * @return data The real `msg.data` of this call.\\n     * For a call that came through the Forwarder, the real sender address was appended as the last 20 bytes\\n     * of the `msg.data` - so this method will strip those 20 bytes off.\\n     * Otherwise (if the call was made directly and not through the forwarder) simply returns `msg.data`.\\n     */\\n    function _msgData() internal virtual view returns (bytes calldata);\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\",\"keccak256\":\"0x30231e8682866755b2f437baef3f608115f459f061bf87fd0975e3091b6619fd\",\"license\":\"MIT\"},\"contracts/interfaces/ICrossSyncGateway.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\npragma abicoder v2;\\n\\nimport './ICrossSyncReceiver.sol';\\n\\ninterface ICrossSyncGateway is ICrossSyncReceiver {\\n\\n    struct MessagingPayload{\\n        address to;\\n        bytes data;\\n    }\\n\\n    function sendMessage(\\n        uint256 _destinationChainId,\\n        uint256 _routeId,\\n        MessagingPayload calldata _payload,\\n        uint256 gasLimit,\\n        bytes calldata _routeData\\n    ) external payable;\\n\\n    // function sendMessageUsingManualMultiHop(\\n    //     uint256[] memory _destinationChainIds,\\n    //     uint256[] memory _routeIds,\\n    //     MessagingPayload calldata _payload,\\n    //     uint256 gasLimit,\\n    //     bytes[] calldata _routeData\\n    // ) external payable;\\n\\n    function getFee(\\n        uint256 _destinationChainId,\\n        uint256 _routeId,\\n        MessagingPayload calldata _payload,\\n        uint256 _gasLimit\\n    ) external view returns(uint256);\\n    \\n       \\n}\",\"keccak256\":\"0x0ed47f443e527e4b547c57c6a5a5cddec342515d06017208624c40a85b012dcb\",\"license\":\"MIT\"},\"contracts/interfaces/ICrossSyncReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\npragma abicoder v2;\\n\\n\\ninterface ICrossSyncReceiver {\\n\\n    function handleReceive(\\n        bytes calldata _payload\\n    ) external;  \\n\\n}\",\"keccak256\":\"0xdf108eab0e23b8c206d6888d694b47bb4a42f8be2918f9798b898941150c486a\",\"license\":\"MIT\"},\"contracts/interfaces/ICrossSyncReceiverImplementer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\npragma abicoder v2;\\n\\ninterface ICrossSyncReceiverImplementer {\\n\\n    function receiveMessage(\\n        uint256 _sourceChainId,\\n        address _sourceAddress,\\n        bytes calldata _payload\\n    ) external payable ;    \\n  \\n        \\n}\",\"keccak256\":\"0x0e7bbcb5fa79635acf3134d5f9b6337219e1d88fc6b5dc1067f2de2c8258c9c0\",\"license\":\"MIT\"},\"contracts/interfaces/IMessagingImpl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\npragma abicoder v2;\\n\\nimport './ICrossSyncGateway.sol';\\n\\ninterface IMessagingImpl {\\n\\n    struct ICrossSyncMessagingData {\\n        address sender;\\n        uint256 nonce;\\n        uint256 messagingRouteId;\\n        uint256 sourceChainId;\\n        uint256 destinationChainId;\\n        address sourceGatewayAddress;\\n        address destinationGatewayAddress;\\n        ICrossSyncGateway.MessagingPayload payload;\\n    }\\n\\n    struct ICrossSyncMultiHopMessagingData {\\n        address sender;\\n        uint256 nonce;\\n        uint256[] messagingRouteIds;\\n        uint256 sourceChainId;\\n        uint256[] destinationChainIds;\\n        address sourceGatewayAddress;\\n        address destinationGatewayAddress;\\n        ICrossSyncGateway.MessagingPayload payload;\\n    }\\n\\n    function executeSendMessage(\\n        ICrossSyncMessagingData calldata _data, uint256 _gasLimit) external payable returns(bytes calldata) ;\\n\\n    // function executeMultiHopSendMessage(\\n    //     ICrossSyncMultiHopMessagingData calldata _data, uint256 _gasLimit) external payable returns(bytes calldata) ;    \\n\\n    function getFee(ICrossSyncMessagingData calldata _data, uint256 _gasLimit) external view returns(uint256);    \\n\\n}\",\"keccak256\":\"0xc365c7b6486004595604a50afe2c421d9fb9d28ddcb4ef6d45e47b1a2b399734\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/helpers/ERC2771Recipient.sol":{"ERC2771Recipient":{"abi":[{"inputs":[],"name":"getTrustedForwarder","outputs":[{"internalType":"address","name":"forwarder","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"forwarder","type":"address"}],"name":"isTrustedForwarder","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"getTrustedForwarder()":{"returns":{"forwarder":"The address of the Forwarder contract that is being used."}},"isTrustedForwarder(address)":{"params":{"forwarder":"The address of the Forwarder contract that is being used."},"returns":{"_0":"isTrustedForwarder `true` if the Forwarder is trusted to forward relayed transactions by this Recipient."}}},"title":"The ERC-2771 Recipient Base Abstract Class - Implementation","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"getTrustedForwarder()":"ce1b815f","isTrustedForwarder(address)":"572b6c05"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"getTrustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getTrustedForwarder()\":{\"returns\":{\"forwarder\":\"The address of the Forwarder contract that is being used.\"}},\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"The address of the Forwarder contract that is being used.\"},\"returns\":{\"_0\":\"isTrustedForwarder `true` if the Forwarder is trusted to forward relayed transactions by this Recipient.\"}}},\"title\":\"The ERC-2771 Recipient Base Abstract Class - Implementation\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getTrustedForwarder()\":{\"notice\":\":warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.Method is not a required method to allow Recipients to trust multiple Forwarders. Not recommended yet.\"},\"isTrustedForwarder(address)\":{\"notice\":\":warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.\"}},\"notice\":\"Note that this contract was called `BaseRelayRecipient` in the previous revision of the GSN.A base contract to be inherited by any contract that want to receive relayed transactions.A subclass must use `_msgSender()` instead of `msg.sender`.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/helpers/ERC2771Recipient.sol\":\"ERC2771Recipient\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/helpers/ERC2771Recipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable no-inline-assembly\\npragma solidity >=0.6.9;\\n\\nimport \\\"./IERC2771Recipient.sol\\\";\\n\\n/**\\n * @title The ERC-2771 Recipient Base Abstract Class - Implementation\\n *\\n * @notice Note that this contract was called `BaseRelayRecipient` in the previous revision of the GSN.\\n *\\n * @notice A base contract to be inherited by any contract that want to receive relayed transactions.\\n *\\n * @notice A subclass must use `_msgSender()` instead of `msg.sender`.\\n */\\nabstract contract ERC2771Recipient is IERC2771Recipient {\\n\\n    /*\\n     * Forwarder singleton we accept calls from\\n     */\\n    address private _trustedForwarder;\\n\\n    /**\\n     * :warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.\\n     * @notice Method is not a required method to allow Recipients to trust multiple Forwarders. Not recommended yet.\\n     * @return forwarder The address of the Forwarder contract that is being used.\\n     */\\n    function getTrustedForwarder() public virtual view returns (address forwarder){\\n        return _trustedForwarder;\\n    }\\n\\n    function _setTrustedForwarder(address _forwarder) internal {\\n        _trustedForwarder = _forwarder;\\n    }\\n\\n    /// @inheritdoc IERC2771Recipient\\n    function isTrustedForwarder(address forwarder) public virtual override view returns(bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    /// @inheritdoc IERC2771Recipient\\n    function _msgSender() internal override virtual view returns (address ret) {\\n        if (msg.data.length >= 20 && isTrustedForwarder(msg.sender)) {\\n            // At this point we know that the sender is a trusted forwarder,\\n            // so we trust that the last bytes of msg.data are the verified sender address.\\n            // extract sender address from the end of msg.data\\n            assembly {\\n                ret := shr(96,calldataload(sub(calldatasize(),20)))\\n            }\\n        } else {\\n            ret = msg.sender;\\n        }\\n    }\\n\\n    /// @inheritdoc IERC2771Recipient\\n    function _msgData() internal override virtual view returns (bytes calldata ret) {\\n        if (msg.data.length >= 20 && isTrustedForwarder(msg.sender)) {\\n            return msg.data[0:msg.data.length-20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n}\",\"keccak256\":\"0x626663d096a6a209f085db4ed90ee80b5b33693df218e89e09ad02be922b6ae9\",\"license\":\"MIT\"},\"contracts/helpers/IERC2771Recipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\n/**\\n * @title The ERC-2771 Recipient Base Abstract Class - Declarations\\n *\\n * @notice A contract must implement this interface in order to support relayed transaction.\\n *\\n * @notice It is recommended that your contract inherits from the ERC2771Recipient contract.\\n */\\nabstract contract IERC2771Recipient {\\n\\n    /**\\n     * :warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.\\n     * @param forwarder The address of the Forwarder contract that is being used.\\n     * @return isTrustedForwarder `true` if the Forwarder is trusted to forward relayed transactions by this Recipient.\\n     */\\n    function isTrustedForwarder(address forwarder) public virtual view returns(bool);\\n\\n    /**\\n     * @notice Use this method the contract anywhere instead of msg.sender to support relayed transactions.\\n     * @return sender The real sender of this call.\\n     * For a call that came through the Forwarder the real sender is extracted from the last 20 bytes of the `msg.data`.\\n     * Otherwise simply returns `msg.sender`.\\n     */\\n    function _msgSender() internal virtual view returns (address);\\n\\n    /**\\n     * @notice Use this method in the contract instead of `msg.data` when difference matters (hashing, signature, etc.)\\n     * @return data The real `msg.data` of this call.\\n     * For a call that came through the Forwarder, the real sender address was appended as the last 20 bytes\\n     * of the `msg.data` - so this method will strip those 20 bytes off.\\n     * Otherwise (if the call was made directly and not through the forwarder) simply returns `msg.data`.\\n     */\\n    function _msgData() internal virtual view returns (bytes calldata);\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\",\"keccak256\":\"0x30231e8682866755b2f437baef3f608115f459f061bf87fd0975e3091b6619fd\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":6199,"contract":"contracts/helpers/ERC2771Recipient.sol:ERC2771Recipient","label":"__gap","offset":0,"slot":"0","type":"t_array(t_uint256)50_storage"},{"astId":6076,"contract":"contracts/helpers/ERC2771Recipient.sol:ERC2771Recipient","label":"_trustedForwarder","offset":0,"slot":"50","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{"getTrustedForwarder()":{"notice":":warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.Method is not a required method to allow Recipients to trust multiple Forwarders. Not recommended yet."},"isTrustedForwarder(address)":{"notice":":warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder."}},"notice":"Note that this contract was called `BaseRelayRecipient` in the previous revision of the GSN.A base contract to be inherited by any contract that want to receive relayed transactions.A subclass must use `_msgSender()` instead of `msg.sender`.","version":1}}},"contracts/helpers/IERC2771Recipient.sol":{"IERC2771Recipient":{"abi":[{"inputs":[{"internalType":"address","name":"forwarder","type":"address"}],"name":"isTrustedForwarder","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"isTrustedForwarder(address)":{"params":{"forwarder":"The address of the Forwarder contract that is being used."},"returns":{"_0":"isTrustedForwarder `true` if the Forwarder is trusted to forward relayed transactions by this Recipient."}}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"title":"The ERC-2771 Recipient Base Abstract Class - Declarations","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"isTrustedForwarder(address)":"572b6c05"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"The address of the Forwarder contract that is being used.\"},\"returns\":{\"_0\":\"isTrustedForwarder `true` if the Forwarder is trusted to forward relayed transactions by this Recipient.\"}}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"title\":\"The ERC-2771 Recipient Base Abstract Class - Declarations\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isTrustedForwarder(address)\":{\"notice\":\":warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.\"}},\"notice\":\"A contract must implement this interface in order to support relayed transaction.It is recommended that your contract inherits from the ERC2771Recipient contract.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/helpers/IERC2771Recipient.sol\":\"IERC2771Recipient\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/helpers/IERC2771Recipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\n/**\\n * @title The ERC-2771 Recipient Base Abstract Class - Declarations\\n *\\n * @notice A contract must implement this interface in order to support relayed transaction.\\n *\\n * @notice It is recommended that your contract inherits from the ERC2771Recipient contract.\\n */\\nabstract contract IERC2771Recipient {\\n\\n    /**\\n     * :warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.\\n     * @param forwarder The address of the Forwarder contract that is being used.\\n     * @return isTrustedForwarder `true` if the Forwarder is trusted to forward relayed transactions by this Recipient.\\n     */\\n    function isTrustedForwarder(address forwarder) public virtual view returns(bool);\\n\\n    /**\\n     * @notice Use this method the contract anywhere instead of msg.sender to support relayed transactions.\\n     * @return sender The real sender of this call.\\n     * For a call that came through the Forwarder the real sender is extracted from the last 20 bytes of the `msg.data`.\\n     * Otherwise simply returns `msg.sender`.\\n     */\\n    function _msgSender() internal virtual view returns (address);\\n\\n    /**\\n     * @notice Use this method in the contract instead of `msg.data` when difference matters (hashing, signature, etc.)\\n     * @return data The real `msg.data` of this call.\\n     * For a call that came through the Forwarder, the real sender address was appended as the last 20 bytes\\n     * of the `msg.data` - so this method will strip those 20 bytes off.\\n     * Otherwise (if the call was made directly and not through the forwarder) simply returns `msg.data`.\\n     */\\n    function _msgData() internal virtual view returns (bytes calldata);\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\",\"keccak256\":\"0x30231e8682866755b2f437baef3f608115f459f061bf87fd0975e3091b6619fd\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":6199,"contract":"contracts/helpers/IERC2771Recipient.sol:IERC2771Recipient","label":"__gap","offset":0,"slot":"0","type":"t_array(t_uint256)50_storage"}],"types":{"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{"isTrustedForwarder(address)":{"notice":":warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder."}},"notice":"A contract must implement this interface in order to support relayed transaction.It is recommended that your contract inherits from the ERC2771Recipient contract.","version":1}}},"contracts/interfaces/ICrossSyncGateway.sol":{"ICrossSyncGateway":{"abi":[{"inputs":[{"internalType":"uint256","name":"_destinationChainId","type":"uint256"},{"internalType":"uint256","name":"_routeId","type":"uint256"},{"components":[{"internalType":"address","name":"to","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct ICrossSyncGateway.MessagingPayload","name":"_payload","type":"tuple"},{"internalType":"uint256","name":"_gasLimit","type":"uint256"}],"name":"getFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"_payload","type":"bytes"}],"name":"handleReceive","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_destinationChainId","type":"uint256"},{"internalType":"uint256","name":"_routeId","type":"uint256"},{"components":[{"internalType":"address","name":"to","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct ICrossSyncGateway.MessagingPayload","name":"_payload","type":"tuple"},{"internalType":"uint256","name":"gasLimit","type":"uint256"},{"internalType":"bytes","name":"_routeData","type":"bytes"}],"name":"sendMessage","outputs":[],"stateMutability":"payable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"getFee(uint256,uint256,(address,bytes),uint256)":"c50189b8","handleReceive(bytes)":"e34381a1","sendMessage(uint256,uint256,(address,bytes),uint256,bytes)":"5c96a561"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_destinationChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_routeId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct ICrossSyncGateway.MessagingPayload\",\"name\":\"_payload\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_gasLimit\",\"type\":\"uint256\"}],\"name\":\"getFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"handleReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_destinationChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_routeId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct ICrossSyncGateway.MessagingPayload\",\"name\":\"_payload\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_routeData\",\"type\":\"bytes\"}],\"name\":\"sendMessage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/ICrossSyncGateway.sol\":\"ICrossSyncGateway\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/interfaces/ICrossSyncGateway.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\npragma abicoder v2;\\n\\nimport './ICrossSyncReceiver.sol';\\n\\ninterface ICrossSyncGateway is ICrossSyncReceiver {\\n\\n    struct MessagingPayload{\\n        address to;\\n        bytes data;\\n    }\\n\\n    function sendMessage(\\n        uint256 _destinationChainId,\\n        uint256 _routeId,\\n        MessagingPayload calldata _payload,\\n        uint256 gasLimit,\\n        bytes calldata _routeData\\n    ) external payable;\\n\\n    // function sendMessageUsingManualMultiHop(\\n    //     uint256[] memory _destinationChainIds,\\n    //     uint256[] memory _routeIds,\\n    //     MessagingPayload calldata _payload,\\n    //     uint256 gasLimit,\\n    //     bytes[] calldata _routeData\\n    // ) external payable;\\n\\n    function getFee(\\n        uint256 _destinationChainId,\\n        uint256 _routeId,\\n        MessagingPayload calldata _payload,\\n        uint256 _gasLimit\\n    ) external view returns(uint256);\\n    \\n       \\n}\",\"keccak256\":\"0x0ed47f443e527e4b547c57c6a5a5cddec342515d06017208624c40a85b012dcb\",\"license\":\"MIT\"},\"contracts/interfaces/ICrossSyncReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\npragma abicoder v2;\\n\\n\\ninterface ICrossSyncReceiver {\\n\\n    function handleReceive(\\n        bytes calldata _payload\\n    ) external;  \\n\\n}\",\"keccak256\":\"0xdf108eab0e23b8c206d6888d694b47bb4a42f8be2918f9798b898941150c486a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/interfaces/ICrossSyncReceiver.sol":{"ICrossSyncReceiver":{"abi":[{"inputs":[{"internalType":"bytes","name":"_payload","type":"bytes"}],"name":"handleReceive","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"handleReceive(bytes)":"e34381a1"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"handleReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/ICrossSyncReceiver.sol\":\"ICrossSyncReceiver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/interfaces/ICrossSyncReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\npragma abicoder v2;\\n\\n\\ninterface ICrossSyncReceiver {\\n\\n    function handleReceive(\\n        bytes calldata _payload\\n    ) external;  \\n\\n}\",\"keccak256\":\"0xdf108eab0e23b8c206d6888d694b47bb4a42f8be2918f9798b898941150c486a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/interfaces/ICrossSyncReceiverImplementer.sol":{"ICrossSyncReceiverImplementer":{"abi":[{"inputs":[{"internalType":"uint256","name":"_sourceChainId","type":"uint256"},{"internalType":"address","name":"_sourceAddress","type":"address"},{"internalType":"bytes","name":"_payload","type":"bytes"}],"name":"receiveMessage","outputs":[],"stateMutability":"payable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"receiveMessage(uint256,address,bytes)":"1885c2f9"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sourceChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_sourceAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"receiveMessage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/ICrossSyncReceiverImplementer.sol\":\"ICrossSyncReceiverImplementer\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/interfaces/ICrossSyncReceiverImplementer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\npragma abicoder v2;\\n\\ninterface ICrossSyncReceiverImplementer {\\n\\n    function receiveMessage(\\n        uint256 _sourceChainId,\\n        address _sourceAddress,\\n        bytes calldata _payload\\n    ) external payable ;    \\n  \\n        \\n}\",\"keccak256\":\"0x0e7bbcb5fa79635acf3134d5f9b6337219e1d88fc6b5dc1067f2de2c8258c9c0\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/interfaces/IMessagingImpl.sol":{"IMessagingImpl":{"abi":[{"inputs":[{"components":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"uint256","name":"messagingRouteId","type":"uint256"},{"internalType":"uint256","name":"sourceChainId","type":"uint256"},{"internalType":"uint256","name":"destinationChainId","type":"uint256"},{"internalType":"address","name":"sourceGatewayAddress","type":"address"},{"internalType":"address","name":"destinationGatewayAddress","type":"address"},{"components":[{"internalType":"address","name":"to","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct ICrossSyncGateway.MessagingPayload","name":"payload","type":"tuple"}],"internalType":"struct IMessagingImpl.ICrossSyncMessagingData","name":"_data","type":"tuple"},{"internalType":"uint256","name":"_gasLimit","type":"uint256"}],"name":"executeSendMessage","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"uint256","name":"messagingRouteId","type":"uint256"},{"internalType":"uint256","name":"sourceChainId","type":"uint256"},{"internalType":"uint256","name":"destinationChainId","type":"uint256"},{"internalType":"address","name":"sourceGatewayAddress","type":"address"},{"internalType":"address","name":"destinationGatewayAddress","type":"address"},{"components":[{"internalType":"address","name":"to","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct ICrossSyncGateway.MessagingPayload","name":"payload","type":"tuple"}],"internalType":"struct IMessagingImpl.ICrossSyncMessagingData","name":"_data","type":"tuple"},{"internalType":"uint256","name":"_gasLimit","type":"uint256"}],"name":"getFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"executeSendMessage((address,uint256,uint256,uint256,uint256,address,address,(address,bytes)),uint256)":"36c5eda4","getFee((address,uint256,uint256,uint256,uint256,address,address,(address,bytes)),uint256)":"604a172c"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"messagingRouteId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sourceChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destinationChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sourceGatewayAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destinationGatewayAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct ICrossSyncGateway.MessagingPayload\",\"name\":\"payload\",\"type\":\"tuple\"}],\"internalType\":\"struct IMessagingImpl.ICrossSyncMessagingData\",\"name\":\"_data\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_gasLimit\",\"type\":\"uint256\"}],\"name\":\"executeSendMessage\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"messagingRouteId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sourceChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destinationChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sourceGatewayAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destinationGatewayAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct ICrossSyncGateway.MessagingPayload\",\"name\":\"payload\",\"type\":\"tuple\"}],\"internalType\":\"struct IMessagingImpl.ICrossSyncMessagingData\",\"name\":\"_data\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_gasLimit\",\"type\":\"uint256\"}],\"name\":\"getFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IMessagingImpl.sol\":\"IMessagingImpl\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/interfaces/ICrossSyncGateway.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\npragma abicoder v2;\\n\\nimport './ICrossSyncReceiver.sol';\\n\\ninterface ICrossSyncGateway is ICrossSyncReceiver {\\n\\n    struct MessagingPayload{\\n        address to;\\n        bytes data;\\n    }\\n\\n    function sendMessage(\\n        uint256 _destinationChainId,\\n        uint256 _routeId,\\n        MessagingPayload calldata _payload,\\n        uint256 gasLimit,\\n        bytes calldata _routeData\\n    ) external payable;\\n\\n    // function sendMessageUsingManualMultiHop(\\n    //     uint256[] memory _destinationChainIds,\\n    //     uint256[] memory _routeIds,\\n    //     MessagingPayload calldata _payload,\\n    //     uint256 gasLimit,\\n    //     bytes[] calldata _routeData\\n    // ) external payable;\\n\\n    function getFee(\\n        uint256 _destinationChainId,\\n        uint256 _routeId,\\n        MessagingPayload calldata _payload,\\n        uint256 _gasLimit\\n    ) external view returns(uint256);\\n    \\n       \\n}\",\"keccak256\":\"0x0ed47f443e527e4b547c57c6a5a5cddec342515d06017208624c40a85b012dcb\",\"license\":\"MIT\"},\"contracts/interfaces/ICrossSyncReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\npragma abicoder v2;\\n\\n\\ninterface ICrossSyncReceiver {\\n\\n    function handleReceive(\\n        bytes calldata _payload\\n    ) external;  \\n\\n}\",\"keccak256\":\"0xdf108eab0e23b8c206d6888d694b47bb4a42f8be2918f9798b898941150c486a\",\"license\":\"MIT\"},\"contracts/interfaces/IMessagingImpl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\npragma abicoder v2;\\n\\nimport './ICrossSyncGateway.sol';\\n\\ninterface IMessagingImpl {\\n\\n    struct ICrossSyncMessagingData {\\n        address sender;\\n        uint256 nonce;\\n        uint256 messagingRouteId;\\n        uint256 sourceChainId;\\n        uint256 destinationChainId;\\n        address sourceGatewayAddress;\\n        address destinationGatewayAddress;\\n        ICrossSyncGateway.MessagingPayload payload;\\n    }\\n\\n    struct ICrossSyncMultiHopMessagingData {\\n        address sender;\\n        uint256 nonce;\\n        uint256[] messagingRouteIds;\\n        uint256 sourceChainId;\\n        uint256[] destinationChainIds;\\n        address sourceGatewayAddress;\\n        address destinationGatewayAddress;\\n        ICrossSyncGateway.MessagingPayload payload;\\n    }\\n\\n    function executeSendMessage(\\n        ICrossSyncMessagingData calldata _data, uint256 _gasLimit) external payable returns(bytes calldata) ;\\n\\n    // function executeMultiHopSendMessage(\\n    //     ICrossSyncMultiHopMessagingData calldata _data, uint256 _gasLimit) external payable returns(bytes calldata) ;    \\n\\n    function getFee(ICrossSyncMessagingData calldata _data, uint256 _gasLimit) external view returns(uint256);    \\n\\n}\",\"keccak256\":\"0xc365c7b6486004595604a50afe2c421d9fb9d28ddcb4ef6d45e47b1a2b399734\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}